@page "/RoleList"
@using Admin.Services
@using System.Collections.ObjectModel;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MyDataGrid @ref="@grid"
            T="RoleListModel"
            Title="Danh sách yêu cầu bồi thường"
            Items="@DetailData"
            IsAddNew="true"
            IsDelete="true"
            OnAddRow="@(() => OnAddRow_Handle())"
            OnViewRow="@((RoleListModel row) => OnViewRow_Handle(row))"
            OnDeleteRow="@((RoleListModel row) => OnDeleteRow_Handle(row))">
    <ColGroup>
        <col style="width: 2rem;" />
        <col style="width: 6rem;" />
        <col style="width: 8rem;" />
        <col style="width: 10rem;" />
        <col />
        <col style="width: 10rem;" />
        <col />
        <col style="width: 5rem;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<RoleListModel, object>(x => x.DspOrder)">No.</MudTableSortLabel></MudTh>
        <MudTh>Mã</MudTh>
        <MudTh>Tên</MudTh>
        <MudTh>Ghi chú</MudTh>
        <MudTh>Ngày giờ</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="text-align:center;">@context.DspOrder</MudTd>
        <MudTd>@context.RoleID</MudTd>
        <MudTd>@context.RoleName</MudTd>
        <MudTd>@context.Discriptions</MudTd>
        <MudTd Style="text-align:center;">@context.ModifiedOn.ToString("dd/MM/yyyy HH:mm")</MudTd>
    </RowTemplate>
</MyDataGrid>

@code{
    [CascadingParameter] protected ProgramInfo Program { get; set; }
    // Detail data
    MyDataGrid<RoleListModel> grid;
    readonly List<RoleListModel> DetailData = new List<RoleListModel>();
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Display data ..
        await DisplayMain();
    }
    #region Load data

    async Task DisplayMain()
    {
        try
        {
            //Filter
            var requestString = new Empty_Request()
            {
                Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                },
            };

            //Get data from DB
            DetailData.Clear();
            var response = await adminServiceClient.GetRoleListAsync(requestString);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.Records)
                {
                    RoleListModel dataRow = new RoleListModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //
                    DetailData.Add(dataRow);
                }
            }
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_LoadDataFailed, Severity.Error);
        }
    }
    #endregion

    #region Save

    
    //
    async Task<bool> SaveRow(RoleListModel saveRow)
    {
        try
        {
            //Request
            var request = new Admin.Services.SaveRoleList_Request();
            var Credential = new Admin.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            // Convert to DB row
            request.Record = new grpcRoleListModel();
            ClassHelper.CopyPropertiesDataDateConverted(saveRow, request.Record);
            // Call api
            var response = await adminServiceClient.SaveRoleListAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                Snackbar.Add(MyMessage.Error_SaveFailed, Severity.Error);
            }
            else
            {
                //Update ID
                saveRow.ID = response.StringValue;
            }
            //OK
            return true;
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_SaveFailed, Severity.Error);
        }
        //
        return false;
    }

    #endregion

    #region Grid main
    //Add row
    async void OnAddRow_Handle()
    {
        //Init new row
        var newRow = new RoleListModel();
        newRow.UpdMode = 1;
        newRow.ModifiedOn = DateTime.Now;
        //
        var parameters = new DialogParameters();
        parameters.Add("Model", newRow);
        //
        var result = await DialogService.Show<BrancheMasterEdit>("", parameters, MyOptions.GetEditFormOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (RoleListModel)result.Data;

            //Save to DB
            var saveRet = await SaveRow(retModel);
            if (true)
            {
                //Add to grid
                DetailData.Add(retModel);
                grid.Refresh();
            }
        }
    }
    //Update row
    async void OnViewRow_Handle(RoleListModel row)
    {
        //UpdMode
        row.UpdMode = 2;
        //
        var parameters = new DialogParameters();
        parameters.Add("Model", row);
        //
        var result = await DialogService.Show<BrancheMasterEdit>("", parameters, MyOptions.GetEditFormOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (RoleListModel)result.Data;
            var updateReccord = DetailData.Find(x => x.ID == retModel.ID);
            if (updateReccord != null)
            {
                //Update to Grid
                ClassHelper.CopyPropertiesData(retModel, updateReccord);

                //Save to DB
                var saveRet = await SaveRow(retModel);
                if (true)
                {
                    grid.Refresh();
                }
            }
        }
    }

    //Delete row
    async void OnDeleteRow_Handle(RoleListModel row)
    {
        //UpdMode
        row.UpdMode = 3;

        //Save to DB
        var saveRet = await SaveRow(row);
        if (true)
        {
            DetailData.Remove(row);
            grid.Refresh();
        }
    }
    #endregion

}