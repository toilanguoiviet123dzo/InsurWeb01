@page "/rolelist"
@using Admin.Services
@using System.Collections.ObjectModel;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<br />
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@DetailData"
                EditMode="DataGridEditMode.PopupEditForm"
                PageSize="18"
                ShowFilterRow="true"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))"
                RowInsertStart="@(() => OnRowEditStarting(null))">
        <Columns>

            <DxDataGridColumn Field="@nameof(RoleListModel.RoleID)"
                              Caption="RoleID"
                              Width="5rem" />
            <DxDataGridColumn Field="@nameof(RoleListModel.RoleName)"
                              Caption="RoleName"
                              Width="15rem" />
            <DxDataGridColumn Field="@nameof(RoleListModel.Discriptions)"
                              Caption="Descriptions"
                              Width="10rem%" />
            <DxDataGridColumn Field="@nameof(RoleListModel.DspOrder)"
                              Caption="Display order"
                              Width="8rem" />
            <DxDataGridDateEditColumn Field="@nameof(RoleListModel.CreatedOn)"
                                      Caption="CreatedOn"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="10rem" />
            <DxDataGridDateEditColumn Field="@nameof(RoleListModel.ModifiedOn)"
                                      Caption="ModifiedOn"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="10rem%" />
            <!--Command columns-->
            <MyGridCommand Grid="grid"
                           ShowAddnew="true"
                           ShowEdit="true"
                           ShowDelete="true"
                           OnRowRemoving="@((context) => OnRowRemoving(context as RoleListModel))" />
        </Columns>
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Role ID: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.RoleID" />
                            <ValidationMessage For="@(() => EditContext.RoleID)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Role Name: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.RoleName" />
                            <ValidationMessage For="@(() => EditContext.RoleName)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Descriptions: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Discriptions" />
                            <ValidationMessage For="@(() => EditContext.Discriptions)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Display order: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.DspOrder" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--OK Cancel-->
                    <MyGridEditFormOKCancel OnCancelClick="OnCancelButtonClick" />
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
    </DxDataGrid>
    <br />
    <div class="text-center">
        <MyButtonSave OnClick="ShowConfirm_SaveMain" />
        <MyButtonCancel OnClick="ShowConfirm_CancelSaveMain" />
    </div>
</div>
<ConfirmDialog Message="@ConfirmMessage" @bind-Visible="@PopupVisible" confirm="@ConfirmHandler" />

@code{
    FormEditContext EditContext = null;
    // Detail data
    readonly ObservableCollection<RoleListModel> DetailData = new ObservableCollection<RoleListModel>();
    // Popup
    private string ConfirmMessage = "";
    private string ConfirmAction = "";
    private bool PopupVisible = false;
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Display data ..
        await DisplayMain();
    }
    #region Load data

    async Task DisplayMain()
    {
        try
        {
            //Filter
            var requestString = new Empty_Request()
            {
                Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                },
            };

            //Get data from DB
            DetailData.Clear();
            var response = await adminServiceClient.GetRoleListAsync(requestString);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.RoleList)
                {
                    RoleListModel dataRow = new RoleListModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //
                    DetailData.Add(dataRow);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load dữ liệu thất bại.");
        }
    }
    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        //Save main
        if (ConfirmAction == "SaveMain")
        {
            SaveMain();
        }
        //Cancel save main
        if (ConfirmAction == "CancelSaveMain")
        {
            CancelSaveMain();
        }
        //Close confirm delete popup
        PopupVisible = false;
        StateHasChanged();
    }

    //Cancel changed
    void ShowConfirm_CancelSaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", "Nothing Changed!");
            return;
        }
        //Show popup confirm
        ConfirmMessage = "Cancel changed?";
        ConfirmAction = "CancelSaveMain";
        PopupVisible = true;
        StateHasChanged();
    }
    async void CancelSaveMain()
    {
        //Reload data
        await DisplayMain();
    }

    //Save main
    void ShowConfirm_SaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", "Nothing Changed!");
            return;
        }
        //Show popup confirm
        ConfirmMessage = "Save changed?";
        ConfirmAction = "SaveMain";
        PopupVisible = true;
        StateHasChanged();
    }

    //Check changed
    bool Check_Changed()
    {
        foreach (RoleListModel row in DetailData)
        {
            if (row.UpdMode != 0)
            {
                return true;
            }
        }
        return false;
    }
    //
    async void SaveMain()
    {
        try
        {
            var hasChanged = false;
            //Request
            SaveRoleList_Request request = new SaveRoleList_Request();
            var Credential = new UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            foreach (RoleListModel row in DetailData)
            {
                if (row.UpdMode != 0)
                {
                    //Convert to DB row
                    var dbRow = new grpcRoleList();
                    ClassHelper.CopyPropertiesDataDateConverted(row, dbRow);
                    request.RoleList.Add(dbRow);
                    //
                    hasChanged = true;
                }
            }
            //Check changed
            if (!hasChanged)
            {
                //Message no change
                toastService.ShowInfo("", "Nothing Changed!");
                return;
            }
            //Call api
            var response = await adminServiceClient.SaveRoleListAsync(request);
            // Success
            if (response != null && response.ReturnCode == 200)
            {
                //Show success
                toastService.ShowSuccess("", "Save Success!");
            }
            else
            {
                toastService.ShowError("", "Lưu dữ liệu thất bại.");
            }

            //Reload data
            await DisplayMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Lưu dữ liệu thất bại.");
            throw;
        }
    }

    #endregion

    #region Grid main
    //Confirm delete
    RoleListModel DeletedRow = null;
    void OnRowRemoving(RoleListModel dataRow)
    {
        DeletedRow = dataRow;

        //Show popup confirm
        ConfirmMessage = "Delete row?";
        ConfirmAction = "DeleteRow";
        PopupVisible = true;
        StateHasChanged();
    }

    //Cancel edit
    async Task OnCancelButtonClick()
    {
        await grid.CancelRowEdit();
        EditContext = null;
    }

    async void DeleteRow()
    {
        //Set to delete mode
        if (DeletedRow.UpdMode == 1)
        {
            //Remove new row from data source
            DetailData.Remove(DeletedRow);
        }
        else
        {
            //Mark to delete
            DeletedRow.UpdMode = 3;
        }

        //Refresh layout
        await grid.Refresh();
    }
    //Update row
    async Task UpdateRow()
    {
        //Update for edit field
        var backupRow = new RoleListModel();
        ClassHelper.CopyPropertiesData(EditContext.EditingRow, backupRow);
        //
        EditContext.EditingRow.SystemID = "";
        EditContext.EditingRow.RoleID = EditContext.RoleID;
        EditContext.EditingRow.RoleName = EditContext.RoleName;
        EditContext.EditingRow.Discriptions = EditContext.Discriptions;
        EditContext.EditingRow.DspOrder = EditContext.DspOrder;
        EditContext.EditingRow.ModifiedOn = DateTime.Now;

        //Update mode
        if (EditContext.EditingRow.UpdMode == 0 || EditContext.EditingRow.UpdMode == 3)
        {
            EditContext.EditingRow.UpdMode = 2;
        }

        //Insert to datasource
        if (EditContext.EditingRow.UpdMode == -1)
        {
            EditContext.EditingRow.UpdMode = 1;
            DetailData.Add(EditContext.EditingRow);
        }

        //Close popup & refresh data
        await grid.CancelRowEdit();
        await grid.Refresh();
    }
    // Edit row model
    DxDataGrid<RoleListModel> grid;
    class FormEditContext : RoleListModel
    {
        public FormEditContext(RoleListModel roleListModel)
        {
            //Saved data
            EditingRow = roleListModel;

            //Editable data only
            SystemID = EditingRow.SystemID;
            RoleID = EditingRow.RoleID;
            RoleName = EditingRow.RoleName;
            Discriptions = EditingRow.Discriptions;
            DspOrder = EditingRow.DspOrder;
        }
        public RoleListModel EditingRow { get; set; }
        public Action StateHasChanged { get; set; }
    }

    //Get data for edit/insert
    void OnRowEditStarting(RoleListModel editingRow)
    {
        //Init new row
        if (editingRow == null)
        {
            editingRow = new RoleListModel();
            //
            //editingRow.SystemID = SelectedListCode;
            editingRow.CreatedOn = DateTime.Now;
            editingRow.ModifiedOn = DateTime.Now;
            editingRow.UpdMode = -1;
        }
        EditContext = new FormEditContext(editingRow);
    }
    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<RoleListModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += myColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }
    #endregion

    #region Screen items

    #endregion
    //
}