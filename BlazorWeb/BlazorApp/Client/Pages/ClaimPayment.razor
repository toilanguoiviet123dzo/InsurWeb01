@page "/ClaimPayment"
@using Admin.Services
@using Claim.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar

<!--Header-->
<MyPanels>
    <MyPanel Title="Bộ lọc">
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Phone-->
                <div class="col-12 col-lg-2">
                    <MyTextEdit @bind-Text="Filter_CusPhone"
                                Literal="Phone"
                                Class="text-blue font-weight-bold" />
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-2">
                    <MyTextEdit @bind-Text="Filter_DeviceIMEI"
                                Literal="Số IMEI thiết bị"
                                Class="text-purple font-weight-bold" />
                </div>
                <!--Tên khách hàng-->
                <div class="col-12 col-lg-2">
                    <MyTextEdit @bind-Text="Filter_CusFullname"
                                Literal="Tên khách hàng" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row align-items-end">
                <!--Công ty bảo hiểm-->
                <div class="col-12 col-lg-2">
                    <MyComboBox @bind-Value="Filter_Insure"
                                Data="InsureList"
                                Clearable="true"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                Literal="Công ty bảo hiểm" />
                </div>
                <!--Thời gian-->
                <div class="col-12 col-lg-4">
                    <div class="row">
                        <!--Time flag-->
                        <div class="col-12 col-lg-4">
                            <MyComboBox @bind-Value="Filter_TimeFlag"
                                        Data="TimeFlagList"
                                        TextFieldName="@(nameof(CodeNameModel.Name))"
                                        SelectedItemChanged="@((CodeNameModel selectedItem) =>
                                                       {
                                                            var timeRange = MyDateTimeSelector.Select_DateTimeRange1(selectedItem);
                                                            Filter_StartDate = timeRange.StartDate;
                                                            Filter_EndDate = timeRange.EndDate;
                                                            this.StateHasChanged();
                                                       })"
                                        Clearable="true"
                                        Literal="Thời gian" />
                        </div>
                        <!--Start-->
                        <div class="col-6 col-lg-4">
                            <MyDateEdit @bind-Date="Filter_StartDate"
                                        Format="dd/MM/yyyy"
                                        Width="100%"
                                        Literal="Từ ngày" />
                        </div>
                        <!--End-->
                        <div class="col-6 col-lg-4">
                            <MyDateEdit @bind-Date="Filter_EndDate"
                                        Format="dd/MM/yyyy"
                                        Width="100%"
                                        Literal="Đến ngày" />
                        </div>
                    </div>
                </div>
                <!--Trạng thái-->
                <div class="col-12 col-lg-2 pr-lg-3">
                    <div class="row align-items-end">
                        <div class="col-8">
                            <MyComboBox @bind-Value="Filter_Status"
                                        Data="StatusList"
                                        TextFieldName="@(nameof(CodeNameModel.Name))"
                                        Clearable="true"
                                        Literal="Trạng thái" />
                        </div>
                        <div class="col-4">
                            <!--Check Chưa/Xong-->
                            <MyCheckBox Checked="@StatusCheck"
                                        CheckedChanged="@((bool newValue) => {
                                                      StatusCheck = newValue;
                                                      CheckName = newValue? "Xong" : "Chưa";
                                                  })">
                                <label> @CheckName </label>
                            </MyCheckBox>
                        </div>
                    </div>
                </div>
                <!--Search buttion-->
                <div class="col-12 col-lg-2 mt-2">
                    <MyButtonSearch OnClick="@(() => DisplayMain())" />
                </div>

            </div>

        </div><!--End container-->
    </MyPanel>
</MyPanels>

<!--Grid-->
<MyDataGrid @ref="@grid"
            T="ClaimRequestListModel"
            Title="Danh sách yêu cầu bồi thường"
            Items="@DetailData"
            IsAddNew="true"
            IsDelete="true"
            OnViewRow="@((ClaimRequestListModel row) => OnViewRow_Handle(row))">
    <ColGroup>
        <col style="width: 5rem;" />
        <col style="width: 8rem;" />
        <col style="width: 5rem;" />
        <col style="width: 10rem;" />
        <col style="width: 6rem;" />
        <col style="width: 8rem;" />
        <col style="width: 10rem;" />
        <col style="width: 10rem;" />
        <col />
        <col style="width: 8rem;" />
        <col style="width: 8rem;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<ClaimRequestListModel, object>(x=>x.ClaimNo)">Số tiếp nhận</MudTableSortLabel></MudTh>
        <MudTh>Ngày tiếp nhận</MudTh>
        <MudTh>Trạng thái</MudTh>
        <MudTh>Tên khách hàng</MudTh>
        <MudTh>Điện thoại</MudTh>
        <MudTh>Ngày sự cố</MudTh>
        <MudTh>Model thiết bị</MudTh>
        <MudTh>Số IMEI thiết bị</MudTh>
        <MudTh>Địa chỉ lấy thiết bị</MudTh>
        <MudTh>Ngày YC chi trả</MudTh>
        <MudTh>Người chi trả</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="text-align:center; color:blue; font-weight:bold">@context.ClaimNo</MudTd>
        <MudTd Style="text-align:center">@context.ClaimDate.ToString("dd/MM/yyyy HH:mm")</MudTd>
        <MudTd Style="text-align:center; color:green; font-weight:bold">@context.StatusName</MudTd>
        <MudTd>@context.CusFullname</MudTd>
        <MudTd Style="text-align:center">@context.CusPhone</MudTd>
        <MudTd Style="text-align:center; color: maroon">@context.IncidentDate.ToString("dd/MM/yyyy HH:mm")</MudTd>
        <MudTd>@context.DeviceModel</MudTd>
        <MudTd>@context.DeviceIMEI</MudTd>
        <MudTd>@context.PickupAddress</MudTd>
        <MudTd Style="text-align:center">@context.PayReqDate.ToString("dd/MM/yyyy HH:mm")</MudTd>
        <MudTd>@context.PayAccountName</MudTd>
    </RowTemplate>
</MyDataGrid>


@code {
    //Program
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }

    MyDataGrid<ClaimRequestListModel> grid;
    readonly ObservableCollection<ClaimRequestListModel> DetailData = new ObservableCollection<ClaimRequestListModel>();

    // Master
    private List<BranchMasterModel> BranchList = new List<BranchMasterModel>();
    private List<OptionListModel> InsureList = new List<OptionListModel>();
    private List<CodeNameModel> StatusList = MyClaimStatus.Get_PaymentStatusList();
    private List<CodeNameModel> TimeFlagList = MyDateTimeSelector.Get_TimeRangeList();

    //Filter
    private string Filter_CusPhone = "";
    private string Filter_DeviceIMEI = "";
    private string Filter_CusFullname = "";
    private CodeNameModel Filter_Status { get; set; } = new CodeNameModel { CodeInt = 11, Name = "Chi trả" };
    private CodeNameModel Filter_TimeFlag { get; set; }
    private DateTime Filter_StartDate { get; set; } = DateTime.Today.MinDate().ToLocalTime();
    private DateTime Filter_EndDate { get; set; } = DateTime.Today.MaxDate().ToLocalTime();
    private OptionListModel Filter_Insure = null;
    //
    private string ClaimNo = "";
    private bool StatusCheck = false;
    private string CheckName = "Chưa";
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        await DisplayMain();
    }
    #region Load data
    async Task LoadMaster()
    {
        InsureList = await masterService.Load_OptionList("008");
        BranchList = await masterService.Load_BranchList();
    }
    //
    async Task DisplayMain()
    {
        try
        {
            if (grid != null) grid.BeginLoadData();
            //Filter
            var request = new Claim.Services.GetClaimRequestList_Request();
            request.Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };

            //CusPhone
            if (!string.IsNullOrWhiteSpace(Filter_CusPhone)) request.CusPhone = Filter_CusPhone;
            //DeviceIMEI
            if (!string.IsNullOrWhiteSpace(Filter_DeviceIMEI)) request.DeviceIMEI = Filter_DeviceIMEI;
            //CusFullname
            if (!string.IsNullOrWhiteSpace(Filter_CusFullname)) request.CusFullname = Filter_CusFullname;
            //BrancheID
            request.BrancheID = WebUserCredential.BrancheID;
            //InsurCompanyID
            if (Filter_Insure != null && !string.IsNullOrWhiteSpace(Filter_Insure.ItemCode)) request.InsurCompanyID = Filter_Insure.ItemCode;
            //Status
            if (Filter_Status != null && Filter_Status.CodeInt != 0) request.Status = Filter_Status.CodeInt;
            //Status check
            request.StatusCheck = StatusCheck;
            //Time range
            request.StartDate = Filter_StartDate.ToTimestampFromLocalTime();
            request.EndDate = Filter_EndDate.ToTimestampFromLocalTime();
            //
            var response = await ClaimServiceClient.GetApproveListAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                if (response.ClaimRequests != null)
                {
                    //Get data from DB
                    DetailData.Clear();
                    //
                    foreach (var item in response.ClaimRequests)
                    {
                        //Parrent grid
                        var dataRow = new ClaimRequestListModel();
                        ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                        //Status name
                        dataRow.StatusName = MyClaimStatus.Get_PaymentStatusName(dataRow);
                        //Row mode
                        dataRow.RowMode_View = false;
                        dataRow.RowMode_Edit = true;
                        dataRow.RowMode_Delete = false;
                        if (dataRow.CloseStatus)
                        {
                            dataRow.RowMode_View = true;
                            dataRow.RowMode_Edit = false;
                        }
                        //
                        DetailData.Add(dataRow);
                    }
                }
            }
            if (DetailData.Count == 0)
            {
                Snackbar.Add(MyMessage.Error_NoData, Severity.Info);
            }
            if (grid != null) grid.EndLoadData();
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_LoadDataFailed, Severity.Error);
        }
    }

    #endregion

    #region Grid main
    //
    void OnViewRow_Handle(ClaimRequestListModel row)
    {
        var parameters = new DialogParameters { ["ClaimNo"] = row.ClaimNo };
        ShowDetailForm(parameters);
    }

    async void ShowDetailForm(DialogParameters parameters)
    {
        var result = await DialogService.Show<ClaimPaymentEdit>("", parameters, MyOptions.GetMyFormOptions(MaxWidth.Large)).Result;
        if (!result.Cancelled)
        {
            await DisplayMain();
        }
    }

    #endregion

}
