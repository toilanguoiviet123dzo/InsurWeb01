@page "/menudefinition"
@using Admin.Services
@using System.Collections.ObjectModel
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<br />
<div style="width:900px">
    <DxDataGrid @ref="@Grid"
                ColumnResizeMode="DataGridColumnResizeMode.Component"
                Data="@ListMenuGroup"
                PageSize="18"
                ShowFilterRow="true"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                RowInsertStart="@(() => OnRowEditStarting(null))"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))"
                RowRemoving="@((dataRow) => OnRowRemoving(dataRow))"
                AutoCollapseDetailRow="true"
                ShowDetailRow="true"
                KeyFieldName="@nameof(MenuGroupModel.GroupID)">
        <Columns>
            <DxDataGridColumn Field="@nameof(MenuGroupModel.ID)"
                              Visible="false" />
            <DxDataGridColumn Field="@nameof(MenuGroupModel.GroupName)"
                              Caption="Name"
                              Width="250px" />
            <DxDataGridSpinEditColumn Field="@nameof(MenuGroupModel.DisplayOrder)"
                                      Caption="Display order"
                                      Width="130px" />
            <DxDataGridColumn Field="@nameof(MenuGroupModel.IconUrl)"
                              Caption="Icon Url"
                              Width="300px" />
            <DxDataGridCheckBoxColumn Field="@nameof(MenuGroupModel.Enabled)"
                                      Caption="Enabled"
                                      Width="100px" />
            <DxDataGridCommandColumn Width="120px" />
        </Columns>
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Name: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.GroupName" />
                            <ValidationMessage For="@(() => EditContext.GroupName)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Display order: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxSpinEdit @bind-Value="@EditContext.DisplayOrder" />
                            <ValidationMessage For="@(() => EditContext.DisplayOrder)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Icon Url: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.IconUrl" />
                            <ValidationMessage For="@(() => EditContext.IconUrl)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Enabled: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxCheckBox @bind-Checked="@EditContext.Enabled" />
                            <ValidationMessage For="@(() => EditContext.Enabled)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <div class="text-right">
                                <DxButton RenderStyle="@ButtonRenderStyle.Success" style="width:55px" SubmitFormOnClick="true" Text="OK" />
                                <DxButton RenderStyle="@ButtonRenderStyle.Danger" style="width:55px" @onclick="@OnCancelButtonClick" Text="Cancel" />
                            </div>
                        </Template>
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
        <DetailRowTemplate>
            <DxTabs>
                <DxTabPage Text="Pape list">
                    <div class="p-3" style="width: 860px">
                        @if (ListMenuDetail != null)
                        {
                            var menuGroup = ListMenuGroup.Where(x => x.GroupID == context.GroupID).FirstOrDefault();
                            GetGroupID = menuGroup.GroupID;
                            <DxDataGrid @ref="@GridChild"
                                        ColumnResizeMode="DataGridColumnResizeMode.Component"
                                        Data="@ListMenuDetail.Where(x => x.GroupID == context.GroupID)"
                                        PageSize="10"
                                        ShowFilterRow="true"
                                        HtmlRowDecoration="@OnHtmlRowDecorationChild"
                                        RowInsertStart="@(() => OnRowEditStartingChild(null))"
                                        RowEditStart="@(dataRow => OnRowEditStartingChild(dataRow))"
                                        RowRemoving="@((dataRow) => OnRowRemovingChild(dataRow))">
                                <Columns>
                                    <DxDataGridColumn Field="@nameof(MenuDetailModel.PageName)"
                                                      Caption="Page"
                                                      Width="240px" />
                                    <DxDataGridColumn Field="@nameof(MenuDetailModel.IconUrl)"
                                                      Caption="Icon Url"
                                                      Width="290px" />
                                    <DxDataGridSpinEditColumn Field="@nameof(MenuDetailModel.DisplayOrder)"
                                                              Caption="Display order"
                                                              Width="120px" />
                                    <DxDataGridCheckBoxColumn Field="@nameof(MenuDetailModel.Enabled)"
                                                              Caption="Enabled"
                                                              Width="90px" />
                                    <DxDataGridCommandColumn Width="120px" />
                                </Columns>
                                <EditFormTemplate Context="EditFormTemplateChild">
                                    <EditForm Model="@EditContextChild" Context="EditFormContextChild" OnValidSubmit="@UpdateRowChild">
                                        <DataAnnotationsValidator />
                                        <DxFormLayout>
                                            <DxFormLayoutItem Caption="Page: " ColSpanMd="12" Context="FormLayoutContextChild">
                                                <Template>
                                                    <MyComboBox @bind-Value="@SelectedPage"
                                                                Data="@ListFunctionList"
                                                                TextFieldName="@nameof(FunctionListModel.PageName)"
                                                                SelectedItemChanged="@((FunctionListModel value) => FunctionList_ItemChanged(value))" />
                                                    <ValidationMessage For="@(() => EditContextChild.PageID)" />
                                                </Template>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Icon Url: " ColSpanMd="12" Context="FormLayoutContextChild">
                                                <Template>
                                                    <DxTextBox @bind-Text="@EditContextChild.IconUrl" />
                                                    <ValidationMessage For="@(() => EditContextChild.IconUrl)" />
                                                </Template>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Display order: " ColSpanMd="12" Context="FormLayoutContextChild">
                                                <Template>
                                                    <DxSpinEdit @bind-Value="@EditContextChild.DisplayOrder" />
                                                    <ValidationMessage For="@(() => EditContextChild.DisplayOrder)" />
                                                </Template>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Enabled: " ColSpanMd="12" Context="FormLayoutContextChild">
                                                <Template>
                                                    <DxCheckBox @bind-Checked="@EditContextChild.Enabled" />
                                                    <ValidationMessage For="@(() => EditContextChild.Enabled)" />
                                                </Template>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem ColSpanMd="12" Context="FormLayoutContextChild">
                                                <Template>
                                                    <div class="text-right">
                                                        <DxButton RenderStyle="@ButtonRenderStyle.Success" style="width:55px" SubmitFormOnClick="true" Text="OK" />
                                                        <DxButton RenderStyle="@ButtonRenderStyle.Danger" style="width:55px" @onclick="@OnCancelButtonClickChild" Text="Cancel" />
                                                    </div>
                                                </Template>
                                            </DxFormLayoutItem>
                                        </DxFormLayout>
                                    </EditForm>
                                </EditFormTemplate>
                            </DxDataGrid>
                            <br />
                            <div class="text-center">
                                <button class="btn btn-success" style="width:156px" @onclick="@ShowConfirm_SaveMainChild">
                                    <span class="fa fa-save" style="font-size:large; margin-right:10px" aria-hidden="true"></span> Save
                                </button>
                                <button class="btn btn-danger" style="width:156px" @onclick="@ShowConfirm_CancelSaveMainChild">
                                    <span class="fa fa-times" style="font-size:large; margin-right:10px" aria-hidden="true"></span> Cancel changed
                                </button>
                            </div>
                        }
                        else
                        {
                            <em>No data to display</em>
                        }
                    </div>
                </DxTabPage>
            </DxTabs>
        </DetailRowTemplate>
    </DxDataGrid>
    <br />
    <div class="text-center">
        <MyButtonSave OnClick="ShowConfirm_SaveMain" />
        <MyButtonCancel OnClick="ShowConfirm_CancelSaveMain" />
    </div>
</div>

<DxPopup @bind-Visible="@PopupVisible"
         ShowCloseButton="true"
         ShowFooter="true">
    <HeaderContentTemplate>
        <h3>Please confirm</h3>
    </HeaderContentTemplate>
    <BodyContentTemplate>
        <span>
            @ConfirmMessage
        </span>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <div class="text-right">
            <DxButton RenderStyle="@ButtonRenderStyle.Success" style="width:55px" @onclick="@ConfirmHandler" Text="OK" />
            <DxButton RenderStyle="@ButtonRenderStyle.Danger" style="width:55px" @onclick="@(() => PopupVisible = false)" Text="Cancel" />
        </div>
    </FooterContentTemplate>
</DxPopup>
<DxPopup @bind-Visible="@PopupVisibleChild"
         ShowCloseButton="true"
         ShowFooter="true">
    <HeaderContentTemplate>
        <h3>Please confirm</h3>
    </HeaderContentTemplate>
    <BodyContentTemplate>
        <span>
            @ConfirmMessageChild
        </span>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <div class="text-right">
            <DxButton RenderStyle="@ButtonRenderStyle.Success" style="width:55px" @onclick="@ConfirmHandlerChild" Text="OK" />
            <DxButton RenderStyle="@ButtonRenderStyle.Danger" style="width:55px" @onclick="@(() => PopupVisibleChild = false)" Text="Cancel" />
        </div>
    </FooterContentTemplate>
</DxPopup>

@code{
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    // Popup
    private string ConfirmMessage = "";
    private string ConfirmAction = "";
    private bool PopupVisible = false;
    // Popup Child
    private string ConfirmMessageChild = "";
    private string ConfirmActionChild = "";
    private bool PopupVisibleChild = false;
    // FunctionList
    private readonly List<FunctionListModel> ListFunctionList = new List<FunctionListModel>();
    private FunctionListModel SelectedPage;
    // MenuGroup
    private string GetGroupID = "";
    readonly ObservableCollection<MenuGroupModel> ListMenuGroup = new ObservableCollection<MenuGroupModel>();
    // MenuDetail
    readonly ObservableCollection<MenuDetailModel> ListMenuDetail = new ObservableCollection<MenuDetailModel>();
    // Init
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Task.FromResult(0);
    }

    #region Load data
    // Load FunctionList
    async Task Load_FunctionList()
    {
        var requestString = new Empty_Request()
        {
            Credential = new UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            }
        };
        //Get data from DB
        ListFunctionList.Clear();
        var response = await adminServiceClient.GetFunctionListAsync(requestString);
        if (response != null && response.ReturnCode == 200)
        {
            foreach (var item in response.FunctionList)
            {
                FunctionListModel dataRow = new FunctionListModel();
                ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                //Upd mode
                dataRow.UpdMode = 0;
                //
                ListFunctionList.Add(dataRow);
            }
        }
    }
    // Load MenuGroup/MenuDetail
    async void DisplayMain()
    {
        var request = new Empty_Request()
        {
            Credential = new UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            },
        };
        //Get data MenuGroup from DB
        ListMenuGroup.Clear();
        var response = await adminServiceClient.GetMenuGroupAsync(request);
        if (response != null && response.ReturnCode == 200)
        {
            foreach (var item in response.MenuGroups)
            {
                MenuGroupModel dataRow = new MenuGroupModel();
                ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                //Upd mode
                dataRow.UpdMode = 0;
                //
                ListMenuGroup.Add(dataRow);
            }
        }
        //Get data MenuDetail from DB
        ListMenuDetail.Clear();
        var responseChild = await adminServiceClient.GetMenuDetailAsync(request);
        if (responseChild != null && responseChild.ReturnCode == 200)
        {
            foreach (var item in responseChild.MenuDetails)
            {
                MenuDetailModel dataRow = new MenuDetailModel();
                ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                //Upd mode
                dataRow.UpdMode = 0;
                //
                ListMenuDetail.Add(dataRow);
            }
        }
    }
    #endregion

    #region DataGrid
    // Edit row model
    DxDataGrid<MenuGroupModel> Grid;
    FormEditContext EditContext = null;
    class FormEditContext : MenuGroupModel
    {
        public FormEditContext(MenuGroupModel menuGroupModel)
        {
            // Saved data
            EditingRow = menuGroupModel;
            // Editable data only
            SystemID = EditingRow.SystemID;
            GroupID = EditingRow.GroupID;
            GroupName = EditingRow.GroupName;
            DisplayOrder = EditingRow.DisplayOrder;
            IconUrl = EditingRow.IconUrl;
            Enabled = EditingRow.Enabled;
        }
        public MenuGroupModel EditingRow { get; set; }
        public Action StateHasChanged { get; set; }
    }
    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<MenuGroupModel> eventArgs)
    {
        
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += MyColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += MyColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += MyColor.DeleteRowColor;
    }
    #endregion

    #region DataGrid Child
    // Edit row model
    DxDataGrid<MenuDetailModel> GridChild;
    FormEditContextChild EditContextChild = null;
    class FormEditContextChild : MenuDetailModel
    {
        public FormEditContextChild(MenuDetailModel menuDetailModel)
        {
            // Saved data
            EditingRowChild = menuDetailModel;
            // Editable data only
            SystemID = EditingRowChild.SystemID;
            GroupID = EditingRowChild.GroupID;
            PageID = EditingRowChild.PageID;
            PageName = EditingRowChild.PageName;
            IconUrl = EditingRowChild.IconUrl;
            DisplayOrder = EditingRowChild.DisplayOrder;
            Enabled = EditingRowChild.Enabled;
        }
        public MenuDetailModel EditingRowChild { get; set; }
        public Action StateHasChanged { get; set; }
    }
    // Color of edit data
    void OnHtmlRowDecorationChild(DataGridHtmlRowDecorationEventArgs<MenuDetailModel> eventArgs)
    {
        
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += MyColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += MyColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += MyColor.DeleteRowColor;
    }
    #endregion

    #region CRUD
    // Check changed in ListMenuGroup
    bool Check_Changed()
    {
        foreach (MenuGroupModel row in ListMenuGroup)
        {
            if (row.UpdMode != 0)
            {
                return true;
            }
        }
        return false;
    }
    // Show confirm cancel SaveMain
    void ShowConfirm_CancelSaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        // Show popup confirm
        ConfirmMessage = "Cancel changed?";
        ConfirmAction = "CancelSaveMain";
        PopupVisible = true;
        StateHasChanged();
    }
    // Show confirm delete SaveMain
    MenuGroupModel DeletedRow = null;
    void OnRowRemoving(MenuGroupModel dataRow)
    {
        DeletedRow = dataRow;
        // Show popup confirm
        ConfirmMessage = "Xóa dòng dữ liệu?";
        ConfirmAction = "DeleteRow";
        PopupVisible = true;
        StateHasChanged();
    }
    // Show confirm save SaveMain
    void ShowConfirm_SaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        // Show popup confirm
        ConfirmMessage = "Save changed?";
        ConfirmAction = "SaveMain";
        PopupVisible = true;
        StateHasChanged();
    }
    // Confirm Cancel, Delete, Save
    async void ConfirmHandler()
    {
        // Cancel save main
        if (ConfirmAction == "CancelSaveMain")
        {
            CancelSaveMain();
        }
        // Delete row main
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        // Save all change main
        if (ConfirmAction == "SaveMain")
        {
            SaveMain();
        }
        // Close confirm delete popup
        PopupVisible = false;
        await Grid.Refresh();
        StateHasChanged();
    }
    // Cancel edit main
    void CancelSaveMain()
    {
        // Reload data
        DisplayMain();
    }
    // Delete edit main
    async void DeleteRow()
    {
        // Set to delete mode
        if (DeletedRow.UpdMode == 1)
        {
            // Remove new row from data source
            ListMenuGroup.Remove(DeletedRow);
        }
        else
        {
            // Mark to delete
            DeletedRow.UpdMode = 3;
        }
        // Refresh layout
        await Grid.Refresh();
    }
    // Get data for edit/insert
    void OnRowEditStarting(MenuGroupModel editingRow)
    {
        // Init new row
        if (editingRow == null)
        {
            editingRow = new MenuGroupModel();
            //
            editingRow.UpdMode = -1;
        }
        EditContext = new FormEditContext(editingRow);
    }
    // Update row
    async Task UpdateRow()
    {
        // Update for edit field
        var backupRow = new MenuGroupModel();
        ClassHelper.CopyPropertiesData(EditContext.EditingRow, backupRow);
        //
        EditContext.EditingRow.SystemID = "";
        EditContext.EditingRow.GroupID = EditContext.GroupID;
        EditContext.EditingRow.GroupName = EditContext.GroupName;
        EditContext.EditingRow.DisplayOrder = EditContext.DisplayOrder;
        EditContext.EditingRow.IconUrl = EditContext.IconUrl;
        EditContext.EditingRow.Enabled = EditContext.Enabled;
        // Update mode
        if (EditContext.EditingRow.UpdMode == 0 || EditContext.EditingRow.UpdMode == 3)
        {
            EditContext.EditingRow.UpdMode = 2;
        }
        // Insert to datasource
        if (EditContext.EditingRow.UpdMode == -1)
        {
            EditContext.EditingRow.UpdMode = 1;
            ListMenuGroup.Add(EditContext.EditingRow);
        }
        // Close popup & refresh data
        await Grid.CancelRowEdit();
        await Grid.Refresh();
    }
    // Save edit main
    async void SaveMain()
    {
        var hasChanged = false;
        // Request SaveMain
        SaveMenuGroup_Request request = new SaveMenuGroup_Request();
        var Credential = new UserCredential()
        {
            Username = WebUserCredential.Username,
            RoleID = WebUserCredential.RoleID,
            AccessToken = WebUserCredential.AccessToken,
            ApiKey = WebUserCredential.ApiKey
        };
        request.Credential = Credential;
        // Save SaveMain
        foreach (MenuGroupModel row in ListMenuGroup)
        {
            if (row.UpdMode != 0)
            {
                // Convert to DB row
                var dbRow = new grpcMenuGroup();
                ClassHelper.CopyPropertiesDataDateConverted(row, dbRow);
                request.MenuGroups.Add(dbRow);
                //
                hasChanged = true;
            }
        }
        // Check changed
        if (!hasChanged)
        {
            //Message no change
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        // Call api
        var response = await adminServiceClient.SaveMenuGroupAsync(request);
        // Success
        if (response.ReturnCode == 200)
        {
            //Show success
            toastService.ShowSuccess("", MyMessage.Info_SaveSucess);
        }
        // Error call
        if (response == null)
        {
            // Show error Call grpc
            toastService.ShowError("", "Error Call grpc");
            return;
        }
        if (response.ReturnCode != 200)
        {
            // 201: Data not found
            if (response.ReturnCode == 201)
            {
                // Show error 201
                toastService.ShowError("", "Error 201");
            }
            // 500: Data not found
            if (response.ReturnCode == 500)
            {
                //Show error 500
                toastService.ShowError("", "Error 500");
            }
            return;
        }
        // Reload data
        DisplayMain();
    }
    // Cancel edit
    async Task OnCancelButtonClick()
    {
        await Grid.CancelRowEdit();
        EditContext = null;
    }
    #endregion

    #region CRUD Child
    // Check changed in ListDiscountMasterChild
    bool Check_ChangedChild()
    {
        foreach (MenuDetailModel row in ListMenuDetail)
        {
            if (row.UpdMode != 0)
            {
                return true;
            }
        }
        return false;
    }
    // Show confirm cancel SaveMainChild
    void ShowConfirm_CancelSaveMainChild()
    {
        if (!Check_ChangedChild())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        // Show popup confirm
        ConfirmMessageChild = "Cancel changed?";
        ConfirmActionChild = "CancelSaveMain";
        PopupVisibleChild = true;
        StateHasChanged();
    }
    // Show confirm delete SaveMainChild
    MenuDetailModel DeletedRowChild = null;
    void OnRowRemovingChild(MenuDetailModel dataRow)
    {
        DeletedRowChild = dataRow;
        // Show popup confirm
        ConfirmMessageChild = "Xóa dòng dữ liệu?";
        ConfirmActionChild = "DeleteRow";
        PopupVisibleChild = true;
        StateHasChanged();
    }
    // Show confirm save SaveMainChild
    void ShowConfirm_SaveMainChild()
    {
        if (!Check_ChangedChild())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        // Show popup confirm
        ConfirmMessageChild = "Save changed?";
        ConfirmActionChild = "SaveMain";
        PopupVisibleChild = true;
        StateHasChanged();
    }
    // Confirm Cancel, Delete, Save
    async void ConfirmHandlerChild()
    {
        // Cancel save mainchild
        if (ConfirmActionChild == "CancelSaveMain")
        {
            CancelSaveMainChild();
        }
        // Delete row mainchild
        if (ConfirmActionChild == "DeleteRow")
        {
            DeleteRowChild();
        }
        // Save all change mainchild
        if (ConfirmActionChild == "SaveMain")
        {
            SaveMainChild();
        }
        // Close confirm delete popup
        PopupVisibleChild = false;
        await GridChild.Refresh();
        StateHasChanged();
    }
    // Cancel edit main
    void CancelSaveMainChild()
    {
        // Reload data
        DisplayMain();
    }
    // Delete edit main child
    async void DeleteRowChild()
    {
        // Set to delete mode
        if (DeletedRowChild.UpdMode == 1)
        {
            // Remove new row from data source
            ListMenuDetail.Remove(DeletedRowChild);
        }
        else
        {
            // Mark to delete
            DeletedRowChild.UpdMode = 3;
        }
        // Refresh layout
        await GridChild.Refresh();
    }
    // Get data child for edit/insert
    void OnRowEditStartingChild(MenuDetailModel editingRow)
    {
        // Init new row
        if (editingRow == null)
        {
            editingRow = new MenuDetailModel();
            //
            editingRow.UpdMode = -1;
        }
        EditContextChild = new FormEditContextChild(editingRow);
    }
    // Update row child
    async Task UpdateRowChild()
    {
        // Update for edit field
        var backupRow = new MenuDetailModel();
        ClassHelper.CopyPropertiesData(EditContextChild.EditingRowChild, backupRow);
        //
        EditContextChild.EditingRowChild.SystemID = "";
        EditContextChild.EditingRowChild.GroupID = GetGroupID;
        EditContextChild.EditingRowChild.PageID = GetPageID;
        EditContextChild.EditingRowChild.PageName = GetPageName;
        EditContextChild.EditingRowChild.IconUrl = EditContextChild.IconUrl;
        EditContextChild.EditingRowChild.DisplayOrder = EditContextChild.DisplayOrder;
        EditContextChild.EditingRowChild.Enabled = EditContextChild.Enabled;
        // Update mode
        if (EditContextChild.EditingRowChild.UpdMode == 0 || EditContextChild.EditingRowChild.UpdMode == 3)
        {
            EditContextChild.EditingRowChild.UpdMode = 2;
        }
        // Insert to datasource
        if (EditContextChild.EditingRowChild.UpdMode == -1)
        {
            EditContextChild.EditingRowChild.UpdMode = 1;
            ListMenuDetail.Add(EditContextChild.EditingRowChild);
        }
        // Close popup & refresh data
        await Grid.CancelRowEdit();
        await Grid.Refresh();
    }
    // Save edit main child
    async void SaveMainChild()
    {
        var hasChanged = false;
        // Request SaveMain
        SaveMenuDetail_Request request = new SaveMenuDetail_Request();
        var Credential = new UserCredential()
        {
            Username = WebUserCredential.Username,
            RoleID = WebUserCredential.RoleID,
            AccessToken = WebUserCredential.AccessToken,
            ApiKey = WebUserCredential.ApiKey
        };
        request.Credential = Credential;
        // Save SaveMain
        foreach (MenuDetailModel row in ListMenuDetail)
        {
            if (row.UpdMode != 0)
            {
                // Convert to DB row
                var dbRow = new grpcMenuDetail();
                ClassHelper.CopyPropertiesDataDateConverted(row, dbRow);
                request.MenuDetails.Add(dbRow);
                //
                hasChanged = true;
            }
        }
        // Check changed
        if (!hasChanged)
        {
            //Message no change
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        // Call api
        var response = await adminServiceClient.SaveMenuDetailAsync(request);
        // Success
        if (response.ReturnCode == 200)
        {
            //Show success
            toastService.ShowSuccess("", MyMessage.Info_SaveSucess);
        }
        // Error call
        if (response == null)
        {
            // Show error Call grpc

            return;
        }
        if (response.ReturnCode != 200)
        {
            // 201: Data not found
            if (response.ReturnCode == 201)
            {
                // Show error 201
                toastService.ShowError("", "Error 201");
            }
            // 500: Data not found
            if (response.ReturnCode == 500)
            {
                //Show error 500
                toastService.ShowError("", "Error 500");
            }
            return;
        }
        // Reload data
        DisplayMain();
    }
    // Cancel edit
    async Task OnCancelButtonClickChild()
    {
        await GridChild.CancelRowEdit();
        EditContextChild = null;
    }
    #endregion

    #region Screen items
    
    // Select FunctionList
    string GetPageID = "";
    string GetPageName = "";
    void FunctionList_ItemChanged(FunctionListModel item)
    {
        GetPageID = "";
        GetPageName = "";
        if (item != null)
        {
            GetPageID = item.PageID ?? "";
            GetPageName = item.PageName ?? "";
        }
    }
    #endregion
}