@using System.ComponentModel.DataAnnotations;
@using Admin.Services
@using Claim.Services
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject VoucherService voucherService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<!--Thông tin chung-->
<MyCard Title="Thông tin chung">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Số tiếp nhận-->
                <div class="col-12 col-lg-2">
                    <MyTextEdit @bind-Text="Model.ClaimNo"
                                ReadOnly="true"
                                Literal="Số tiếp nhận"
                                Width="8rem"
                                Class="text-blue font-weight-bold" />
                </div>
                <!--Ngày tiếp nhận-->
                <div class="col-12 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.ClaimDate"
                                    Literal="Ngày tiếp nhận"
                                    ReadOnly="true"
                                    Class="text-blue" />
                </div>
                <!--Phụ trách bồi thường-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.PicAccountName"
                                ReadOnly="true"
                                Literal="Phụ trách bồi thường" />
                </div>
                <!--Phone phụ trách bồi thường-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.PicPhone"
                                ReadOnly="true"
                                Literal="Phone" />
                </div>
                <!--Mức độ ưu tiên-->
                <div class="col-12 col-lg-2">
                    <MyComboBox @ref="RefPriority"
                                @bind-Value="SelectedPriority"
                                Data="PriorityList"
                                ReadOnly="true"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.Priority = selectedRow.IntCode;
                                                   PriorityCss = "";
                                                   if (Model.Priority == 2) PriorityCss = "bg-warning";
                                                   if (Model.Priority == 3) PriorityCss = "bg-danger";
                                                   this.StateHasChanged();
                                             })"
                                Class="@PriorityCss"
                                Literal="Mức độ ưu tiên" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Tên khách hàng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusFullname"
                                Literal="Tên khách hàng"
                                ReadOnly="true"
                                Class="cusfullname-focus" />
                </div>
                <!--Phone-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit Text="@Model.CusPhone"
                                Literal="Điện thoại liên hệ"
                                Class="text-blue font-weight-bold"
                                ReadOnly="true"/>
                </div>
                <!--Email-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusEmail"
                                ReadOnly="true"
                                Literal="Email" />
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row">
                <!--Loại sản phẩm-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.TPAProductName"
                                Literal="Loại sản phẩm"
                                ReadOnly="true" />
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceIMEI"
                                Literal="Số IMEI thiết bị"
                                ReadOnly="true"
                                Class="text-purple font-weight-bold" />
                </div>
                <!--Model-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceModel"
                                ReadOnly="true"
                                Literal="Model" />
                </div>

            </div>

            <!--Row 4-------------------------------------------------->
            <div class="row">
                <!--Địa chỉ trả thiết bị-->
                <div class="col-12 col-lg-6">
                    <MyTextEdit @bind-Text="Model.PickupAddress"
                                Literal="Địa chỉ trả thiết bị"
                                ReadOnly="true"
                                Class="pickupaddress-focus" />
                </div>
                <!--Địa chỉ xuất thiết bị-->
                <div class="col-12 col-lg-6">
                    <MyTextEdit @bind-Text="TakeAddress"
                                ReadOnly="true"
                                Literal="Địa chỉ xuất thiết bị" />
                </div>
            </div>
        </div>
    </CardBody>
</MyCard>

<!--Thông tin hư hỏng-->
<MyCard @bind-IsCollapse="@DamageInfoCollapse" Title="Thông tin hư hỏng">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Ngày KH thông báo-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.NotificationDate"
                                    Literal="Ngày KH thông báo"
                                    ReadOnly="true"
                                    Class="text-green" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Nguyên nhân hư hỏng-->
                <div class="col-12 col-lg-7">
                    <MyMemoEdit @ref="RefDamageCause"
                                @bind-Text="Model.DamageCause"
                                Rows="5"
                                ReadOnly="true"
                                Literal="Nguyên nhân hư hỏng" />
                </div>
                <!--Ghi chú-->
                <div class="col-12 col-lg-5">
                    <MyMemoEdit @bind-Text="Model.AcceptNotes"
                                Rows="5"
                                ReadOnly="true"
                                Literal="Ghi chú" />
                </div>
            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông báo giá & sửa chữa-->
<MyCard @bind-IsCollapse="@RepairInfoCollapse" Title="Thông báo giá & sửa chữa">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Nơi sửa chữa-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.RepairCompanyName"
                                ReadOnly="true"
                                Literal="Nơi sửa chữa" />
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.NewDeviceIMEI"
                                Literal="Số IMEI thiết bị mới"
                                ReadOnly="true"
                                Class="text-purple font-weight-bold" />
                </div>
                <!--Model-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.NewDeviceModel"
                                ReadOnly="true"
                                Literal="Model thiết bị mới" />
                </div>

            </div>

            <!--Row 6-------------------------------------------------->
            <div class="row">
                <!--Nội dung sửa chữa-->
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.RepairNotes"
                                Rows="3"
                                ReadOnly="true"
                                Literal="Nội dung sửa chữa" />
                </div>
            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông tin trả thiết bị-->
<MyCard Title="Thông tin trả thiết bị">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Ngày yêu cầu trả-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.ReturnReqDate"
                                    Literal="Ngày yêu cầu trả"
                                    ReadOnly="true"
                                    Class="text-green" />
                </div>
                <!--Ngày xuất thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.ReturnDoneDate1"
                                    Literal="Ngày xuất thiết bị"
                                    ReadOnly="true"
                                    Class="text-blue" />
                </div>
                <!--Ngày trả thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.ReturnDoneDate1"
                                    Literal="Ngày trả thiết bị"
                                    ReadOnly="true"
                                    Class="text-maroon" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row mt-2">
                <!--Check: đã trả thiết bị-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.ReturnStatus1"
                                Class="text-blue">
                        Đã lấy thiết bị
                    </DxCheckBox>
                </div>

                <!--Check: đã trả thiết bị-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.ReturnStatus2"
                                Class="text-maroon"
                                Enabled="@Model.ReturnStatus1">
                        Đã nhập thiết bị
                    </DxCheckBox>
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row mt-1">
                <!--Ghi chú nhận thiết bị-->
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.ReturnNotes"
                                Rows="3"
                                Literal="Ghi chú trả thiết bị" />
                </div>
            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--OK, Cancel-->
<div class="container-fluid">
    <div class="row justify-content-center mt-2">
        <MyButtonSave OnClick="SaveMain" />
        <MyButtonCancel OnClick="CloseMain" />
    </div>
</div>

@code {
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    [Parameter]
    public MyPopup MyForm { get; set; }
    //Parameters and events
    [Parameter]
    public string ClaimNo { get; set; } = "";
    [Parameter]
    public EventCallback OnValidSumit { get; set; }
    //
    private ClaimRequestModel Model = new ClaimRequestModel();
    //Master
    private List<OptionListModel> PriorityList = new List<OptionListModel>();
    //Selected combo value
    private OptionListModel SelectedPriority = null;
    //Ref
    private MyComboBox<OptionListModel> RefPriority;
    MyMemoEdit RefDamageCause;
    //Css
    private string PriorityCss = "";
    private bool DamageInfoCollapse = true;
    private bool RepairInfoCollapse = true;
    //
    private string TakeAddress = "";

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        if (!string.IsNullOrWhiteSpace(ClaimNo))
        {
            await DisplayMain();
        }
    }
    //
    async Task LoadMaster()
    {
        PriorityList = await masterService.Load_OptionList("007");
    }
    //
    #endregion

    #region MainForm
    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Claim.Services.String_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.StringValue = ClaimNo;
            //Call api
            var response = await ClaimServiceClient.GetClaimRequestAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Show success
                ClassHelper.CopyPropertiesDataDateConverted(response.ClaimRequest, Model);
                //Priority
                SelectedPriority = PriorityList.Find(x => x.IntCode == Model.Priority);

                //DeliveryAddress
                TakeAddress = await masterService.Get_RepairAddress(Model.RepairCompanyID);

                //CSS
                PriorityCss = "";
                if (Model.Priority == 2) PriorityCss = "bg-warning";
                if (Model.Priority == 3) PriorityCss = "bg-danger";
                //
                Model.UpdMode = 2;
            }
            //Refresh layout
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
        }
    }

    bool ValidateForm()
    {
        //Skip
        if (Model.CloseStatus)
        {
            toastService.ShowWarning("", MyMessage.Error_DataReadOnly);
            return false;
        }
        //
        return true;
    }

    async void SaveMain()
    {
        try
        {
            //Validate input data
            var validateRes = ValidateForm();
            if (!validateRes) return;

            //Request
            var request = new SaveClaim_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.ClaimRequest = new grpcClaimRequestModel();

            //Clear ReturnStatus2
            if (!Model.ReturnStatus1)
            {
                Model.ReturnStatus2 = false;
            }
            //ReturnDoneDate1
            if (Model.ReturnStatus1 && Model.ReturnDoneDate1 == DateTime.Today.MinDate()) Model.ReturnDoneDate1 = DateTime.Now;
            if (!Model.ReturnStatus1) Model.ReturnDoneDate1 = DateTime.Today.MinDate();

            //ReturnDoneDate2
            if (Model.ReturnStatus2 && Model.ReturnDoneDate2 == DateTime.Today.MinDate()) Model.ReturnDoneDate2 = DateTime.Now;
            if (!Model.ReturnStatus2) Model.ReturnDoneDate2 = DateTime.Today.MinDate();

            //ReturnAccountID
            if (string.IsNullOrWhiteSpace(Model.ReturnAccountID))
            {
                Model.ReturnAccountID = WebUserCredential.Username;
                Model.ReturnAccountName = WebUserCredential.Fullname;
            }
            //
            ClassHelper.CopyPropertiesDataDateConverted(Model, request.ClaimRequest);
            //Call api
            var response = await ClaimServiceClient.SaveClaimLogisticAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", MyMessage.Error_SaveFailed);
            }

            //Reload data
            await OnValidSumit.InvokeAsync();
            CloseMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_SaveFailed);
        }
    }
    void CloseMain()
    {
        MyForm.Close();
    }
    #endregion

    #region Items


    #endregion


}
