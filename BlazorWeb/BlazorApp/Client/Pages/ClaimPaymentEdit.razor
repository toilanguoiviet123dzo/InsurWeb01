@using System.ComponentModel.DataAnnotations;
@using Admin.Services
@using Claim.Services
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject VoucherService voucherService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<!--Thông tin chung-->
<MyCard Title="Thông tin chung">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Số tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ClaimNo"
                                ReadOnly="true"
                                Literal="Số tiếp nhận"
                                Width="8rem"
                                InputCssClass="text-blue font-weight-bold" />
                </div>

                <!--Ngày tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.ClaimDate"
                                    Literal="Ngày tiếp nhận"
                                    ReadOnly="true"
                                    InputCssClass="text-blue" />
                </div>
                <!--Người tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ClaimAccountName"
                                ReadOnly="true"
                                Literal="Người tiếp nhận" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Phone-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit Text="@Model.CusPhone"
                                Literal="Điện thoại liên hệ"
                                InputCssClass="text-blue font-weight-bold"
                                ReadOnly="true"
                                CssClass="cusphone-focus" />
                </div>
                <!--Tên khách hàng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusFullname"
                                Literal="Tên khách hàng"
                                ReadOnly="true"
                                CssClass="cusfullname-focus" />
                </div>
                <!--Email-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusEmail"
                                ReadOnly="true"
                                Literal="Email" />
                </div>
                <!--Số CMND/CCCD-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusCardID"
                                ReadOnly="true"
                                Literal="Số CMND/CCCD" />
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row">
                <!--Loại sản phẩm-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.TPAProductName"
                                Literal="Loại sản phẩm"
                                ReadOnly="true" />
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceIMEI"
                                Literal="Số IMEI thiết bị"
                                ReadOnly="true"
                                InputCssClass="text-purple font-weight-bold" />
                </div>
                <!--Model-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceModel"
                                ReadOnly="true"
                                Literal="Model" />
                </div>
                <!--Mức độ ưu tiên-->
                <div class="col-12 col-lg-3">
                    <MyComboBox @ref="RefPriority"
                                @bind-Value="SelectedPriority"
                                Data="PriorityList"
                                AllowUserInput="true"
                                ReadOnly="true"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.Priority = selectedRow.IntCode;
                                                   PriorityCss = "";
                                                   if (Model.Priority == 2) PriorityCss = "bg-warning";
                                                   if (Model.Priority == 3) PriorityCss = "bg-danger";
                                                   this.StateHasChanged();
                                             })"
                                InputCssClass="@PriorityCss"
                                Literal="Mức độ ưu tiên" />
                </div>
            </div>

            <!--Row 4-------------------------------------------------->
            <div class="row">
                <!--Địa chỉ nhận thiết bị-->
                <div class="col-12 col-lg-6">
                    <MyTextEdit @bind-Text="Model.PickupAddress"
                                Literal="Địa chỉ nhận thiết bị"
                                ReadOnly="true"
                                CssClass="pickupaddress-focus" />
                </div>
                <!--Địa chỉ trả thiết bị-->
                <div class="col-12 col-lg-6">
                    <MyTextEdit @bind-Text="Model.ReturnAddress"
                                ReadOnly="true"
                                Literal="Địa chỉ trả thiết bị" />
                </div>
            </div>
        </div>
    </CardBody>
</MyCard>

<!--Thông tin hư hỏng-->
<MyCard @bind-IsCollapse="@DamageInfoCollapse" Title="Thông tin hư hỏng">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Ngày KH thông báo-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.NotificationDate"
                                    Literal="Ngày KH thông báo"
                                    ReadOnly="true"
                                    InputCssClass="text-green" />
                </div>
                <!--Ngày sự cố-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.IncidentDate"
                                    Literal="Ngày sự cố"
                                    ReadOnly="true"
                                    InputCssClass="text-maroon" />
                </div>
                <!--Kênh thông báo-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.NotificationChannelName"
                                ReadOnly="true"
                                Literal="Kênh thông báo" />
                </div>
                <!--Loại hư hỏng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DamageTypeName"
                                ReadOnly="true"
                                Literal="Loại hư hỏng" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Nguyên nhân hư hỏng-->
                <div class="col-12 col-lg-7">
                    <MyMemoEdit @ref="RefDamageCause"
                                @bind-Text="Model.DamageCause"
                                Rows="5"
                                ReadOnly="true"
                                Literal="Nguyên nhân hư hỏng" />
                </div>
                <!--Ghi chú-->
                <div class="col-12 col-lg-5">
                    <MyMemoEdit @bind-Text="Model.AcceptNotes"
                                Rows="5"
                                ReadOnly="true"
                                Literal="Ghi chú" />
                </div>
            </div>
        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông tin hợp đồng-->
<MyCard @bind-IsCollapse="@InsureInfoCollapse" Title="Thông tin hợp đồng">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Công ty bảo hiểm-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.InsurCompanyName"
                                ReadOnly="true"
                                Literal="Công ty bảo hiểm" />
                </div>
                <!--Số hợp đồng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit Text="@Model.InsurContractNo"
                                Literal="Số hợp đồng"
                                ReadOnly="true"
                                InputCssClass="text-blue font-weight-bold" />
                </div>
                <!--Từ ngày-->
                <div class="col-6 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.InsurStartDate"
                                    Literal="Từ ngày"
                                    ReadOnly="true"
                                    InputCssClass="text-green" />
                </div>
                <!--Đến ngày-->
                <div class="col-6 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.InsurEndDate"
                                    Literal="Đến ngày"
                                    ReadOnly="true"
                                    InputCssClass="text-maroon" />
                </div>
            </div>
            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Chi nhánh bồi thường-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.BrancheName"
                                ReadOnly="true"
                                Literal="Chi nhánh bồi thường" />
                </div>
                <!--Giá trị hợp đồng-->
                <div class="col-12 col-lg-3">
                    <MyNumEdit @bind-Value="Model.ContractAmount"
                               Mask="N0"
                               ReadOnly="true"
                               InputCssClass="text-blue font-weight-bold"
                               Literal="Giá trị hợp đồng" />
                </div>
                <!--Số tiền bảo hiểm còn lại-->
                <div class="col-12 col-lg-2">
                    <MyNumEdit @bind-Value="Model.InsurAmount"
                               Mask="N0"
                               ReadOnly="true"
                               InputCssClass="text-maroon font-weight-bold"
                               Literal="Tiền bảo hiểm còn lại" />
                </div>
            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông tin kiểm tra-->
<MyCard @bind-IsCollapse="@CheckInfoCollapse" Title="Thông tin kiểm tra">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Ngày yêu cầu lấy-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.PickupReqDate"
                                    Literal="Ngày yêu cầu lấy"
                                    ReadOnly="true"
                                    InputCssClass="text-green" />
                </div>
                <!--Ngày lấy thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.PickupDoneDate1"
                                    Literal="Ngày lấy thiết bị"
                                    ReadOnly="true"
                                    InputCssClass="text-blue" />
                </div>
                <!--Người kiểm tra-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.PicAccountName"
                                ReadOnly="true"
                                Literal="Người phụ trách" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Ghi chú kiểm tra-->
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.CheckNotes"
                                Rows="5"
                                ReadOnly="true"
                                Literal="Ghi chú kiểm tra" />
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row mt-2">
                <!--Check: kiểm tra-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.CheckStatus" CssClass="text-green" Enabled="false">Đã kiểm tra</DxCheckBox>
                </div>
                <!--Check: chấp nhận bồi thường-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox Checked="@Model.AcceptStatus"
                                CssClass="text-blue"
                                Enabled="false">Chấp nhận bồi thường</DxCheckBox>
                </div>
                <!--Check: Từ chối yêu cầu-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox Checked="@Model.CancelStatus"
                                Enabled="false"
                                CssClass="text-red">Từ chối yêu cầu</DxCheckBox>
                </div>

            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông báo giá & sửa chữa-->
<MyCard @bind-IsCollapse="@RepairInfoCollapse" Title="Thông báo giá & sửa chữa">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Nơi sửa chữa-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.RepairCompanyName"
                                ReadOnly="true"
                                Literal="Nơi sửa chữa" />
                </div>
                <!--Ngày yêu cầu báo giá-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.EstReqDate"
                                    Literal="Ngày yêu cầu báo giá"
                                    ReadOnly="true"
                                    InputCssClass="text-green" />
                </div>
                <!--Ngày báo giá xong-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.EstDoneDate"
                                    Literal="Ngày báo giá xong"
                                    ReadOnly="true"
                                    InputCssClass="text-blue" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row mt-2">
                <!--Check: yêu cầu báo giá-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.EstimationReqStatus" CssClass="text-green" Enabled="false">Yêu cầu báo giá</DxCheckBox>
                </div>
                <!--Check: Đã báo giá-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.EstimationStatus" Enabled="false" CssClass="text-green">Đã báo giá</DxCheckBox>
                </div>
                
            </div>

            <!--Row 3-------------noi dung bao gia------------------------------------->
            <div class="row mt-1">
                <DxDataGrid @ref="@gridEst"
                            Data="@Model.Estimations"
                            ColumnResizeMode="DataGridColumnResizeMode.Component"
                            EditMode="DataGridEditMode.PopupEditForm"
                            PageSize="@PageRowCount"
                            HtmlRowDecoration="@OnHtmlRowDecoration"
                            HtmlDataCellDecoration="@OnHtmlDataCellDecoration"
                            HorizontalScrollBarMode="ScrollBarMode.Auto"
                            RowRemoving="@((dataRow) => OnRowRemoving(dataRow))"
                            RowEditStart="@(dataRow => OnRowEditStarting(dataRow))"
                            RowInsertStart="@(() => OnRowEditStarting(null))">
                    <Columns>
                        <DxDataGridCommandColumn Width="3rem" VisibleIndex="0">
                            <HeaderCellTemplate>
                            </HeaderCellTemplate>
                            <CellTemplate>
                                @if (!@Model.RepairStatus)
                                {
                                    <div style="display:flex">
                                        <div class="text-center" style="width:2rem">
                                            <a class="fa fa-pencil fa-2x" @onclick="@(() => gridEst.StartRowEdit(context))" href="javascript:void(0);"></a>
                                        </div>
                                    </div>
                                }
                            </CellTemplate>
                        </DxDataGridCommandColumn>
                        <DxDataGridSpinEditColumn Field="@nameof(EstimationModel.LineNo)"
                                                  Caption="No."
                                                  DisplayFormat="N0"
                                                  Width="2rem" />
                        <DxDataGridDateEditColumn Field="@nameof(EstimationModel.IssueDate)"
                                                  Caption="Ngày giờ"
                                                  DisplayFormat="dd/MM/yyyy HH:mm"
                                                  Width="8rem" />
                        <DxDataGridColumn Field="@nameof(EstimationModel.ItemCode)"
                                          Caption="Mã hạng mục"
                                          Width="7rem" />
                        <DxDataGridColumn Field="@nameof(EstimationModel.ItemName)"
                                          Caption="Tên hạng mục"
                                          Width="15rem" />
                        <DxDataGridCheckBoxColumn Field="@nameof(EstimationModel.IsReplace)"
                                                  Caption="Thay thế"
                                                  Width="3rem" />
                        <DxDataGridSpinEditColumn Field="@nameof(EstimationModel.Quantity)"
                                                  Caption="Số lượng"
                                                  DisplayFormat="N0"
                                                  Width="5rem" />
                        <DxDataGridSpinEditColumn Field="@nameof(EstimationModel.UnitPrice)"
                                                  Caption="Đơn giá"
                                                  DisplayFormat="N0"
                                                  Width="6rem" />
                        <DxDataGridSpinEditColumn Field="@nameof(EstimationModel.Amount)"
                                                  Caption="Thành tiền"
                                                  DisplayFormat="N0"
                                                  Width="8rem" />
                        <DxDataGridSpinEditColumn Field="@nameof(EstimationModel.ApproveAmount)"
                                                  Caption="Duyệt"
                                                  DisplayFormat="N0"
                                                  Width="8rem" />
                        <DxDataGridColumn Field="@nameof(EstimationModel.Notes)"
                                          Caption="Ghi chú"
                                          Width="5rem" />
                    </Columns>
                    <!--Total summary-->
                    <TotalSummary>
                        <DxDataGridSummaryItem Field=@nameof(EstimationModel.Quantity)
                                               SummaryType=SummaryItemType.Sum
                                               DisplayFormat="{0:N0}" />
                        <DxDataGridSummaryItem Field=@nameof(EstimationModel.Amount)
                                               SummaryType=SummaryItemType.Sum
                                               DisplayFormat="{0:N0}" />
                        <DxDataGridSummaryItem Field=@nameof(EstimationModel.ApproveAmount)
                                               SummaryType=SummaryItemType.Sum
                                               DisplayFormat="{0:N0}" />
                    </TotalSummary>
                    <EditFormTemplate>
                        <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                            <DataAnnotationsValidator />
                            <DxFormLayout>
                                <!--Item code-->
                                <DxFormLayoutItem Caption="Mã hạng mục" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.ItemCode" ReadOnly="true" />
                                    </Template>
                                </DxFormLayoutItem>
                                <!--Item name-->
                                <DxFormLayoutItem Caption="Tên hạng mục" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.ItemName" ReadOnly="true" />
                                    </Template>
                                </DxFormLayoutItem>
                                <!--IsReplace-->
                                <DxFormLayoutItem Caption="Thay thế" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <DxCheckBox @bind-Checked="@EditContext.IsReplace" Enabled="false" />
                                    </Template>
                                </DxFormLayoutItem>
                                <!--Quantity-->
                                <DxFormLayoutItem Caption="Số lượng" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <MyNumEdit Value="@EditContext.Quantity"
                                                   ValueChanged="@((double newValue) => Quantity_Changed(newValue))"
                                                   ReadOnly="true"
                                                   Mask="N0" />
                                        <ValidationMessage For="@(() => EditContext.Quantity)" />
                                    </Template>
                                </DxFormLayoutItem>
                                <!--UnitPrice-->
                                <DxFormLayoutItem Caption="Đơn giá" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <MyNumEdit Value="@EditContext.UnitPrice"
                                                   ValueChanged="@((double newValue) => UnitPrice_Changed(newValue))"
                                                   ReadOnly="true"
                                                   Mask="N0" />
                                        <ValidationMessage For="@(() => EditContext.UnitPrice)" />
                                    </Template>
                                </DxFormLayoutItem>
                                <!--Amount-->
                                <DxFormLayoutItem Caption="Thành tiền" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <MyNumEdit @bind-Value="@EditContext.Amount"
                                                   ReadOnly="true"
                                                   Mask="N0" />
                                    </Template>
                                </DxFormLayoutItem>
                                <!--ApproveAmount-->
                                <DxFormLayoutItem Caption="Duyệt" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <MyNumEdit @bind-Value="@EditContext.ApproveAmount"
                                                   ReadOnly="@Model.RepairStatus"
                                                   Mask="N0" />
                                    </Template>
                                </DxFormLayoutItem>
                                <!--Notes-->
                                <DxFormLayoutItem Caption="Ghi chú" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.Notes" />
                                    </Template>
                                </DxFormLayoutItem>
                                <!--OK Cancel-->
                                <DxFormLayoutItem ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <div class="text-center">
                                            <DxButton RenderStyle="@ButtonRenderStyle.Success" style="width:100px; font-size:15px" SubmitFormOnClick="true" Text="OK" />
                                            <DxButton RenderStyle="@ButtonRenderStyle.Danger" style="width:100px; font-size:15px" @onclick="@OnCancelEditRow" Text="Cancel" />
                                        </div>
                                    </Template>
                                </DxFormLayoutItem>
                            </DxFormLayout>
                        </EditForm>
                    </EditFormTemplate>
                </DxDataGrid>
            </div>

            <!--Row 4-------------------------------------------------->
            <div class="row">
                <!--Tiền bồi thường-->
                <div class="col-12 col-lg-2">
                    <MyNumEdit @bind-Value="Model.ClaimAmount"
                               ReadOnly="true"
                               InputCssClass="text-blue font-weight-bold"
                               Literal="Tiền bồi thường" />
                </div>
                <!--Tiền duyệt-->
                <div class="col-12 col-lg-2">
                    <MyNumEdit @bind-Value="Model.ApproveAmount"
                               ReadOnly="true"
                               InputCssClass="text-maroon font-weight-bold"
                               Literal="Tiền duyệt" />
                </div>
                <!--Tiền chiết khấu-->
                <div class="col-12 col-lg-2">
                    <MyNumEdit Value="Model.DeductibleAmount"
                               ValueChanged="@((double newValue) => DeductibleAmount_Changed(newValue))"
                               ReadOnly="@Model.PayStatus"
                               InputCssClass="text-red font-weight-bold"
                               Literal="Tiền chiết khấu" />
                </div>
                <!--Tiền đền bù-->
                <div class="col-12 col-lg-2">
                    <MyNumEdit @bind-Value="Model.IndemnityAmount"
                               ReadOnly="true"
                               InputCssClass="text-green font-weight-bold"
                               Literal="Tiền đền bù" />
                </div>
                <!--Tiền còn lại-->
                <div class="col-12 col-lg-2">
                    <MyNumEdit @bind-Value="Model.RemainingAmount"
                               ReadOnly="true"
                               InputCssClass="text-purple font-weight-bold"
                               Literal="Tiền còn lại" />
                </div>
            </div>

            <!--Row 5------------------Thong tin sưa chữa-------------------------------->
            <div class="row mt-2 align-items-end">
                <!--Ngày sửa chữa xong-->
                <div class="col-12 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.RepairDoneDate"
                                    Literal="Ngày sửa chữa xong"
                                    Width="100%"
                                    ReadOnly="true"
                                    InputCssClass="text-maroon" />
                </div>
                <!--Check: Đã sửa xong-->
                <div class="col-12 col-lg-2">
                    <DxCheckBox @bind-Checked="@Model.RepairStatus" Enabled="false" CssClass="text-green">Đã sửa xong</DxCheckBox>
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.NewDeviceIMEI"
                                Literal="Số IMEI thiết bị mới"
                                ReadOnly="true"
                                InputCssClass="text-purple font-weight-bold" />
                </div>
                <!--Model-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.NewDeviceModel"
                                ReadOnly="true"
                                Literal="Model thiết bị mới" />
                </div>
            </div>
            <!--Row 6-------------------------------------------------->
            <div class="row">
                <!--Nội dung yêu cầu sửa chữa-->
                <div class="col-12 col-lg-6">
                    <MyMemoEdit @bind-Text="Model.RepairReqNotes"
                                Rows="3"
                                ReadOnly="true"
                                Literal="Nội dung yêu cầu sửa chữa" />
                </div>
                <!--Nội dung sửa chữa-->
                <div class="col-12 col-lg-6">
                    <MyMemoEdit @bind-Text="Model.RepairNotes"
                                Rows="3"
                                ReadOnly="true"
                                Literal="Nội dung sửa chữa" />
                </div>
            </div>



        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông tin duyệt-->
<MyCard @bind-IsCollapse="@ApproveInfoCollapse" Title="Thông tin duyệt">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row align-items-end mt-1">
                <!--Ngày yêu cầu duyệt-->
                <div class="col-12 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.ApproveReqDate"
                                    Literal="Ngày yêu cầu duyệt"
                                    ReadOnly="true"
                                    Width="100%"
                                    InputCssClass="text-green" />
                </div>
                <!--Check: yêu cầu duyệt-->
                <div class="col-12 col-lg-2">
                    <DxCheckBox @bind-Checked="@Model.ApproveReqStatus" CssClass="text-green" Enabled="false">Yêu cầu duyệt</DxCheckBox>
                </div>
                <!--Ngày duyệt-->
                <div class="col-12 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.ApproveReqDate"
                                    Literal="Ngày duyệt"
                                    Width="100%"
                                    ReadOnly="true"
                                    InputCssClass="text-blue" />
                </div>
                <!--Check: đã duyệt-->
                <div class="col-12 col-lg-2">
                    <DxCheckBox @bind-Checked="@Model.ApproveStatus" CssClass="text-green" Enabled="@(!Model.RepairStatus)">Đã duyệt</DxCheckBox>
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Người duyệt-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ApproveAccountName"
                                ReadOnly="true"
                                Literal="Người duyệt" />
                </div>
            </div>
            <!--Row 3-------------------------------------------------->
            <div class="row">
                <!--Ghi chú duyệt-->
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.ApproveNotes"
                                Rows="3"
                                ReadOnly="true"
                                Literal="Ghi chú duyệt" />
                </div>
            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông tin chi trả-->
<MyCard @bind-IsCollapse="@PayInfoCollapse" Title="Thông tin chi trả">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row align-items-end mt-1">
                <!--Ngày yêu cầu chi trả-->
                <div class="col-12 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.PayReqDate"
                                    Literal="Ngày yêu cầu chi trả"
                                    ReadOnly="true"
                                    Width="100%"
                                    InputCssClass="text-green" />
                </div>
                <!--Check: yêu cầu chi trả-->
                <div class="col-12 col-lg-2">
                    <DxCheckBox @bind-Checked="@Model.PayReqStatus" CssClass="text-green" Enabled="false">YC chi trả</DxCheckBox>
                </div>
                <!--Ngày chi trả-->
                <div class="col-12 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.PayDoneDate"
                                    Literal="Ngày chi trả"
                                    Width="100%"
                                    ReadOnly="true"
                                    InputCssClass="text-maroon" />
                </div>
                <!--Check: Đã chi trả-->
                <div class="col-12 col-lg-2">
                    <DxCheckBox @bind-Checked="@Model.PayStatus" CssClass="text-maroon" Enabled="@Model.CloseStatus">Đã chi trả</DxCheckBox>
                </div>
                <!--Người chi trả-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.PayAccountName"
                                ReadOnly="true"
                                Literal="Người chi trả" />
                </div>
            </div>
            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Ghi chú yêu cầu chi trả-->
                <div class="col-12 col-lg-6">
                    <MyMemoEdit @bind-Text="Model.PayReqNotes"
                                Rows="3"
                                ReadOnly="true"
                                Literal="Ghi chú yêu cầu chi trả" />
                </div>
                <!--Ghi chú chi trả-->
                <div class="col-12 col-lg-6">
                    <MyMemoEdit @bind-Text="Model.PayNotes"
                                Rows="3"
                                ReadOnly="@Model.CloseStatus"
                                Literal="Ghi chú chi trả" />
                </div>
            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--OK, Cancel-->
<div class="container-fluid">
    <div class="row justify-content-center mt-2">
        <MyButtonSave OnClick="SaveMain" />
        <MyButtonCancel OnClick="CloseMain" />
    </div>
</div>

@code {
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    [Parameter]
    public MyPopup MyForm { get; set; }
    private const int PageRowCount = MyConstant.Grid_PageRowCount;
    //Parameters and events
    [Parameter]
    public string ClaimNo { get; set; } = "";
    [Parameter]
    public EventCallback OnValidSumit { get; set; }
    //
    private ClaimRequestModel Model = new ClaimRequestModel();

    //Master
    private List<OptionListModel> PriorityList = new List<OptionListModel>();
    //Selected combo value
    private OptionListModel SelectedPriority = null;
    //Ref
    private MyComboBox<OptionListModel> RefPriority;
    MyMemoEdit RefDamageCause;
    //Css
    private string PriorityCss = "";
    private bool DamageInfoCollapse = true;
    private bool InsureInfoCollapse = true;
    private bool CheckInfoCollapse = true;
    private bool RepairInfoCollapse = true;
    private bool ApproveInfoCollapse = true;
    private bool PayInfoCollapse = false;
    //Readonly
    private bool ApproveAmount_ReadOnly = true;
    //Confirm
    private string ConfirmMessage = "";
    private string ConfirmAction = "";
    private bool ConfirmVisible = false;

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        if (!string.IsNullOrWhiteSpace(ClaimNo))
        {
            await DisplayMain();
        }
    }
    //
    async Task LoadMaster()
    {
        PriorityList = await masterService.Load_OptionList("007");
    }
    //
    #endregion

    #region MainForm
    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Claim.Services.String_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.StringValue = ClaimNo;
            //Call api
            var response = await ClaimServiceClient.GetClaimRequestAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Show success
                ClassHelper.CopyPropertiesDataDateConverted(response.ClaimRequest, Model);

                //Priority
                SelectedPriority = PriorityList.Find(x => x.IntCode == Model.Priority);

                //Estimations
                if (response.ClaimRequest.Estimations != null && response.ClaimRequest.Estimations.Count > 0)
                {
                    foreach (var item in response.ClaimRequest.Estimations)
                    {
                        var estRow = new EstimationModel();
                        ClassHelper.CopyPropertiesDataDateConverted(item, estRow);
                        Model.Estimations.Add(estRow);
                    }
                }

                //CSS
                PriorityCss = "";
                if (Model.Priority == 2) PriorityCss = "bg-warning";
                if (Model.Priority == 3) PriorityCss = "bg-danger";
                //
                Model.UpdMode = 2;
            }

            //Refresh layout
            if (gridEst != null) await gridEst.Refresh();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
        }
    }

    bool ValidateForm()
    {
        //Skip
        if (Model.RepairStatus)
        {
            toastService.ShowWarning("", MyMessage.Error_DataReadOnly);
            return false;
        }
        //
        return true;
    }

    async void SaveMain()
    {
        try
        {
            //Validate input data
            var validateRes = ValidateForm();
            if (!validateRes) return;

            //Request
            var request = new SaveClaim_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.ClaimRequest = new grpcClaimRequestModel();
            //ApproveDoneDate
            if (Model.ApproveStatus && Model.ApproveDoneDate == DateTime.Today.MinDate())
            {
                Model.ApproveDoneDate = DateTime.Now;
            }
            //ApproveAccountID
            Model.ApproveAccountID = WebUserCredential.Username;
            Model.ApproveAccountName = WebUserCredential.Fullname;

            //Update ApproveAmount if not set
            if (Model.Estimations != null && Model.Estimations.Count > 0 && Model.ApproveStatus)
            {
                bool hasUpdateApproveAmount = false;
                foreach (var item in Model.Estimations)
                {
                    if (item.ApproveAmount == 0)
                    {
                        item.ApproveAmount = item.Amount;
                        //
                        hasUpdateApproveAmount = true;
                    }
                }
                //Update_ApproveAmount
                if (hasUpdateApproveAmount)
                {
                    Update_ApproveAmount();
                }
            }

            //
            ClassHelper.CopyPropertiesDataDateConverted(Model, request.ClaimRequest);

            //Estimations
            if (Model.Estimations != null && Model.Estimations.Count > 0)
            {
                foreach (var item in Model.Estimations)
                {
                    if (item.UpdMode != 3)
                    {
                        var estRow = new grpcEstimationModel();
                        ClassHelper.CopyPropertiesDataDateConverted(item, estRow);
                        request.ClaimRequest.Estimations.Add(estRow);
                    }
                }
            }

            //Call api
            var response = await ClaimServiceClient.SaveClaimApproveAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", MyMessage.Error_SaveFailed);
            }

            //Reload data
            await OnValidSumit.InvokeAsync();
            CloseMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_SaveFailed);
        }
    }
    void CloseMain()
    {
        MyForm.Close();
    }
    #endregion

    #region Items


    #endregion

    #region Grid main
    DxDataGrid<EstimationModel> gridEst;
    FormEditContext EditContext = null;
    //Confirm delete
    EstimationModel DeletedRow = null;
    void OnRowRemoving(EstimationModel dataRow)
    {
        DeletedRow = dataRow;
        //Show popup confirm
        ConfirmMessage = MyMessage.Confirm_DeleteRow;
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }

    //Cancel edit
    async Task OnCancelEditRow()
    {
        await gridEst.CancelRowEdit();
        EditContext = null;
    }

    async void DeleteRow()
    {
        //Set to delete mode
        if (DeletedRow.UpdMode == 1)
        {
            //Remove new row from data source
            Model.Estimations.Remove(DeletedRow);
        }
        else
        {
            //Mark to delete
            DeletedRow.UpdMode = 3;
        }

        //Refresh layout
        await gridEst.Refresh();
    }
    //Update row
    async Task UpdateRow()
    {
        //Update for edit field
        var backupRow = new EstimationModel();
        ClassHelper.CopyPropertiesData(EditContext.EditingRow, backupRow);
        //
        EditContext.EditingRow.LineNo = EditContext.LineNo;
        EditContext.EditingRow.IssueDate = DateTime.Now;
        EditContext.EditingRow.ItemCode = EditContext.ItemCode;
        EditContext.EditingRow.ItemName = EditContext.ItemName;
        EditContext.EditingRow.IsReplace = EditContext.IsReplace;
        EditContext.EditingRow.Quantity = EditContext.Quantity;
        EditContext.EditingRow.UnitPrice = EditContext.UnitPrice;
        EditContext.EditingRow.Amount = EditContext.Amount;
        EditContext.EditingRow.ApproveAmount = EditContext.ApproveAmount;
        EditContext.EditingRow.Notes = EditContext.Notes;

        //Update mode
        if (EditContext.EditingRow.UpdMode == 0 || EditContext.EditingRow.UpdMode == 3)
        {
            EditContext.EditingRow.UpdMode = 2;
        }

        //Insert to datasource
        if (EditContext.EditingRow.UpdMode == -1)
        {
            EditContext.EditingRow.UpdMode = 1;
            Model.Estimations.Add(EditContext.EditingRow);
        }
        // Update ApproveAmount
        Update_ApproveAmount();

        //Close popup & refresh data
        await gridEst.CancelRowEdit();
        await gridEst.Refresh();
    }
    // Edit row model
    class FormEditContext : EstimationModel
    {
        public FormEditContext(EstimationModel editRow)
        {
            //Saved data
            EditingRow = editRow;

            //Editable data only
            LineNo = EditingRow.LineNo;
            IssueDate = EditingRow.IssueDate;
            ItemCode = EditingRow.ItemCode;
            ItemName = EditingRow.ItemName;
            IsReplace = EditingRow.IsReplace;
            Quantity = EditingRow.Quantity;
            UnitPrice = EditingRow.UnitPrice;
            Amount = EditingRow.Amount;
            ApproveAmount = EditingRow.ApproveAmount;
            Notes = EditingRow.Notes;
        }
        public EstimationModel EditingRow { get; set; }
        public Action StateHasChanged { get; set; }
    }

    //Get data for edit/insert
    void OnRowEditStarting(EstimationModel editingRow)
    {
        //Init new row
        if (editingRow == null)
        {
            editingRow = new EstimationModel();
            //
            editingRow.IssueDate = DateTime.Now;
            editingRow.LineNo = Get_MaxDetailLineNo();
            //
            editingRow.UpdMode = -1;
        }
        EditContext = new FormEditContext(editingRow);
        //
        StateHasChanged();
    }
    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<EstimationModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += myColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }
    void OnHtmlDataCellDecoration(DataGridHtmlDataCellDecorationEventArgs<EstimationModel> eventArgs)
    {
        eventArgs.CssClass += " border-0";
        //eventArgs.Style += " ;font-weight:bold;text-align: right";
        //Quantity
        if (eventArgs.FieldName == nameof(EstimationModel.Quantity))
        {
            eventArgs.Style += " ;font-weight:bold; color: blue; text-align: right";
        }
        //UnitPrice
        if (eventArgs.FieldName == nameof(EstimationModel.UnitPrice))
        {
            eventArgs.Style += " ;color: green; text-align: right";
        }
        //Amount
        if (eventArgs.FieldName == nameof(EstimationModel.Amount))
        {
            eventArgs.Style += " ;color: navy; text-align: right";
        }
        //ApproveAmount
        if (eventArgs.FieldName == nameof(EstimationModel.ApproveAmount))
        {
            eventArgs.Style += " ;color: maroon; text-align: right";
        }
    }
    //
    private int Get_MaxDetailLineNo()
    {
        if (Model.Estimations != null && Model.Estimations.Count > 0)
        {
            return Model.Estimations.Max(x => x.LineNo) + 1;
        }
        return 1;
    }
    //
    void UnitPrice_Changed(double newValue)
    {
        EditContext.UnitPrice = newValue;
        //
        EditContext.Amount = EditContext.Quantity * EditContext.UnitPrice;
        //
        this.StateHasChanged();
    }
    void Quantity_Changed(double newValue)
    {
        EditContext.Quantity = newValue;
        //
        EditContext.Amount = EditContext.Quantity * EditContext.UnitPrice;
        //
        this.StateHasChanged();
    }
    void DeductibleAmount_Changed(double newValue)
    {
        Model.DeductibleAmount = newValue;
        //
        Update_Summary();
        //
        this.StateHasChanged();
    }
    void Update_ApproveAmount()
    {
        //Update ApproveAmount
        Model.ApproveAmount = Model.Estimations.Sum<EstimationModel>(x => x.ApproveAmount);

        //Update_Summary
        Update_Summary();
    }
    //Update_Summary
    void Update_Summary()
    {
        //IndemnityAmount
        Model.IndemnityAmount = Model.ApproveAmount - Model.DeductibleAmount;
        //RemainingAmount
        Model.RemainingAmount = Model.InsurAmount - Model.IndemnityAmount;
    }
    #endregion


}
