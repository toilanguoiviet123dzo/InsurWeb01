@using Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcResourceService.grpcResourceServiceClient resourceServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar


<MudCard>
    <MudCardHeader Class="px-2 py-1">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Danh sách ảnh đính kèm</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="@(() => OnCancel())" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="@DetailData"
                  @bind-SelectedItem="selectedRow">
            <HeaderContent>
                <MyImageUpLoad CategoryID="@CategoryID"
                               OwnerID="@OwnerID"
                               SecureLevel="@WebUserCredential.DocumentLevel"
                               OnSubmit="@((List<UpLoadFileModel> files) => Add_ImagesHandle(files))" />
            </HeaderContent>
            <RowTemplate>
                @if (BrowserInfo.IsMobile)
                {
                    <MudTd>
                        <img class="align-self-stretch" @onclick="@(() => ShowImageDetail(context.ResourceID1))" src="@("data:image/png;base64," + Convert.ToBase64String(context.FileContent1.Length != 0 ? context.FileContent1: context.Thumbnail1))">
                    </MudTd>
                }
                else
                {
                    <MudTd>
                        <img class="align-self-stretch" @onclick="@(() => ShowImageDetail(context.ResourceID1))" src="@("data:image/png;base64," + Convert.ToBase64String(context.FileContent1.Length != 0 ? context.FileContent1: context.Thumbnail1))">
                    </MudTd>
                    <MudTd>
                        <img class="align-self-stretch" @onclick="@(() => ShowImageDetail(context.ResourceID2))" src="@("data:image/png;base64," + Convert.ToBase64String(context.FileContent2.Length != 0 ? context.FileContent2: context.Thumbnail2))">
                    </MudTd>
                    <MudTd>
                        <img class="align-self-stretch" @onclick="@(() => ShowImageDetail(context.ResourceID3))" src="@("data:image/png;base64," + Convert.ToBase64String(context.FileContent3.Length != 0 ? context.FileContent3: context.Thumbnail3))">
                    </MudTd>
                    <MudTd>
                        <img class="align-self-stretch" @onclick="@(() => ShowImageDetail(context.ResourceID4))" src="@("data:image/png;base64," + Convert.ToBase64String(context.FileContent4.Length != 0 ? context.FileContent4: context.Thumbnail4))">
                    </MudTd>
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string OwnerID { get; set; } = "21000001";
    [Parameter] public string CategoryID { get; set; } = "001";

    //DetailData
    private List<ImageViewModel> DetailData = new List<ImageViewModel>();
    ImageViewModel selectedRow;

    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await DisplayMain();
    }
    #region Load data

    void OnCancel()
    {
        MudDialog.Close();
    }

    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Resource.Services.GetResourceFiles_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //ClaimNo
            request.OwnerID = OwnerID;
            //Call api
            var response = await resourceServiceClient.GetResourceFilesAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                int colIndex = 0;
                ImageViewModel row = new ImageViewModel();
                //
                foreach (var record in response.Records)
                {
                    //
                    if (BrowserInfo.IsMobile)
                    {
                        //Mobile
                        row = new ImageViewModel();
                        row.ResourceID1 = record.ResourceID;
                        row.Thumbnail1 = record.FileContent.ToByteArray();
                        row.FileType1 = record.FileType;
                        row.FileName1 = record.FileName;
                        //
                        DetailData.Add(row);
                    }
                    else
                    {
                        //PC
                        if (colIndex == 0)
                        {
                            row.ResourceID1 = record.ResourceID;
                            row.Thumbnail1 = record.FileContent.ToByteArray();
                            row.FileType1 = record.FileType;
                            row.FileName1 = record.FileName;
                        }
                        if (colIndex == 1)
                        {
                            row.ResourceID2 = record.ResourceID;
                            row.Thumbnail2 = record.FileContent.ToByteArray();
                            row.FileType2 = record.FileType;
                            row.FileName2 = record.FileName;
                        }
                        if (colIndex == 2)
                        {
                            row.ResourceID3 = record.ResourceID;
                            row.Thumbnail3 = record.FileContent.ToByteArray();
                            row.FileType3 = record.FileType;
                            row.FileName3 = record.FileName;
                        }
                        if (colIndex == 3)
                        {
                            row.ResourceID4 = record.ResourceID;
                            row.Thumbnail4 = record.FileContent.ToByteArray();
                            row.FileType4 = record.FileType;
                            row.FileName4 = record.FileName;
                        }
                        colIndex++;
                        //Add
                        if (colIndex == 3)
                        {
                            //Add
                            DetailData.Add(row);
                            //New row
                            row = new ImageViewModel();
                            colIndex = 0;
                        }
                    }
                    //Last row
                    if (!BrowserInfo.IsMobile && !string.IsNullOrWhiteSpace(row.ResourceID1))
                    {
                        //Add
                        DetailData.Add(row);
                    }
                }
            }
            
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_LoadDataFailed, Severity.Error);
        }
    }

    async void Add_ImagesHandle(List<UpLoadFileModel> uploadFiles)
    {
        await DisplayMain();
    }

    void ShowImageDetail(string resourceID)
    {

    }
    #endregion


    #region Screen items
    
    
    //DownLoadFile
    async void DownLoadFile(UpLoadFileModel dataRow)
    {
        //Download file content
        if (dataRow.FileContent == null || dataRow.FileContent.Length == 0)
        {
            var request = new Resource.Services.String_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            request.StringValue = dataRow.ResourceID;
            //
            var response = await resourceServiceClient.GetResourceFileAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                dataRow.FileContent = ClassHelper.ByteArray_FromByteString(response.Record.FileContent);
            }
        }
        if (dataRow.FileContent == null || dataRow.FileContent.Length == 0)
        {
            Snackbar.Add(MyMessage.Error_DownloadFile, Severity.Error);
            return;
        }

        //call javascript function to download the file
        await JsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream", Convert.ToBase64String(dataRow.FileContent), dataRow.FileName);
    }

    async void DeleteImage(string resourceID)
    {
        try
        {
            //Request
            var request = new Resource.Services.String_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //resourceID
            request.StringValue = resourceID;
            //Call api
            var response = await resourceServiceClient.DeleteResourceFileAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //DetailData.RemoveAll(x => x.ResourceID == resourceID);
                this.StateHasChanged();
            }
            else
            {
                Snackbar.Add(MyMessage.Error_DeleteFile, Severity.Error);
            }
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_DeleteFile, Severity.Error);
        }
    }

    #endregion
    //
}