@using Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcResourceService.grpcResourceServiceClient resourceServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar

@if (DetailData.Count > 0)
{
    <!-- Photo Grid -->
    <div class="__row">
        <div class="__column">
            @foreach (var item in DetailData)
            {
                <img @onclick="@(() => ShowImageDetail(item.ResourceID))" src="@("data:image/png;base64," + Convert.ToBase64String(item.FileContent))" style="width:100%">
            }

        </div>
        <div class="__column">
            @for (var i = 0; i < DetailData.Count; i++)
            {
                @if (i % 4 == 1)
                {
                    <img @onclick="@(() => ShowImageDetail(i.ToString()))" src="@("data:image/png;base64," + Convert.ToBase64String(DetailData[i].FileContent))" style="width:100%">
                }
            }
        </div>
        <div class="__column">
            @for (var i = 0; i < DetailData.Count; i++)
            {
                @if (i % 4 == 2)
                {
                    <img @onclick="@(() => ShowImageDetail(i.ToString()))" src="@("data:image/png;base64," + Convert.ToBase64String(DetailData[i].FileContent))" style="width:100%">
                }
            }
        </div>
        <div class="__column">
            @for (var i = 0; i < DetailData.Count; i++)
            {
                @if (i % 4 == 3)
                {
                    <img @onclick="@(() => ShowImageDetail(i.ToString()))" src="@("data:image/png;base64," + Convert.ToBase64String(DetailData[i].FileContent))" style="width:100%">
                }
            }
        </div>
    </div>
}
else
{
    <div class="text-center text-info">
        <i class="fa fa-face-laugh fa-2x"></i> <span>Chưa có ảnh nào</span>
    </div>
}

<!--Add images-->
<div class="container-fluid">
    <div class="row justify-content-center mt-2">
        <MyButton Literal="Thêm ảnh"
                  OnClick="ShowAddImage"
                  ButtonColor="@Color.Primary"
                  IconCss="@Icons.Material.Filled.AddAPhoto" />
    </div>
</div>



<!--Confirm dialog-->
<MessageBox Title="Xóa anh đính kèm" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

@code {
    [Parameter]
    public string VoucherNo { get; set; } = "21000001";
    //DetailData
    private List<UpLoadFileModel> DetailData = new List<UpLoadFileModel>();

    // Confirm dialog
    private int ConfirmAction = 0;
    private string ConfirmMessage = "";
    private bool ConfirmVisible = false;
    //Popup
    private UpLoadFileModel UpLoadFile = new UpLoadFileModel();
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await DisplayMain();
    }
    #region Load data

    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Resource.Services.GetResourceFiles_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //ClaimNo
            request.OwnerID = UpLoadFile.OwnerID;
            //Call api
            var response = await resourceServiceClient.GetResourceFilesAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                foreach (var record in response.Records)
                {
                    var item = new UpLoadFileModel();
                    ClassHelper.CopyPropertiesData(record, item);
                    DetailData.Add(item);
                }
            }
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_LoadDataFailed, Severity.Error);
        }
    }

    #endregion

    #region Save
    private string DeleteResourceID = "";
    void ConfirmHandler()
    {
        //Save main
        if (ConfirmAction == MyConstant.ConfirmAction_DeleteRow)
        {
            DeleteImage(DeleteResourceID);
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }

    void DeleteImage_Handler(string resourceID)
    {
        DeleteResourceID = resourceID;
        //
        ConfirmVisible = true;
        ConfirmAction = MyConstant.ConfirmAction_DeleteRow;
        ConfirmMessage = "Xóa ảnh?";
        //
        this.StateHasChanged();
    }

    //
    async void DeleteImage(string resourceID)
    {
        try
        {
            //Request
            var request = new Resource.Services.String_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //resourceID
            request.StringValue = resourceID;
            //Call api
            var response = await resourceServiceClient.DeleteResourceFileAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                DetailData.RemoveAll(x => x.ResourceID == resourceID);
                this.StateHasChanged();
            }
            else
            {
                Snackbar.Add(MyMessage.Error_DeleteFile, Severity.Error);
            }
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_DeleteFile, Severity.Error);
        }
    }

    void ShowAddImage()
    {
        UpLoadFile = new UpLoadFileModel();
        UpLoadFile.OwnerID = VoucherNo;
        UpLoadFile.CategoryID = "01";
        UpLoadFile.IsMakeThumbnail = true;
        UpLoadFile.SecureLevel = 0;
        UpLoadFile.AccountID = WebUserCredential.Username;
        //
        @*AddImagePopup.Show();*@
    }
    void Add_UploadFileToView(UpLoadFileModel uploadedFile)
    {
        DetailData.Add(uploadedFile);
        //
        this.StateHasChanged();
    }

    void ShowImageDetail(string resourceID)
    {

    }

    #endregion



    #region Screen items

    private IBrowserFile selectedFile;
    async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;

            //Update edit context
            Stream stream = selectedFile.OpenReadStream(10000000);
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            //
            UpLoadFile.FileName = selectedFile.Name;
            UpLoadFile.FileContent = ms.ToArray();
            UpLoadFile.IsFileChanged = true;
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_LoadFile, Severity.Error);
        }
    }

    async void DownLoadFile(UpLoadFileModel dataRow)
    {
        //Download file content
        if (dataRow.FileContent == null || dataRow.FileContent.Length == 0)
        {
            var request = new Resource.Services.String_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            request.StringValue = dataRow.ResourceID;
            //
            var response = await resourceServiceClient.GetResourceFileAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                dataRow.FileContent = ClassHelper.ByteArray_FromByteString(response.Record.FileContent);
            }
        }
        if (dataRow.FileContent == null || dataRow.FileContent.Length == 0)
        {
            Snackbar.Add(MyMessage.Error_DownloadFile, Severity.Error);
            return;
        }

        //call javascript function to download the file
        await JsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream", Convert.ToBase64String(dataRow.FileContent), dataRow.FileName);
    }

    #endregion
    //
}