@page "/RoleDetail"
@using Admin.Services
@using System.Collections.ObjectModel;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<div style="width:15rem">
        <label>Role</label>
        <DxComboBox Data="@ListRoleList"
                    Value="@ClearCmbRoleList"
                    AllowUserInput="true"
                    FilteringMode="DataGridFilteringMode.Contains"
                    ValueChanged="@((RoleListModel Value) => RoleList_ValueChanged(Value))"
                    TextFieldName="@nameof(RoleListModel.RoleName)">
        </DxComboBox>
    </div>
<br />
<div style="width:100%">
    <DxDataGrid @ref="@Grid"
                Data="@ListFunctionList"
                EditMode="DataGridEditMode.PopupEditForm"
                PageSize="18"
                ShowFilterRow="true"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                RowInsertStart="@(() => OnRowEditStarting(null))"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))">
        <Columns>
            <!--Command columns-->
            <DxDataGridCommandColumn Width="3rem" VisibleIndex="0">
                <HeaderCellTemplate>
                </HeaderCellTemplate>
                <CellTemplate>
                    <div style="display:flex;justify-content:center">
                        <div class="text-center" style="width:3rem">
                            <a class="fa fa-pencil" style="font-size:24px" @onclick="@(() => Grid.StartRowEdit(context))" href="javascript:void(0);"></a>
                        </div>
                    </div>
                </CellTemplate>
            </DxDataGridCommandColumn>

            <DxDataGridColumn Field="@nameof(FunctionListModel.PageID)"
                              Width="8rem" />
            <DxDataGridColumn Field="@nameof(FunctionListModel.PageName)"
                              Width="15rem" />
            <DxDataGridCheckBoxColumn Field="@nameof(FunctionListModel.IsGranted)"
                                      CheckType="CheckType.Switch"
                                      Width="5rem" />
            <DxDataGridCheckBoxColumn Field="@nameof(FunctionListModel.CheckF1)"
                                      Caption=" "
                                      Width="3rem" />
            <DxDataGridColumn Field="@nameof(FunctionListModel.F1)"
                              Width="10rem" />
            <DxDataGridCheckBoxColumn Field="@nameof(FunctionListModel.CheckF2)"
                                      Caption=" "
                                      Width="3rem" />
            <DxDataGridColumn Field="@nameof(FunctionListModel.F2)"
                              Width="10rem" />
            <DxDataGridCheckBoxColumn Field="@nameof(FunctionListModel.CheckF3)"
                                      Caption=" "
                                      Width="3rem" />
            <DxDataGridColumn Field="@nameof(FunctionListModel.F3)"
                              Width="10rem" />
            <DxDataGridCheckBoxColumn Field="@nameof(FunctionListModel.CheckF4)"
                                      Caption=" "
                                      Width="3rem" />
            <DxDataGridColumn Field="@nameof(FunctionListModel.F4)"
                              Width="10rem" />
            <DxDataGridCheckBoxColumn Field="@nameof(FunctionListModel.CheckF5)"
                                      Caption=" "
                                      Width="3rem" />
            <DxDataGridColumn Field="@nameof(FunctionListModel.F5)"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(FunctionListModel.Discriptions)"
                              Caption="Descriptions"
                              Width="10rem" />

        </Columns>
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <DxFormLayoutItem Caption="IsGranted: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxCheckBox Checked="@EditContext.IsGranted"
                                        CheckedExpression="@(() => EditContext.IsGranted)"
                                        CheckedChanged="@((bool value) => CheckedChanged(value))" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="@EditContext.F1" ColSpanMd="12" Context="FormLayoutContext" Visible="@VisibleF1">
                        <Template>
                            <DxCheckBox @bind-Checked="@EditContext.CheckF1"
                                        Enabled="@EditContext.IsGranted" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="@EditContext.F2" ColSpanMd="12" Context="FormLayoutContext" Visible="@VisibleF2">
                        <Template>
                            <DxCheckBox @bind-Checked="@EditContext.CheckF2"
                                        Enabled="@EditContext.IsGranted" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="@EditContext.F3" ColSpanMd="12" Context="FormLayoutContext" Visible="@VisibleF3">
                        <Template>
                            <DxCheckBox @bind-Checked="@EditContext.CheckF3"
                                        Enabled="@EditContext.IsGranted" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="@EditContext.F4" ColSpanMd="12" Context="FormLayoutContext" Visible="@VisibleF4">
                        <Template>
                            <DxCheckBox @bind-Checked="@EditContext.CheckF4"
                                        Enabled="@EditContext.IsGranted" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="@EditContext.F5" ColSpanMd="12" Context="FormLayoutContext" Visible="@VisibleF5">
                        <Template>
                            <DxCheckBox @bind-Checked="@EditContext.CheckF5"
                                        Enabled="@EditContext.IsGranted" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Descriptions: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Discriptions" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--OK Cancel-->
                    <MyGridEditFormOKCancel OnCancelClick="OnCancelButtonClick" />
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
    </DxDataGrid>
    <br />
    <div class="text-center">
        <MyButtonSave OnClick="ShowConfirm_SaveMain" />
        <MyButtonCancel OnClick="ShowConfirm_CancelSaveMain" />
    </div>
</div>

<MessageBox Title="@Program.ProgramName" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

@code{
    // Popup
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    private string ConfirmMessage = "";
    private string ConfirmAction = "";
    private bool ConfirmVisible = false;
    // RoleList
    private readonly List<RoleListModel> ListRoleList = new List<RoleListModel>();
    // RoleDetail
    private readonly List<RoleDetailModel> ListRoleDetail = new List<RoleDetailModel>();
    // FunctionList
    readonly ObservableCollection<FunctionListModel> ListFunctionList = new ObservableCollection<FunctionListModel>();
    // Init
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        // Load filter data
        await LoadMaster();

        // Display data ..

    }

    #region Load data
    // Load init data
    async Task LoadMaster()
    {

        //...
        await Load_RoleList();

    }

    // Load RoleList
    async Task Load_RoleList()
    {
        try
        {
            var request = new Empty_Request()
            {
                Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                }
            };
            //Get data from DB
            ListRoleList.Clear();
            var response = await adminServiceClient.GetRoleListAsync(request);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.RoleList)
                {
                    RoleListModel dataRow = new RoleListModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    ListRoleList.Add(dataRow);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load role list thất bại.");
        }
    }
    // Load RoleDetail
    async Task Load_RoleDetail()
    {
        try
        {
            var request = new Admin.Services.String_Request()
            {
                Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                }
            };
            //Get data from DB
            ListRoleDetail.Clear();
            var response = await adminServiceClient.GetRoleDetailAsync(request);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.RoleDetail)
                {
                    RoleDetailModel dataRow = new RoleDetailModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    // Set Updmode
                    dataRow.UpdMode = 0;
                    //
                    ListRoleDetail.Add(dataRow);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load role detail thất bại.");
        }
    }

    async Task Load_FunctionList()
    {
        try
        {
            //Filter
            var requestString = new Empty_Request()
            {
                Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                }
            };

            //Get data from DB
            ListFunctionList.Clear();
            var response = await adminServiceClient.GetFunctionListAsync(requestString);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.FunctionList)
                {
                    FunctionListModel dataRow = new FunctionListModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //
                    ListFunctionList.Add(dataRow);
                }
            }
        }
        catch
        {
            toastService.ShowError("", "Load function list failed");
        }
    }

    // Load FunctionList
    async void DisplayMain()
    {
        try
        {
            //Load function list
            if (ListFunctionList.Count == 0)
            {
                await Load_FunctionList();
            }

            //Load role detail
            var request = new String_Request()
            {
                Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                }
            };
            request.StringValue = FilterRoleID;

            //Get data from DB
            ListRoleDetail.Clear();
            var response = await adminServiceClient.GetRoleDetailAsync(request);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.RoleDetail)
                {
                    RoleDetailModel dataRow = new RoleDetailModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    // Set Updmode
                    dataRow.UpdMode = 0;
                    //
                    ListRoleDetail.Add(dataRow);
                }
            }

            //Check to grid for granted functions
            foreach (var row in ListFunctionList)
            {
                //Clear check
                row.CheckF1 = false;
                row.CheckF2 = false;
                row.CheckF3 = false;
                row.CheckF4 = false;
                row.CheckF5 = false;
                row.IsGranted = false;
                row.UpdMode = 0;

                //Look up into RoleDetail
                var roleDetailRow = ListRoleDetail.Find(x => x.PageID == row.PageID);
                if (roleDetailRow != null)
                {
                    row.IsGranted = true;
                    //
                    if (roleDetailRow.F1) row.CheckF1 = true;
                    if (roleDetailRow.F2) row.CheckF2 = true;
                    if (roleDetailRow.F3) row.CheckF3 = true;
                    if (roleDetailRow.F4) row.CheckF4 = true;
                    if (roleDetailRow.F5) row.CheckF5 = true;
                }
            }
            //refresh
            await Grid.Refresh();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load dữ liệu thất bại.");
        }
    }
    #endregion

    #region DataGrid
    // Edit row model
    DxDataGrid<FunctionListModel> Grid;
    FormEditContext EditContext = null;
    class FormEditContext : FunctionListModel
    {
        public FormEditContext(FunctionListModel functionListModel)
        {
            // Saved data
            EditingRow = functionListModel;
            // Editable data only
            F1 = EditingRow.F1;
            F2 = EditingRow.F2;
            F3 = EditingRow.F3;
            F4 = EditingRow.F4;
            F5 = EditingRow.F5;
            //
            Discriptions = EditingRow.Discriptions;
            CheckF1 = EditingRow.CheckF1;
            CheckF2 = EditingRow.CheckF2;
            CheckF3 = EditingRow.CheckF3;
            CheckF4 = EditingRow.CheckF4;
            CheckF5 = EditingRow.CheckF5;
            IsGranted = EditingRow.IsGranted;
        }
        public FunctionListModel EditingRow { get; set; }
        public Action StateHasChanged { get; set; }
    }
    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<FunctionListModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += myColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }
    #endregion

    #region CRUD
    // Check changed in ListFunctionList
    bool Check_Changed()
    {
        foreach (FunctionListModel row in ListFunctionList)
        {
            if (row.UpdMode != 0)
            {
                return true;
            }
        }
        return false;
    }
    // Show confirm cancel SaveMain
    void ShowConfirm_CancelSaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", "Nothing Changed!");
            return;
        }
        // Show popup confirm
        ConfirmMessage = "Cancel changed?";
        ConfirmAction = "CancelSaveMain";
        ConfirmVisible = true;
        StateHasChanged();
    }
    // Show confirm delete SaveMain
    FunctionListModel DeletedRow = null;
    void OnRowRemoving(FunctionListModel dataRow)
    {
        DeletedRow = dataRow;
        // Show popup confirm
        ConfirmMessage = "Xóa dòng dữ liệu?";
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }
    // Show confirm save SaveMain
    void ShowConfirm_SaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", "Nothing Changed!");
            return;
        }
        // Show popup confirm
        ConfirmMessage = "Save changed?";
        ConfirmAction = "SaveMain";
        ConfirmVisible = true;
        StateHasChanged();
    }
    // Confirm Cancel, Delete, Save
    void ConfirmHandler()
    {
        // Cancel save main
        if (ConfirmAction == "CancelSaveMain")
        {
            CancelSaveMain();
        }
        // Save all change main
        if (ConfirmAction == "SaveMain")
        {
            SaveMain();
        }
        // Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }
    // Cancel edit main
    void CancelSaveMain()
    {
        // Reload data
        DisplayMain();
    }

    // Visible F1-5
    bool VisibleF1 = true;
    bool VisibleF2 = true;
    bool VisibleF3 = true;
    bool VisibleF4 = true;
    bool VisibleF5 = true;
    // Get data for edit/insert
    void OnRowEditStarting(FunctionListModel editingRow)
    {
        VisibleF1 = true;
        VisibleF2 = true;
        VisibleF3 = true;
        VisibleF4 = true;
        VisibleF5 = true;
        if (String.IsNullOrWhiteSpace(editingRow.F1)) VisibleF1 = false;
        if (String.IsNullOrWhiteSpace(editingRow.F2)) VisibleF2 = false;
        if (String.IsNullOrWhiteSpace(editingRow.F3)) VisibleF3 = false;
        if (String.IsNullOrWhiteSpace(editingRow.F4)) VisibleF4 = false;
        if (String.IsNullOrWhiteSpace(editingRow.F5)) VisibleF5 = false;
        //
        EditContext = new FormEditContext(editingRow);
    }
    // Update row
    async Task UpdateRow()
    {
        // Update for edit field
        var backupRow = new FunctionListModel();
        ClassHelper.CopyPropertiesData(EditContext.EditingRow, backupRow);
        //
        EditContext.EditingRow.CheckF1 = EditContext.CheckF1;
        EditContext.EditingRow.CheckF2 = EditContext.CheckF2;
        EditContext.EditingRow.CheckF3 = EditContext.CheckF3;
        EditContext.EditingRow.CheckF4 = EditContext.CheckF4;
        EditContext.EditingRow.CheckF5 = EditContext.CheckF5;
        EditContext.EditingRow.IsGranted = EditContext.IsGranted;
        EditContext.EditingRow.Discriptions = EditContext.Discriptions;
        EditContext.EditingRow.ModifiedOn = DateTime.Now;
        // Update mode
        if (EditContext.EditingRow.UpdMode == 0 || EditContext.EditingRow.UpdMode == 3)
        {
            EditContext.EditingRow.UpdMode = 2;
        }
        // Insert to datasource
        if (EditContext.EditingRow.UpdMode == -1)
        {
            EditContext.EditingRow.UpdMode = 1;
            ListFunctionList.Add(EditContext.EditingRow);
        }
        // Close popup & refresh data
        await Grid.CancelRowEdit();
        await Grid.Refresh();
    }
    // Save edit main
    async void SaveMain()
    {
        try
        {
            //Delete first
            var requestDelete = new DeleteRoleDetail_Request();
            requestDelete.Credential = new Admin.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            requestDelete.RoleID = FilterRoleID;
            var responseDelete = await adminServiceClient.DeleteRoleDetailAsync(requestDelete);
            if (responseDelete == null || responseDelete.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", "Lưu dữ liệu thất bại.");
                return;
            }

            //Insert
            var request = new SaveRoleDetail_Request();
            request.Credential = new Admin.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            //Get save data
            foreach (var row in ListFunctionList)
            {
                if (row.IsGranted)
                {
                    var grpcRow = new grpcRoleDetail();
                    ClassHelper.CopyPropertiesDataDateConverted(row, grpcRow);
                    grpcRow.RoleID = FilterRoleID;
                    grpcRow.F1 = row.CheckF1;
                    grpcRow.F2 = row.CheckF2;
                    grpcRow.F3 = row.CheckF3;
                    grpcRow.F4 = row.CheckF4;
                    grpcRow.F5 = row.CheckF5;
                    grpcRow.UpdMode = 1;
                    //
                    request.RoleDetail.Add(grpcRow);
                }
            }
            //
            var response = await adminServiceClient.SaveRoleDetailAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                toastService.ShowSuccess("", "Lưu dữ liệu thành công.");
            }
            else
            {
                toastService.ShowError("", "Lưu dữ liệu thất bại.");
            }
            // Reload data
            DisplayMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Lưu dữ liệu thất bại.");
        }
    }
    // Cancel edit
    async Task OnCancelButtonClick()
    {
        await Grid.CancelRowEdit();
        EditContext = null;
    }
    #endregion

    #region Screen items
    // Select RoleList
    string FilterRoleID;
    RoleListModel ClearCmbRoleList = null;
    void RoleList_ValueChanged(RoleListModel item)
    {
        ClearCmbRoleList = item;
        FilterRoleID = "";
        if (item != null)
        {
            FilterRoleID = item.RoleID;
        }
        // Display data
        DisplayMain();
    }
    // Check IsGranted
    void CheckedChanged(bool value)
    {
        EditContext.IsGranted = value;
        if (!EditContext.IsGranted)
        {
            EditContext.CheckF1 = false;
            EditContext.CheckF2 = false;
            EditContext.CheckF3 = false;
            EditContext.CheckF4 = false;
            EditContext.CheckF5 = false;
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(EditContext.F1)) EditContext.CheckF1 = true;
            if (!string.IsNullOrWhiteSpace(EditContext.F2)) EditContext.CheckF2 = true;
            if (!string.IsNullOrWhiteSpace(EditContext.F3)) EditContext.CheckF3 = true;
            if (!string.IsNullOrWhiteSpace(EditContext.F4)) EditContext.CheckF4 = true;
            if (!string.IsNullOrWhiteSpace(EditContext.F5)) EditContext.CheckF5 = true;
        }
    }
    #endregion
}