@page "/BrancheMaster"
@using Admin.Services
@using Claim.Services
@using System.Collections.ObjectModel;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MyDataGrid @ref="@grid"
            T="BranchMasterModel"
            Title="Danh sách yêu cầu bồi thường"
            Items="@DetailData"
            IsAddNew="true"
            IsDelete="true"
            OnAddRow="@(() => OnAddRow_Handle())"
            OnViewRow="@((BranchMasterModel row) => OnViewRow_Handle(row))"
            OnDeleteRow="@((BranchMasterModel row) => OnDeleteRow_Handle(row))">
    <ColGroup>
        <col style="width: 2rem;" />
        <col style="width: 6rem;" />
        <col style="width: 8rem;" />
        <col style="width: 10rem;" />
        <col />
        <col style="width: 10rem;" />
        <col />
        <col style="width: 5rem;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<BranchMasterModel, object>(x => x.DspOrder)">No.</MudTableSortLabel></MudTh>
        <MudTh>Mã</MudTh>
        <MudTh>Tên</MudTh>
        <MudTh>Phone</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Địa chỉ</MudTh>
        <MudTh>Người phụ trách</MudTh>
        <MudTh>Ghi chú</MudTh>
        <MudTh>Hữu hiệu</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="text-align:center;">@context.DspOrder</MudTd>
        <MudTd Style="color:blue; font-weight:bold">@context.BranchID</MudTd>
        <MudTd>@context.BranchName</MudTd>
        <MudTd Style="text-align:center;">@context.PhoneNo</MudTd>
        <MudTd>@context.Email</MudTd>
        <MudTd>@context.Address</MudTd>
        <MudTd>@context.PicName</MudTd>
        <MudTd>@context.Notes</MudTd>
        <MudTd><MudCheckBox Checked="@context.Status" Color="Color.Primary" ReadOnly="true"></MudCheckBox></MudTd>
    </RowTemplate>
</MyDataGrid>

@code {
    [CascadingParameter] protected ProgramInfo Program { get; set; }
    // Detail data
    MyDataGrid<BranchMasterModel> grid;
    readonly List<BranchMasterModel> DetailData = new List<BranchMasterModel>();
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Display data ..
        await DisplayMain();
    }
    #region Load data

    async Task DisplayMain()
    {
        try
        {
            //Filter
            var requestString = new Claim.Services.Empty_Request()
                {
                    Credential = new Claim.Services.UserCredential()
                    {
                        Username = WebUserCredential.Username,
                        RoleID = WebUserCredential.RoleID,
                        AccessToken = WebUserCredential.AccessToken,
                        ApiKey = WebUserCredential.ApiKey
                    }
                };

            //Get data from DB
            DetailData.Clear();
            var response = await ClaimServiceClient.GetBranchMasterAsync(requestString);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.Records)
                {
                    BranchMasterModel dataRow = new BranchMasterModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //
                    DetailData.Add(dataRow);
                }
                grid.Refresh();
            }
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_LoadDataFailed, Severity.Error);
        }
    }

    #endregion


    #region Grid main
    //Save Row
    async Task<bool> SaveRow(BranchMasterModel saveRow)
    {
        try
        {
            //Request
            var request = new SaveBranchMaster_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            // Convert to DB row
            request.Record = new grpcBranchMasterModel();
            ClassHelper.CopyPropertiesDataDateConverted(saveRow, request.Record);
            // Call api
            var response = await ClaimServiceClient.SaveBranchMasterAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                Snackbar.Add(MyMessage.Error_SaveFailed, Severity.Error);
            }
            else
            {
                //Update ID
                saveRow.ID = response.StringValue;
            }
            //OK
            return true;
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_SaveFailed, Severity.Error);
        }
        //
        return false;
    }

    //Add row
    async void OnAddRow_Handle()
    {
        //Init new row
        var newRow = new BranchMasterModel();
        newRow.UpdMode = 1;
        newRow.ModifiedOn = DateTime.Now;
        //
        var parameters = new DialogParameters();
        parameters.Add("Model", newRow);
        //
        var result = await DialogService.Show<BrancheMasterEdit>("", parameters, MyOptions.GetEditFormOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (BranchMasterModel)result.Data;

            //Save to DB
            var saveRet = await SaveRow(retModel);
            if (true)
            {
                //Add to grid
                DetailData.Add(retModel);
                grid.Refresh();
            }
        }
    }
    //Update row
    async void OnViewRow_Handle(BranchMasterModel row)
    {
        //UpdMode
        row.UpdMode = 2;
        //
        var parameters = new DialogParameters();
        parameters.Add("Model", row);
        //
        var result = await DialogService.Show<BrancheMasterEdit>("", parameters, MyOptions.GetEditFormOptions()).Result;
        if (!result.Cancelled && result.Data != null)
        {
            var retModel = (BranchMasterModel)result.Data;
            var updateReccord = DetailData.Find(x => x.ID == retModel.ID);
            if (updateReccord != null)
            {
                //Update to Grid
                ClassHelper.CopyPropertiesData(retModel, updateReccord);

                //Save to DB
                var saveRet = await SaveRow(retModel);
                if (true)
                {
                    grid.Refresh();
                }
            }
        }
    }

    //Delete row
    async void OnDeleteRow_Handle(BranchMasterModel row)
    {
        //UpdMode
        row.UpdMode = 3;

        //Save to DB
        var saveRet = await SaveRow(row);
        if (true)
        {
            DetailData.Remove(row);
            grid.Refresh();
        }
    }

    #endregion


}