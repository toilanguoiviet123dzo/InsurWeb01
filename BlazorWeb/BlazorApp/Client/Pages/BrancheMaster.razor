@page "/BrancheMaster"
@using Admin.Services
@using Claim.Services
@using System.Collections.ObjectModel;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<br />
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@DetailData"
                ColumnResizeMode="DataGridColumnResizeMode.Component"
                PageSize="@PageRowCount"
                ShowFilterRow="true"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))"
                RowInsertStart="@(() => OnRowEditStarting(null))">
        <Columns>
            <DxDataGridSpinEditColumn Field="@nameof(RepairerMasterModel.DspOrder)"
                                      Caption="STT"
                                      DisplayFormat="N0"
                                      Width="3rem" />
            <DxDataGridColumn Field="@nameof(BranchMasterModel.BranchID)"
                              Caption="Mã"
                              Width="6rem" />
            <DxDataGridColumn Field="@nameof(BranchMasterModel.BranchName)"
                              Caption="Tên"
                              Width="12rem" />
            <DxDataGridColumn Field="@nameof(BranchMasterModel.PhoneNo)"
                              Caption="Phone"
                              Width="7rem" />
            <DxDataGridColumn Field="@nameof(BranchMasterModel.Email)"
                              Caption="Email"
                              Width="12rem" />
            <DxDataGridColumn Field="@nameof(BranchMasterModel.Address)"
                              Caption="Địa chỉ"
                              Width="17rem" />
            <DxDataGridColumn Field="@nameof(BranchMasterModel.PicName)"
                              Caption="Người phụ trách"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(BranchMasterModel.Notes)"
                              Caption="Ghi chú"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(BranchMasterModel.StatusName)"
                              Caption="Trạng thái"
                              Width="6rem" />
            <DxDataGridDateEditColumn Field="@nameof(BranchMasterModel.ModifiedOn)"
                                      Caption="ModifiedOn"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="9rem" />
            <!--Command columns-->
            <MyGridCommand Grid="grid"
                           ShowAddnew="true"
                           ShowEdit="true"
                           ShowDelete="true"
                           OnRowRemoving="@((context) => OnRowRemoving(context as BranchMasterModel))" />
        </Columns>
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Mã: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.BranchID" InputCssClass="text-uppercase" />
                            <ValidationMessage For="@(() => EditContext.BranchID)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Tên: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.BranchName" />
                            <ValidationMessage For="@(() => EditContext.BranchName)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Phone: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.PhoneNo" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Email: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Email" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Địa chỉ: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Address" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Người phụ trách: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.PicName" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Ghi chú: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Notes" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Thứ tự" ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxMaskedInput @bind-Value="@EditContext.DspOrder"
                                           Mask="N0" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Hữu hiệu" ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxCheckBox @bind-Checked="@EditContext.BoolStatus" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--OK Cancel-->
                    <MyGridEditFormOKCancel OnCancelClick="OnCancelEditRow" />
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
    </DxDataGrid>
</div>

<MessageBox Title="@Program.ProgramName" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

@code {
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    private int PageRowCount = MyConstant.Grid_PageRowCount;
    FormEditContext EditContext = null;
    // Detail data
    readonly ObservableCollection<BranchMasterModel> DetailData = new ObservableCollection<BranchMasterModel>();
    // RoleList
    // Popup
    private string ConfirmMessage = "";
    private string ConfirmAction = "";
    private bool ConfirmVisible = false;
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Display data ..
        await DisplayMain();
    }
    #region Load data

    async Task DisplayMain()
    {
        try
        {
            //Filter
            var requestString = new Claim.Services.Empty_Request()
                {
                    Credential = new Claim.Services.UserCredential()
                    {
                        Username = WebUserCredential.Username,
                        RoleID = WebUserCredential.RoleID,
                        AccessToken = WebUserCredential.AccessToken,
                        ApiKey = WebUserCredential.ApiKey
                    }
                };

            //Get data from DB
            DetailData.Clear();
            var response = await ClaimServiceClient.GetBranchMasterAsync(requestString);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.Records)
                {
                    BranchMasterModel dataRow = new BranchMasterModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //StatusName
                    if (dataRow.Status == 0)
                    {
                        dataRow.StatusName = "Vô hiệu";
                    }
                    //
                    DetailData.Add(dataRow);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
        }
    }

    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }

    //Save Row
    async Task<bool> SaveRow(BranchMasterModel saveRow)
    {
        try
        {
            //Request
            var request = new SaveBranchMaster_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            // Convert to DB row
            request.Record = new grpcBranchMasterModel();
            ClassHelper.CopyPropertiesDataDateConverted(saveRow, request.Record);
            // Call api
            var response = await ClaimServiceClient.SaveBranchMasterAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", MyMessage.Error_SaveFailed);
            }
            else
            {
                //Update ID
                saveRow.ID = response.StringValue;
            }
            //OK
            return true;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_SaveFailed);
        }
        //
        return false;
    }
    #endregion

    #region Grid main
    //Confirm delete
    BranchMasterModel DeletedRow = null;
    void OnRowRemoving(BranchMasterModel dataRow)
    {
        DeletedRow = dataRow;

        //Show popup confirm
        ConfirmMessage = MyMessage.Confirm_DeleteRow;
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }

    //Cancel edit
    async Task OnCancelEditRow()
    {
        await grid.CancelRowEdit();
        EditContext = null;
    }

    async void DeleteRow()
    {
        // Mark to delete on grid
        DeletedRow.UpdMode = 3;

        var saveResult = await SaveRow(DeletedRow);

        // Refresh layout
        if (saveResult)
        {
            await grid.Refresh();
        }
    }
    //Update row
    async Task UpdateRow()
    {
        // Update for edit field
        EditContext.EditingRow.BranchID = EditContext.BranchID;
        EditContext.EditingRow.BranchName = EditContext.BranchName;
        EditContext.EditingRow.PhoneNo = EditContext.PhoneNo;
        EditContext.EditingRow.Email = EditContext.Email;
        EditContext.EditingRow.Address = EditContext.Address;
        EditContext.EditingRow.Notes = EditContext.Notes;
        EditContext.EditingRow.PicName = EditContext.PicName;
        EditContext.EditingRow.DspOrder = EditContext.DspOrder;
        //
        EditContext.EditingRow.Status = 1;
        EditContext.EditingRow.StatusName = "";
        if (!EditContext.BoolStatus)
        {
            EditContext.EditingRow.Status = 0;
            EditContext.EditingRow.StatusName = "Vô hiệu";
        }
        EditContext.EditingRow.ModifiedOn = DateTime.Now;

        // Insert
        if (EditContext.UpdMode == 1)
        {
            EditContext.EditingRow.UpdMode = 1;
            DetailData.Add(EditContext.EditingRow);
        }
        else
        {
            //Update or update to restore delete record
            EditContext.EditingRow.UpdMode = 2;
        }

        //Save row to DB
        var saveResult = await SaveRow(EditContext.EditingRow);
        if (saveResult)
        {
            // Close popup & refresh data
            await grid.CancelRowEdit();
            await grid.Refresh();
        }
    }
    // Edit row model
    DxDataGrid<BranchMasterModel> grid;
    class FormEditContext : BranchMasterModel
    {
        public FormEditContext(BranchMasterModel targetRow, int updMode)
        {
            //Backup editting row
            EditingRow = targetRow;

            //UpdMode
            UpdMode = updMode;

            //Edit context -> Editable data only
            BranchID = EditingRow.BranchID;
            BranchName = EditingRow.BranchName;
            PhoneNo = EditingRow.PhoneNo;
            Email = EditingRow.Email;
            Address = EditingRow.Address;
            Notes = EditingRow.Notes;
            PicName = EditingRow.PicName;
            DspOrder = EditingRow.DspOrder;
            Status = EditingRow.Status;
            BoolStatus = false;
            if (Status == 1)
            {
                BoolStatus = true;
            }
        }
        public bool BoolStatus { get; set; }
        public BranchMasterModel EditingRow { get; set; }
    }

    //Get data for edit/insert
    void OnRowEditStarting(BranchMasterModel editingRow)
    {
        // Insert row
        if (editingRow == null)
        {
            editingRow = new BranchMasterModel();
            //
            editingRow.UpdMode = -1;
            //Init row here
            editingRow.ModifiedOn = DateTime.Now;
            editingRow.Status = 1;
            //
            EditContext = new FormEditContext(editingRow, 1);
        }
        else
        {
            //Update row
            editingRow.UpdMode = 2;
            EditContext = new FormEditContext(editingRow, 2);
        }
    }
    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<BranchMasterModel> eventArgs)
    {
        
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += MyColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += MyColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += MyColor.DeleteRowColor;

        //Disable user
        if (eventArgs.DataItem.Status == 0) eventArgs.Style += MyColor.DisabledRowColor;
    }
    #endregion

    #region Screen items


    #endregion
    //
}