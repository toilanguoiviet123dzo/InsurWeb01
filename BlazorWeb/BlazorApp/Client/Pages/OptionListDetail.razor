@page "/OptionListDetail"
@using Admin.Services
@using System.Collections.ObjectModel;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<br />
<div style="width:15rem">
    <label>Loại danh sách</label>
    <DxComboBox Data="@ListCodeData"
                AllowUserInput="true"
                FilteringMode="DataGridFilteringMode.Contains"
                ValueChanged="@((OptionListHeaderModel Value) => ListCode_ValueChanged(Value))"
                TextFieldName="@nameof(OptionListHeaderModel.ListName)">
    </DxComboBox>
</div>
<br />
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@DetailData"
                EditMode="DataGridEditMode.PopupEditForm"
                PageSize="18"
                ShowFilterRow="true"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))"
                RowInsertStart="@(() => OnRowEditStarting(null))"
                PopupEditFormHeaderText="@PopupEditFormHeaderText">
        <Columns>
            <DxDataGridColumn Field="@nameof(OptionListModel.ItemName)"
                              Caption="Tên hạng mục"
                              Width="20rem" />
            <DxDataGridColumn Field="@nameof(OptionListModel.ItemCode)"
                              Caption="Trị (chữ)"
                              Width="10rem" />
            <DxDataGridSpinEditColumn Field="@nameof(OptionListModel.IntCode)"
                                      Caption="Trị (số nguyên)"
                                      DisplayFormat="N0"
                                      Width="8rem" />
            <DxDataGridSpinEditColumn Field="@nameof(OptionListModel.DoubleCode)"
                                      Caption="Trị (số thập phân)"
                                      DisplayFormat="N2"
                                      Width="8rem" />
            <DxDataGridColumn Field="@nameof(OptionListModel.Description)"
                              Caption="Ghi chú"
                              Width="20rem" />
            <DxDataGridColumn Field="@nameof(OptionListModel.DspOrder)"
                              Caption="Thứ tự"
                              Width="8rem" />
            <DxDataGridDateEditColumn Field="@nameof(OptionListModel.ModifiedOn)"
                                      Caption="Ngày giờ cập nhật"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="12rem" />
            <!--Command columns-->
            <MyGridCommand Grid="grid"
                           ShowAddnew="true"
                           ShowEdit="true"
                           ShowDelete="true"
                           OnRowRemoving="@((context) => OnRowRemoving(context as OptionListModel))" />
        </Columns>
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Tên hạng mục: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.ItemName" />
                            <ValidationMessage For="@(() => EditContext.ItemName)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Trị (chữ): " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.ItemCode" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Trị (số nguyên): " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxMaskedInput @bind-Value="@EditContext.IntCode"
                                           Mask="N0" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Trị (số thập phân): " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxMaskedInput @bind-Value="@EditContext.DoubleCode"
                                           Mask="N2" />
                        </Template>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Ghi chú: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Description" />
                            <ValidationMessage For="@(() => EditContext.Description)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Thứ tự: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.DspOrder" />
                            <ValidationMessage For="@(() => EditContext.DspOrder)" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--OK Cancel-->
                    <MyGridEditFormOKCancel OnCancelClick="OnCancelEditRow" />
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
    </DxDataGrid>
</div>

<MessageBox Title="@Program.ProgramName" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

@code {
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    FormEditContext EditContext = null;
    // ListCode
    private readonly List<OptionListHeaderModel> ListCodeData = new List<OptionListHeaderModel>();
    // Detail data
    readonly ObservableCollection<OptionListModel> DetailData = new ObservableCollection<OptionListModel>();
    // Popup
    private string ConfirmMessage = "";
    private string ConfirmAction = "";
    private bool ConfirmVisible = false;
    private string PopupEditFormHeaderText = "";
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
    }

    #region Load data
    async Task LoadMaster()
    {
        //GetOptionListHeader
        await Load_OptionListHeader();

        //...
    }

    async Task Load_OptionListHeader()
    {
        try
        {
            var request = new Empty_Request()
                {
                    Credential = new UserCredential()
                    {
                        Username = WebUserCredential.Username,
                        RoleID = WebUserCredential.RoleID,
                        AccessToken = WebUserCredential.AccessToken,
                        ApiKey = WebUserCredential.ApiKey
                    }
                };
            ListCodeData.Clear();
            var response = await adminServiceClient.GetOptionListHeaderAsync(request);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.OptionListHeader)
                {
                    OptionListHeaderModel dataRow = new OptionListHeaderModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //
                    ListCodeData.Add(dataRow);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
        }
    }

    async void DisplayMain()
    {
        try
        {
            //Filter
            var requestString = new String_Request()
                {
                    Credential = new UserCredential()
                    {
                        Username = WebUserCredential.Username,
                        RoleID = WebUserCredential.RoleID,
                        AccessToken = WebUserCredential.AccessToken,
                        ApiKey = WebUserCredential.ApiKey
                    },
                    StringValue = SelectedListCode
                };

            //Get data from DB
            DetailData.Clear();
            var response = await adminServiceClient.GetOptionListAsync(requestString);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.OptionList)
                {
                    OptionListModel dataRow = new OptionListModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd modeB
                    dataRow.UpdMode = 0;
                    //
                    DetailData.Add(dataRow);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
        }
    }
    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }

    //Save Row
    async Task<bool> SaveRow(OptionListModel saveRow)
    {
        try
        {
            //Request
            var request = new SaveOptionList_Request();
            var Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            // Convert to DB row
            request.Record = new grpcOptionList();
            ClassHelper.CopyPropertiesDataDateConverted(saveRow, request.Record);
            // Call api
            var response = await adminServiceClient.SaveOptionListAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", MyMessage.Error_SaveFailed);
            }
            else
            {
                //Update ID
                saveRow.ID = response.StringValue;
            }
            //OK
            return true;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_SaveFailed);
        }
        //
        return false;
    }

    #endregion

    #region Grid main
    //Confirm delete
    OptionListModel DeletedRow = null;
    void OnRowRemoving(OptionListModel dataRow)
    {
        DeletedRow = dataRow;

        //Show popup confirm
        ConfirmMessage = "Xóa dòng dữ liệu?";
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }

    //Cancel edit
    async Task OnCancelEditRow()
    {
        await grid.CancelRowEdit();
        EditContext = null;
    }

    async void DeleteRow()
    {
        // Mark to delete on grid
        DeletedRow.UpdMode = 3;

        var saveResult = await SaveRow(DeletedRow);

        // Refresh layout
        if (saveResult)
        {
            await grid.Refresh();
        }
    }
    //Update row
    async Task UpdateRow()
    {
        // Update for edit field
        EditContext.EditingRow.ListCode = SelectedListCode;
        EditContext.EditingRow.ItemCode = EditContext.ItemCode;
        EditContext.EditingRow.IntCode = EditContext.IntCode;
        EditContext.EditingRow.DoubleCode = EditContext.DoubleCode;
        EditContext.EditingRow.ItemName = EditContext.ItemName;
        EditContext.EditingRow.DspOrder = EditContext.DspOrder;
        EditContext.EditingRow.Description = EditContext.Description;
        EditContext.EditingRow.ModifiedOn = DateTime.Now;

        // Insert
        if (EditContext.UpdMode == 1)
        {
            EditContext.EditingRow.UpdMode = 1;
            DetailData.Add(EditContext.EditingRow);
        }
        else
        {
            //Update or update to restore delete record
            EditContext.EditingRow.UpdMode = 2;
        }

        //Save row to DB
        var saveResult = await SaveRow(EditContext.EditingRow);
        if (saveResult)
        {
            // Close popup & refresh data
            await grid.CancelRowEdit();
            await grid.Refresh();
        }
    }
    // Edit row model
    DxDataGrid<OptionListModel> grid;
    class FormEditContext : OptionListModel
    {
        public FormEditContext(OptionListModel targetRow, int updMode)
        {
            //Backup editting row
            EditingRow = targetRow;

            //UpdMode
            UpdMode = updMode;

            //Edit context -> Editable data only
            ListCode = EditingRow.ListCode;
            ItemCode = EditingRow.ItemCode;
            IntCode = EditingRow.IntCode;
            DoubleCode = EditingRow.DoubleCode;
            ItemName = EditingRow.ItemName;
            DspOrder = EditingRow.DspOrder;
            Description = EditingRow.Description;
        }
        public OptionListModel EditingRow { get; set; }
    }

    //Get data for edit/insert
    async void OnRowEditStarting(OptionListModel editingRow)
    {
        if (SelectedListCode == "")
        {
            await grid.CancelRowEdit();
            toastService.ShowWarning("", "Chọn hạng mục trước");
        }

        // Insert row
        if (editingRow == null)
        {
            PopupEditFormHeaderText = "Tạo mới";
            editingRow = new OptionListModel();
            editingRow.UpdMode = -1;
            //Init row here
            editingRow.CreatedOn = DateTime.Now;
            editingRow.ModifiedOn = DateTime.Now;
            //
            EditContext = new FormEditContext(editingRow, 1);
        }
        else
        {
            //Update row
            PopupEditFormHeaderText = "Cập nhật";
            editingRow.UpdMode = 2;
            EditContext = new FormEditContext(editingRow, 2);
        }
        this.StateHasChanged();
    }

    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<OptionListModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += myColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }
    #endregion

    #region Screen items
    // Select ListCode
    string SelectedListCode = "";
    string SelectedListName = "";
    void ListCode_ValueChanged(OptionListHeaderModel item)
    {
        SelectedListCode = "";
        if (item != null)
        {
            SelectedListCode = item.ListCode ?? "";
            SelectedListName = item.ListName ?? "";
        }
        //Display data
        DisplayMain();
    }
    #endregion
    //
}