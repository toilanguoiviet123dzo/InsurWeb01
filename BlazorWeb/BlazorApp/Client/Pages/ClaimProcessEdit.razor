@using System.ComponentModel.DataAnnotations;
@using Admin.Services
@using Claim.Services
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject VoucherService voucherService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<!--Thông tin chung-->
<MyCard Title="Thông tin chung">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Số tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ClaimNo"
                                ReadOnly="true"
                                Literal="Số tiếp nhận"
                                Width="8rem"
                                InputCssClass="text-blue font-weight-bold" />
                </div>

                <!--Ngày tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.ClaimDate"
                                    Literal="Ngày tiếp nhận"
                                    ReadOnly="true"
                                    InputCssClass="text-blue" />
                </div>
                <!--Người tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ClaimAccountName"
                                ReadOnly="true"
                                Literal="Người tiếp nhận" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Phone-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit Text="@Model.CusPhone"
                                TextChanged="@((string x) => OnTextChanged_Phone(x))"
                                Literal="Điện thoại liên hệ"
                                InputCssClass="text-blue font-weight-bold"
                                ReadOnly="true"
                                CssClass="cusphone-focus" />
                </div>
                <!--Tên khách hàng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusFullname"
                                Literal="Tên khách hàng"
                                ReadOnly="true"
                                CssClass="cusfullname-focus" />
                </div>
                <!--Email-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusEmail"
                                ReadOnly="true"
                                Literal="Email" />
                </div>
                <!--Số CMND/CCCD-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusCardID"
                                ReadOnly="true"
                                Literal="Số CMND/CCCD" />
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row">
                <!--Loại sản phẩm-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.TPAProductName"
                                Literal="Loại sản phẩm"
                                ReadOnly="true" />
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceIMEI"
                                Literal="Số IMEI thiết bị"
                                ReadOnly="true"
                                InputCssClass="text-purple font-weight-bold" />
                </div>
                <!--Model-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceModel"
                                ReadOnly="true"
                                Literal="Model" />
                </div>
                <!--Mức độ ưu tiên-->
                <div class="col-12 col-lg-3">
                    <MyComboBox @ref="RefPriority"
                                @bind-Value="SelectedPriority"
                                Data="PriorityList"
                                AllowUserInput="true"
                                ReadOnly="true"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.Priority = selectedRow.IntCode;
                                                   PriorityCss = "";
                                                   if (Model.Priority == 2) PriorityCss = "bg-warning";
                                                   if (Model.Priority == 3) PriorityCss = "bg-danger";
                                                   this.StateHasChanged();
                                             })"
                                InputCssClass="@PriorityCss"
                                Literal="Mức độ ưu tiên" />
                </div>
            </div>

            <!--Row 4-------------------------------------------------->
            <div class="row">
                <!--Địa chỉ nhận thiết bị-->
                <div class="col-12 col-lg-6">
                    <MyTextEdit @bind-Text="Model.PickupAddress"
                                Literal="Địa chỉ nhận thiết bị"
                                ReadOnly="true"
                                CssClass="pickupaddress-focus" />
                </div>
                <!--Địa chỉ trả thiết bị-->
                <div class="col-12 col-lg-6">
                    <MyTextEdit @bind-Text="Model.ReturnAddress"
                                ReadOnly="true"
                                Literal="Địa chỉ trả thiết bị" />
                </div>
            </div>
        </div>
    </CardBody>
</MyCard>

<!--Thông tin hư hỏng-->
<MyCard @bind-IsCollapse="@DamageInfoCollapse" Title="Thông tin hư hỏng">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Ngày KH thông báo-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.NotificationDate"
                                    Literal="Ngày KH thông báo"
                                    ReadOnly="true"
                                    InputCssClass="text-green" />
                </div>
                <!--Ngày sự cố-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.IncidentDate"
                                    Literal="Ngày sự cố"
                                    ReadOnly="true"
                                    InputCssClass="text-maroon" />
                </div>
                <!--Kênh thông báo-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.NotificationChannelName"
                                ReadOnly="true"
                                Literal="Kênh thông báo" />
                </div>
                <!--Loại hư hỏng-->
                <div class="col-12 col-lg-3">
                    <MyComboBox @ref="RefDamageType"
                                @bind-Value="SelectedDamageCause"
                                Data="DamageCauseList"
                                AllowUserInput="true"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.DamageType = selectedRow.ItemCode;
                                             })"
                                Literal="Loại hư hỏng" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Nguyên nhân hư hỏng-->
                <div class="col-12 col-lg-7">
                    <MyMemoEdit @ref="RefDamageCause"
                                @bind-Text="Model.DamageCause"
                                Rows="5"
                                ReadOnly="true"
                                Literal="Nguyên nhân hư hỏng" />
                </div>
                <!--Ghi chú-->
                <div class="col-12 col-lg-5">
                    <MyMemoEdit @bind-Text="Model.AcceptNotes"
                                Rows="5"
                                ReadOnly="true"
                                Literal="Ghi chú" />
                </div>
            </div>
        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông tin hợp đồng-->
<MyCard @bind-IsCollapse="@InsureInfoCollapse" Title="Thông tin hợp đồng">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Công ty bảo hiểm-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.InsurCompanyName"
                                ReadOnly="true"
                                Literal="Công ty bảo hiểm" />
                </div>
                <!--Số hợp đồng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit Text="@Model.InsurContractNo"
                                TextChanged="@((string x) => OnInsurContractNo_Changed(x))"
                                Literal="Số hợp đồng"
                                ReadOnly="true"
                                InputCssClass="text-blue font-weight-bold" />
                </div>
                <!--Từ ngày-->
                <div class="col-6 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.InsurStartDate"
                                    Literal="Từ ngày"
                                    ReadOnly="true"
                                    InputCssClass="text-green" />
                </div>
                <!--Đến ngày-->
                <div class="col-6 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.InsurEndDate"
                                    Literal="Đến ngày"
                                    ReadOnly="true"
                                    InputCssClass="text-maroon" />
                </div>
            </div>
            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Chi nhánh bồi thường-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.BrancheName"
                                ReadOnly="true"
                                Literal="Chi nhánh bồi thường" />
                </div>
                <!--Số tiền bảo hiểm-->
                <div class="col-12 col-lg-2">
                    <MyNumEdit @bind-Value="Model.InsurAmount"
                               Mask="N0"
                               ReadOnly="true"
                               InputCssClass="text-blue font-weight-bold"
                               Literal="Số tiền bảo hiểm" />
                </div>
            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông tin nhận thiết bị-->
<MyCard @bind-IsCollapse="@PickupInfoCollapse" Title="Thông tin nhận thiết bị">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Công ty vận chuyển-->
                <div class="col-12 col-lg-3">
                    <MyComboBox @ref="RefLogistic"
                                @bind-Value="SelectedLogistic"
                                Data="LogisticList"
                                AllowUserInput="true"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.PickupCompanyID = selectedRow.ItemCode;
                                                   Model.PickupCompanyName = selectedRow.ItemName;
                                             })"
                                Literal="Công ty vận chuyển" />
                </div>
                <!--Ngày yêu cầu lấy-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.PickupReqDate"
                                    Literal="Ngày yêu cầu lấy"
                                    ReadOnly="true"
                                    InputCssClass="text-green" />
                </div>
                <!--Ngày lấy thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.PickupDoneDate1"
                                    Literal="Ngày lấy thiết bị"
                                    ReadOnly="true"
                                    InputCssClass="text-blue" />
                </div>
                <!--Ngày nhập thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.PickupDoneDate1"
                                    Literal="Ngày nhập thiết bị"
                                    ReadOnly="true"
                                    InputCssClass="text-maroon" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row mt-2">
                <!--Check: yêu cầu lấy thiết bị-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.PickupReqStatus"
                                CssClass="text-green"
                                Enabled="@(!Model.PickupStatus1)">
                        Yêu cầu lấy thiết bị
                    </DxCheckBox>
                </div>
                <!--Check: đã lấy thiết bị-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.PickupStatus1"
                                CssClass="text-blue"
                                Enabled="false">
                        Đã lấy thiết bị
                    </DxCheckBox>
                </div>

                <!--Check: đã nhập thiết bị-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.PickupStatus2"
                                CssClass="text-maroon"
                                Enabled="false">
                        Đã nhập thiết bị
                    </DxCheckBox>
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row mt-1">
                <!--Ghi nhận thiết bị-->
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.PickupNotes"
                                Rows="3"
                                ReadOnly="true"
                                Literal="Ghi chú nhận thiết bị" />
                </div>
            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Thông tin kiểm tra-->
<MyCard @bind-IsCollapse="@CheckInfoCollapse" Title="Thông tin kiểm tra">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Ngày yêu cầu lấy-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.PickupReqDate"
                                    Literal="Ngày yêu cầu lấy"
                                    ReadOnly="true"
                                    InputCssClass="text-green" />
                </div>
                <!--Ngày lấy thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.PickupDoneDate1"
                                    Literal="Ngày lấy thiết bị"
                                    ReadOnly="true"
                                    InputCssClass="text-blue" />
                </div>
                <!--Người kiểm tra-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.PicAccountName"
                                ReadOnly="true"
                                Literal="Người phụ trách" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Ghi chú kiểm tra-->
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.CheckNotes"
                                Rows="5"
                                Literal="Ghi chú kiểm tra" />
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row mt-2">
                <!--Check: kiểm tra-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox @bind-Checked="@Model.CheckStatus" CssClass="text-green">Đã kiểm tra</DxCheckBox>
                </div>
                <!--Check: chấp nhận bồi thường-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox Checked="@Model.AcceptStatus"
                                CssClass="text-blue"
                                CheckedChanged="@((bool value) => {
                                    Model.AcceptStatus = value;
                                    if (value) Model.CancelStatus = false;
                                })"
                                Enabled="@Model.CheckStatus">Chấp nhận bồi thường</DxCheckBox>
                </div>
                <!--Check: Từ chối yêu cầu-->
                <div class="col-12 col-lg-3">
                    <DxCheckBox Checked="@Model.CancelStatus"
                                CheckedChanged="@((bool value) => {
                                    Model.CancelStatus = value;
                                    if (value) Model.AcceptStatus = false;
                                })"
                                CssClass="text-red">Từ chối yêu cầu</DxCheckBox>
                </div>

            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--OK, Cancel-->
<div class="container-fluid">
    <div class="row justify-content-center mt-2">
        <MyButtonSave OnClick="SaveMain" />
        <MyButtonCancel OnClick="CloseMain" />
    </div>
</div>

@code {
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    //Parameters and events
    [Parameter]
    public string ClaimNo { get; set; } = "";
    [Parameter]
    public EventCallback OnValidSumit { get; set; }
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private async Task OnVisibleChanged(bool newValue)
    {
        await VisibleChanged.InvokeAsync(newValue);
    }
    private ClaimRequestModel Model = new ClaimRequestModel();

    //Master
    private List<OptionListModel> DamageCauseList = new List<OptionListModel>();
    private List<OptionListModel> PriorityList = new List<OptionListModel>();
    private List<OptionListModel> LogisticList = new List<OptionListModel>();
    //Selected combo value
    private OptionListModel SelectedDamageCause = null;
    private OptionListModel SelectedPriority = null;
    private OptionListModel SelectedLogistic = null;
    //Ref
    private MyComboBox<OptionListModel> RefDamageType;
    private MyComboBox<OptionListModel> RefPriority;
    private MyComboBox<OptionListModel> RefLogistic;
    MyMemoEdit RefDamageCause;
    //Css
    private string PriorityCss = "";
    private bool DamageInfoCollapse = true;
    private bool InsureInfoCollapse = true;
    private bool PickupInfoCollapse = true;
    private bool CheckInfoCollapse = true;

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        if (!string.IsNullOrWhiteSpace(ClaimNo))
        {
            await DisplayMain();
        }
    }
    //
    async Task LoadMaster()
    {
        DamageCauseList = await masterService.Load_OptionList("005");
        PriorityList = await masterService.Load_OptionList("007");
        LogisticList = await masterService.Load_OptionList("009");
    }
    //
    #endregion

    #region MainForm
    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Claim.Services.String_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.StringValue = ClaimNo;
            //Call api
            var response = await ClaimServiceClient.GetClaimRequestAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Show success
                ClassHelper.CopyPropertiesDataDateConverted(response.ClaimRequest, Model);
                //DamageCause
                if (!string.IsNullOrWhiteSpace(Model.DamageType)) SelectedDamageCause = DamageCauseList.Find(x => x.ItemCode == Model.DamageType);
                //SelectedLogistic
                if (!string.IsNullOrWhiteSpace(Model.PickupCompanyID)) SelectedLogistic = LogisticList.Find(x => x.ItemCode == Model.PickupCompanyID);
                //Priority
                SelectedPriority = PriorityList.Find(x => x.IntCode == Model.Priority);

                //CSS
                PriorityCss = "";
                if (Model.Priority == 2) PriorityCss = "bg-warning";
                if (Model.Priority == 3) PriorityCss = "bg-danger";
                //
                Model.UpdMode = 2;
            }

            //show pickup
            if (!Model.PickupStatus2)
            {
                PickupInfoCollapse = false;
            }

            //show check
            if (Model.PickupStatus2)
            {
                CheckInfoCollapse = false;
            }

            //Refresh layout
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
        }
    }

    bool ValidateForm()
    {
        //Skip
        if (Model.ApproveStatus)
        {
            toastService.ShowWarning("", MyMessage.Error_DataReadOnly);
            return false;
        }
        //Loại hư hỏng
        if (string.IsNullOrWhiteSpace(Model.DamageType))
        {
            toastService.ShowWarning("Loại hư hỏng", "Bắt buột nhập.");
            RefDamageType.Focus();
            return false;
        }
        //RefLogistic
        if (string.IsNullOrWhiteSpace(Model.PickupCompanyID))
        {
            toastService.ShowWarning("Công ty vận chuyển", "Bắt buột nhập.");
            RefLogistic.Focus();
            return false;
        }
        //
        return true;
    }

    async void SaveMain()
    {
        try
        {
            //Validate input data
            var validateRes = ValidateForm();
            if (!validateRes) return;

            //Request
            var request = new SaveClaimRequest_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.ClaimRequest = new grpcClaimRequestModel();
            //Clear AcceptStatus
            if (!Model.CheckStatus || Model.CancelStatus)
            {
                Model.AcceptStatus = false;
            }
            //PickupReqDate
            if (Model.PickupReqStatus && Model.PickupReqDate == DateTime.Today.MinDate())
            {
                Model.PickupReqDate = DateTime.Now;
            }
            //Clear PickupReqDate
            if (!Model.PickupReqStatus)
            {
                Model.PickupReqDate = DateTime.Today.MinDate();
            }
            //PicAccountID
            if (string.IsNullOrWhiteSpace(Model.PicAccountID))
            {
                Model.PicAccountID = WebUserCredential.Username;
                Model.PicAccountName = WebUserCredential.Fullname;
                Model.PicPhone = WebUserCredential.PhoneNo;
            }
            //CancelStatus -> Reset: AcceptStatus
            if (Model.CancelStatus)
            {
                Model.AcceptStatus = false;
            }
            //
            ClassHelper.CopyPropertiesDataDateConverted(Model, request.ClaimRequest);
            //Call api
            var response = await ClaimServiceClient.SaveClaimRequestAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", MyMessage.Error_SaveFailed);
            }

            //Reload data
            await OnValidSumit.InvokeAsync();
            await CloseMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_SaveFailed);
        }
    }
    async Task CloseMain()
    {
        await OnVisibleChanged(false);
    }
    #endregion

    #region Items
    async void OnTextChanged_Phone(string cusPhone)
    {
        try
        {
            Model.CusPhone = cusPhone;
            //Request
            var request = new Claim.Services.String_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.StringValue = cusPhone;
            //Call api
            var response = await ClaimServiceClient.GetCustomerInfoAsync(request);
            // Success
            if (response != null || response.ReturnCode == GrpcReturnCode.OK)
            {
                Model.CusEmail = response.CusEmail;
                Model.CusFullname = response.CusFullname;
                Model.CusCardID = response.CusCardID;
                Model.PickupAddress = response.PickupAddress;
                //
                this.StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_NoNetwork);
        }
    }

    // Get contract info
    void OnInsurContractNo_Changed(string insurContractNo)
    {
        Model.InsurContractNo = insurContractNo;
        Get_InsureContraction(Model.InsurContractNo, Model.InsurCompanyID);
    }
    void OnInsurCompanyID_Changed(string insurCompanyID)
    {
        Model.InsurCompanyID = insurCompanyID;
        Get_InsureContraction(Model.InsurContractNo, Model.InsurCompanyID);
    }
    async void Get_InsureContraction(string insurContractNo, string insurCompanyID)
    {
        try
        {
            //validate
            if (string.IsNullOrWhiteSpace(insurContractNo) || string.IsNullOrWhiteSpace(insurCompanyID)) return;

            //Request
            var request = new Claim.Services.GetInsureContract_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.InsurCompanyID = insurCompanyID;
            request.InsurContractNo = insurContractNo;
            //Call api
            var response = await ClaimServiceClient.GetInsureContractAsync(request);
            // Success
            if (response != null || response.ReturnCode == GrpcReturnCode.OK)
            {
                Model.InsurStartDate = response.InsurStartDate.ToLocalDateFromTimestamp();
                Model.InsurEndDate = response.InsurEndDate.ToLocalDateFromTimestamp();
                Model.InsurAmount = response.InsurAmount;
                //
                this.StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_NoNetwork);
        }
    }
    //


    #endregion


}
