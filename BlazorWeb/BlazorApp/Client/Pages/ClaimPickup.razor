@page "/ClaimPickup"
@using Admin.Services
@using Claim.Services
@using Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService
@using System.Collections.Concurrent
@using System.Threading

<!--Filter-->
<MyCard Title="Bộ lọc dữ liệu">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row align-items-end">
                <!--Thời gian-->
                <div class="col-12 col-lg-4">
                    <div class="row">
                        <!--Time flag-->
                        <div class="col-12 col-lg-4">
                            <MyComboBox @bind-Value="Filter_TimeFlag"
                                        Data="TimeFlagList"
                                        TextFieldName="@(nameof(CodeNameModel.Name))"
                                        AllowUserInput="true"
                                        SelectedItemChanged="@((CodeNameModel selectedItem) =>
                                                       {
                                                            var timeRange = MyDateTimeSelector.Select_DateTimeRange1(selectedItem);
                                                            Filter_StartDate = timeRange.StartDate;
                                                            Filter_EndDate = timeRange.EndDate;
                                                            this.StateHasChanged();
                                                       })"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        Literal="Thời gian" />
                        </div>
                        <!--Start-->
                        <div class="col-6 col-lg-4">
                            <MyDateEdit @bind-Date="Filter_StartDate"
                                        Format="dd/MM/yyyy"
                                        Width="100%"
                                        Literal="Từ ngày" />
                        </div>
                        <!--End-->
                        <div class="col-6 col-lg-4">
                            <MyDateEdit @bind-Date="Filter_EndDate"
                                        Format="dd/MM/yyyy"
                                        Width="100%"
                                        Literal="Đến ngày" />
                        </div>
                    </div>
                </div>
                <!--Trạng thái-->
                <div class="col-12 col-lg-2 pr-lg-3">
                    <div class="row align-items-end">
                        <div class="col-8">
                            <MyComboBox @bind-Value="Filter_Status"
                                        Data="StatusList"
                                        TextFieldName="@(nameof(CodeNameModel.Name))"
                                        AllowUserInput="true"
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        Literal="Trạng thái" />
                        </div>
                        <div class="col-4">
                            <!--Check Chưa/Xong-->
                            <DxCheckBox Checked="@StatusCheck"
                                        CheckedChanged="@((bool newValue) => {
                                                      StatusCheck = newValue;
                                                      CheckName = newValue? "Xong" : "Chưa";
                                                  })">
                                <label> @CheckName </label>
                            </DxCheckBox>
                        </div>
                    </div>
                </div>
                <!--Search buttion-->
                <div class="col-12 col-lg-2 mt-2">
                    <MyButtonSearch OnClick="@(() => DisplayMain())" />
                </div>

            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Grid-->
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@DetailData"
                ColumnResizeMode="DataGridColumnResizeMode.Component"
                SelectionMode="DataGridSelectionMode.SingleSelectedDataRow"
                PageSize="@PageRowCount"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HtmlDataCellDecoration="@OnHtmlDataCellDecoration">
        <Columns>
            <!--Command columns-->
            <DxDataGridCommandColumn Width="3rem" VisibleIndex="0">
                <HeaderCellTemplate>
                </HeaderCellTemplate>
                <CellTemplate>
                    <div style="display:flex;justify-content:center">
                        @if (((ClaimRequestListModel)context).CheckStatus)
                        {
                            <!--View-->
                            <div class="text-center" style="width:3rem">
                                <a class="fas fa-eye fa-2x" @onclick="@(() => OnRowEditStarting(context as ClaimRequestListModel))"></a>
                            </div>
                        }
                        else
                        {
                            <!--Edit-->
                            <div class="text-center" style="width:2.5rem">
                                <a class="fa fa-pencil fa-2x" @onclick="@(() => OnRowEditStarting(context as ClaimRequestListModel))"></a>
                            </div>
                        }
                    </div>
                </CellTemplate>
            </DxDataGridCommandColumn>
            <!--columns-->
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.DeviceModel)"
                              Caption="Model thiết bị"
                              Width="8rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.PickupAddress)"
                              Caption="Địa chỉ lấy thiết bị"
                              Width="15rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.CusFullname)"
                              Caption="Tên khách hàng"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.CusPhone)"
                              Caption="Điện thoại"
                              Width="6rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.StatusName)"
                              Caption="Trạng thái"
                              Width="7rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.ClaimNo)"
                              Caption="Số tiếp nhận"
                              SortOrder="DataGridColumnSortOrder.Descending"
                              Width="6rem" />
            <DxDataGridDateEditColumn Field="@nameof(ClaimRequestListModel.PickupReqDate)"
                                      Caption="Ngày yêu cầu"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="9rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.BrancheName)"
                              Caption="Trung tâm bồi thường"
                              Width="7rem" />
        </Columns>
    </DxDataGrid>
</div>
<!--Confirm dialog-->
<MessageBox Title="@Program.ProgramName" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

<!--Edit compen request-->
<MyPopup @ref="@ClaimPopup"
         VerticalAlignment="@VerticalAlignment.Top"
         HeaderText="Cập nhật lấy thiết bị"
         Width="1000px"
         ZIndex="1001">
    <BodyContentTemplate>
        <ClaimPickupEdit ClaimNo="@ClaimNo"
                         MyForm="@ClaimPopup"
                         OnValidSumit="@(async() => await DisplayMain())" />
    </BodyContentTemplate>
</MyPopup>


@code {
    //Program
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }

    // Detail data
    private int PageRowCount = MyConstant.Grid_PageRowCount;
    DxDataGrid<ClaimRequestListModel> grid;
    readonly ObservableCollection<ClaimRequestListModel> DetailData = new ObservableCollection<ClaimRequestListModel>();

    // Master
    private List<CodeNameModel> StatusList = MyClaimStatus.Get_PickupStatusList();
    private List<CodeNameModel> TimeFlagList = MyDateTimeSelector.Get_TimeRangeList();
    // Popup
    private MyPopup ClaimPopup;
    private string ConfirmMessage = "";
    private int ConfirmAction = 0;
    private bool ConfirmVisible = false;

    //Filter
    private CodeNameModel Filter_Status { get; set; } = new CodeNameModel { CodeInt = 3, Name = "Nhập hàng" };
    private CodeNameModel Filter_TimeFlag { get; set; }
    private DateTime Filter_StartDate { get; set; } = DateTime.Today.MinDate().ToLocalTime();
    private DateTime Filter_EndDate { get; set; } = DateTime.Today.MaxDate().ToLocalTime();
    //
    private string ClaimNo = "";
    private bool StatusCheck = false;
    private string CheckName = "Chưa";
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Display data ..
        await DisplayMain();
    }
    #region Load data
    //
    async Task DisplayMain()
    {
        try
        {
            //Filter
            var request = new Claim.Services.GetPickupList_Request();
            request.Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            //PickupCompanyID
            request.PickupCompanyID = WebUserCredential.LogisticCompanyID;
            //Status
            if (Filter_Status != null && Filter_Status.CodeInt != 0) request.Status = Filter_Status.CodeInt;
            //Status check
            request.StatusCheck = StatusCheck;
            //Time range
            request.StartDate = Filter_StartDate.ToTimestampFromLocalTime();
            request.EndDate = Filter_EndDate.ToTimestampFromLocalTime();
            //
            var response = await ClaimServiceClient.GetPickupListAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                if (response.ClaimRequests != null)
                {
                    //Get data from DB
                    DetailData.Clear();
                    //
                    foreach (var item in response.ClaimRequests)
                    {
                        //Parrent grid
                        var dataRow = new ClaimRequestListModel();
                        ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                        //Status name
                        dataRow.StatusName = MyClaimStatus.Get_PickupStatusName(dataRow);
                        //
                        DetailData.Add(dataRow);
                    }
                }
            }
            if (DetailData.Count == 0)
            {
                toastService.ShowInfo("", MyMessage.Error_NoData);
            }
            await grid.Refresh();
        }
        catch
        {
            toastService.ShowError("", MyMessage.Error_LoadDataFailed);
        }
    }

    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == MyConstant.ConfirmAction_DeleteRow)
        {
            //DeleteRow();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }
    //
    #endregion

    #region Grid main
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<ClaimRequestListModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        //CloseStatus
        if (eventArgs.DataItem.CloseStatus) eventArgs.Style += myColor.DoneRowColor;
    }
    void OnHtmlDataCellDecoration(DataGridHtmlDataCellDecorationEventArgs<ClaimRequestListModel> eventArgs)
    {
        eventArgs.CssClass += " border-0";
        //eventArgs.Style += " ;font-weight:bold;text-align: right";
        //ClaimNo
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.ClaimNo))
        {
            eventArgs.Style += " ;font-weight:bold; color: blue";
        }
        //PickupReqDate
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.PickupReqDate))
        {
            eventArgs.Style += " ;color: green";
        }
        //StatusName
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.StatusName))
        {
            eventArgs.Style += " ;color: blue";
        }
    }

    //Cancel edit
    async Task OnCancelButtonClick()
    {
        await grid.CancelRowEdit();
    }

    //Get data for edit/insert
    void OnRowEditStarting(ClaimRequestListModel editingRow)
    {
        if (editingRow == null)
        {
            //Addnew
            ClaimNo = "";
        }
        else
        {
            //ClaimNo
            ClaimNo = editingRow.ClaimNo;
        }
        ClaimPopup.Show();
    }
    //Update row
    async Task UpdateRow()
    {
        //Close popup & refresh data
        await grid.CancelRowEdit();
        await grid.Refresh();
    }

    #endregion

}
