@using System.ComponentModel.DataAnnotations;
@using Admin.Services
@using Claim.Services
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject VoucherService voucherService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService


<!--Thong tin khach hang-->
<div class="card">
    <h5 class="card-header">Thông tin chung</h5>
    <div class="card-body">
        <div class="container">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Số tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ClaimNo"
                                ReadOnly="true"
                                Literal="Số tiếp nhận"
                                InputCssClass="text-blue font-weight-bold" />
                </div>
                <!--Ngày tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.ClaimDate"
                                    Literal="Ngày tiếp nhận"
                                    InputCssClass="text-blue" />
                </div>
                <!--Người tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ClaimAccountName"
                                ReadOnly="true"
                                Literal="Người tiếp nhận" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Phone-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusPhone"
                                Literal="Phone"
                                InputCssClass="text-blue font-weight-bold"
                                CssClass="cusphone-focus" />
                </div>
                <!--Tên khách hàng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusFullname"
                                Literal="Tên khách hàng"
                                CssClass="cusfullname-focus" />
                </div>
                <!--Email-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusPhone"
                                Literal="SEmail" />
                </div>
                <!--Số CMND/CCCD-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusCardID"
                                Literal="Số CMND/CCCD" />
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row">
                <!--Loại sản phẩm-->
                <div class="col-12 col-lg-3">
                    <MyMuteLabel Literal="Loại sản phẩm" />
                    <DxComboBox @ref="RefProduct"
                                @bind-Value="SelectedProduct"
                                Data="ProductList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.TPAProductID = selectedRow.ItemCode;
                                                   Model.TPAProductName = selectedRow.ItemName;
                                             })" />
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceIMEI"
                                Literal="Số IMEI thiết bị"
                                InputCssClass="text-purple font-weight-bold" />
                </div>
                <!--Model-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceModel"
                                Literal="Model" />
                </div>
            </div>

            <!--Row 4-------------------------------------------------->
            <div class="row">
                <!--Địa chỉ nhận thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.PickupAddress"
                                Literal="Địa chỉ nhận thiết bị"
                                CssClass="pickupaddress-focus" />
                </div>
                <!--Địa chỉ trả thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ReturnAddress"
                                Literal="Địa chỉ trả thiết bị" />
                </div>
            </div>
        </div>
    </div>
</div>

<!--Thông tin hư hỏng-->
<div class="card">
    <h5 class="card-header">Thông tin hư hỏng</h5>
    <div class="card-body">
        <div class="container">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Ngày KH thông báo-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.NotificationDate"
                                    Literal="Ngày KH thông báo"
                                    InputCssClass="text-green" />
                </div>
                <!--Ngày sự cố-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.IncidentDate"
                                    Literal="Ngày sự cố"
                                    InputCssClass="text-maroon" />
                </div>
                <!--Kênh thông báo-->
                <div class="col-12 col-lg-3">
                    <MyMuteLabel Literal="Kênh thông báo" />
                    <DxComboBox @ref="RefChannel"
                                @bind-Value="SelectedChannel"
                                Data="ChannelList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.NotificationChannel = selectedRow.ItemCode;
                                             })" />
                </div>
                <!--Loại hư hỏng-->
                <div class="col-12 col-lg-3">
                    <MyMuteLabel Literal="Loại hư hỏng" />
                    <DxComboBox @ref="RefDamageType"
                                @bind-Value="SelectedDamageCause"
                                Data="DamageCauseList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.DamageType = selectedRow.ItemCode;
                                             })" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Nguyên nhân hư hỏng-->
                <div class="col-12 col-lg-7">
                    <MyMemoEdit @bind-Text="Model.DamageCause"
                                Rows="8"
                                Literal="Nguyên nhân hư hỏng" />
                </div>
                <!--Ghi chú-->
                <div class="col-12 col-lg-5">
                    <MyMemoEdit @bind-Text="Model.AcceptNotes"
                                Rows="8"
                                Literal="Ghi chú" />
                </div>

            </div>
        </div><!--End container-->
    </div>
</div>

<!--Thông hợp đồng-->
<div class="card">
    <h5 class="card-header">Thông hợp đồng</h5>
    <div class="card-body">
        <div class="container">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Công ty bảo hiểm-->
                <div class="col-12 col-lg-3">
                    <MyMuteLabel Literal="Công ty bảo hiểm" />
                    <DxComboBox @ref="RefInsure"
                                @bind-Value="SelectedInsure"
                                Data="InsureList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.InsurCompanyID = selectedRow.ItemCode;
                                                   Model.InsurCompanyName = selectedRow.ItemName;
                                             })" />
                </div>
                <!--Số hợp đồng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.InsurContractNo"
                                Literal="Số hợp đồng"
                                InputCssClass="text-blue font-weight-bold" />
                </div>
                <!--Từ ngày-->
                <div class="col-12 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.InsurStartDate"
                                    Literal="Từ ngày"
                                    InputCssClass="text-green" />
                </div>
                <!--Đến ngày-->
                <div class="col-12 col-lg-2">
                    <MyDateTimeEdit @bind-Date="Model.InsurEndDate"
                                    Literal="Đến ngày"
                                    InputCssClass="text-maroon" />
                </div>
                <!--Số tiền bảo hiểm-->
                <div class="col-12 col-lg-2">
                    <MyNumEdit @bind-Value="Model.InsurAmount"
                               Mask="N0"
                               ReadOnly="true"
                               InputCssClass="text-blue font-weight-bold"
                               Literal="Số tiền bảo hiểm" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Chi nhánh bồi thường-->
                <div class="col-12 col-lg-3">
                    <MyMuteLabel Literal="Chi nhánh bồi thường" />
                    <DxComboBox @ref="RefBranch"
                                @bind-Value="SelectedBranch"
                                Data="BranchList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(BranchMasterModel.BranchName))"
                                SelectedItemChanged="@((BranchMasterModel selectedRow) => {
                                                   Model.BrancheID = selectedRow.BranchID;
                                                   Model.BrancheName = selectedRow.BranchName;
                                             })" />
                </div>
                <!--Mức độ ưu tiên-->
                <div class="col-12 col-lg-3">
                    <MyMuteLabel Literal="Mức độ ưu tiên" />
                    <DxComboBox @ref="RefPriority"
                                @bind-Value="SelectedPriority"
                                Data="PriorityList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.Priority = selectedRow.IntCode;
                                             })" />
                </div>
            </div>

        </div><!--End container-->
    </div>
</div>

<!--OK, Cancel-->
<br />
<div class="row justify-content-center mt-2">
    <MyButtonSave OnClick="SaveMain" />
    <MyButtonCancel OnClick="CloseMain" />
</div>

@code {
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    //Parameters and events
    [Parameter]
    public string ClaimNo { get; set; } = "";
    [Parameter]
    public EventCallback OnValidSumit { get; set; }
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private async Task OnVisibleChanged(bool newValue)
    {
        await VisibleChanged.InvokeAsync(newValue);
    }
    private ClaimRequestModel Model = new ClaimRequestModel();
    //Master
    private List<OptionListModel> ProductList = new List<OptionListModel>();
    private List<OptionListModel> ChannelList = new List<OptionListModel>();
    private List<OptionListModel> DamageCauseList = new List<OptionListModel>();
    private List<OptionListModel> PriorityList = new List<OptionListModel>();
    private List<OptionListModel> InsureList = new List<OptionListModel>();
    private List<BranchMasterModel> BranchList = new List<BranchMasterModel>();
    //Selected combo value
    private OptionListModel SelectedProduct = new OptionListModel();
    private OptionListModel SelectedChannel = new OptionListModel();
    private OptionListModel SelectedDamageCause = new OptionListModel();
    private OptionListModel SelectedPriority = new OptionListModel();
    private OptionListModel SelectedInsure = new OptionListModel();
    private BranchMasterModel SelectedBranch = new BranchMasterModel();
    //Ref
    private DxComboBox<OptionListModel, OptionListModel> RefProduct;
    private DxComboBox<OptionListModel, OptionListModel> RefChannel;
    private DxComboBox<OptionListModel, OptionListModel> RefDamageType;
    private DxComboBox<OptionListModel, OptionListModel> RefPriority;
    private DxComboBox<OptionListModel, OptionListModel> RefInsure;
    private DxComboBox<BranchMasterModel, BranchMasterModel> RefBranch;
    DxMemo RefDamageCause;

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        if (string.IsNullOrWhiteSpace(ClaimNo))
        {
            await InitMain();
        }
        else
        {
            await DisplayMain();
        }
    }
    //
    async Task LoadMaster()
    {
        ProductList = await masterService.Load_OptionList("004");
        DamageCauseList = await masterService.Load_OptionList("005");
        ChannelList = await masterService.Load_OptionList("006");
        InsureList = await masterService.Load_OptionList("008");
        InsureList = await masterService.Load_OptionList("008");
        BranchList = await masterService.Load_BranchList();
    }
    async Task InitMain()
    {
        Model = new ClaimRequestModel();
        Model.UpdMode = 1;

        //ClaimNo
        Model.ClaimNo = await voucherService.Get_NewVoucherNo();
        //ClaimDate
        Model.ClaimDate = DateTime.Now;
        //ClaimAccount
        Model.ClaimAccountID = WebUserCredential.Username;
        Model.ClaimAccountName = WebUserCredential.Fullname;
        //TPAProduct
        if (ProductList != null && ProductList.Count > 0) SelectedProduct = ProductList[0];
        //NotificationDate
        Model.NotificationDate = DateTime.Now;
        //IncidentDate
        Model.IncidentDate = DateTime.Now;
        //AccidentDateTime
        Model.IncidentDate = DateTime.Now;
        //TPAProduct
        if (ChannelList != null && ChannelList.Count > 0) SelectedChannel = ChannelList[0];
        //DamageCause
        if (DamageCauseList != null && DamageCauseList.Count > 0) SelectedDamageCause = DamageCauseList[0];
        //Branch
        if (BranchList != null && BranchList.Count > 0) SelectedBranch = BranchList.Find(a => a.BranchID == WebUserCredential.BrancheID);
    }
    //
    #endregion

    #region MainForm
    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Claim.Services.String_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.StringValue = ClaimNo;
            //Call api
            var response = await ClaimServiceClient.GetClaimRequestAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Show success
                ClassHelper.CopyPropertiesDataDateConverted(response.ClaimRequest, Model);
                //TPAProduct
                if (!string.IsNullOrWhiteSpace(Model.TPAProductID)) SelectedProduct = ProductList.Find(x => x.ItemCode == Model.TPAProductID);
                //Notification channel
                if (!string.IsNullOrWhiteSpace(Model.NotificationChannel)) SelectedChannel = ChannelList.Find(x => x.ItemCode == Model.NotificationChannel);
                //DamageCause
                if (!string.IsNullOrWhiteSpace(Model.DamageType)) SelectedDamageCause = DamageCauseList.Find(x => x.ItemCode == Model.DamageType);
                //SelectedBranch
                if (!string.IsNullOrWhiteSpace(Model.InsurCompanyID)) SelectedInsure = InsureList.Find(x => x.ItemCode == Model.InsurCompanyID);
                //SelectedBranch
                if (!string.IsNullOrWhiteSpace(Model.BrancheID)) SelectedBranch = BranchList.Find(x => x.BranchID == Model.BrancheID);
                //Priority
                SelectedPriority = PriorityList.Find(x => x.IntCode == Model.Priority);
                //
                Model.UpdMode = 2;
            }
            else
            {
                await InitMain();
            }

            //Refresh layout
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
        }
    }

    async Task<bool> ValidateForm()
    {
        //Skip
        if (Model.AcceptStatus)
        {
            toastService.ShowWarning(MyMessage.Error_DataReadOnly);
            return false;
        }
        //Tên khách hàng
        if (string.IsNullOrWhiteSpace(Model.CusFullname))
        {
            toastService.ShowWarning("Tên khách hàng", "Bắt buột nhập.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "cusfullname-focus");
            return false;
        }
        //Phone
        if (string.IsNullOrWhiteSpace(Model.CusPhone))
        {
            toastService.ShowWarning("Phone", "Bắt buột nhập.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "cusphone-focus");
            return false;
        }
        //TPA Product
        if (string.IsNullOrWhiteSpace(Model.TPAProductID))
        {
            toastService.ShowWarning("Loại sản phẩm", "Bắt buột nhập.");
            await RefProduct.FocusAsync();
            return false;
        }
        //Địa chỉ nhận thiết bị
        if (string.IsNullOrWhiteSpace(Model.PickupAddress))
        {
            toastService.ShowWarning("Địa chỉ nhận thiết bị", "Bắt buột nhập.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "pickupaddress-focus");
            return false;
        }
        //Kênh thông báo
        if (string.IsNullOrWhiteSpace(Model.NotificationChannel))
        {
            toastService.ShowWarning("Kênh thông báo", "Bắt buột nhập.");
            await RefChannel.FocusAsync();
            return false;
        }
        //Loại hư hỏng
        if (string.IsNullOrWhiteSpace(Model.DamageType))
        {
            toastService.ShowWarning("Loại hư hỏng", "Bắt buột nhập.");
            await RefDamageType.FocusAsync();
            return false;
        }
        //Nguyên nhân hư hỏng
        if (string.IsNullOrWhiteSpace(Model.DamageCause))
        {
            toastService.ShowWarning("Nguyên nhân hư hỏng", "Bắt buột nhập.");
            await RefDamageCause.FocusAsync();
            return false;
        }
        //Công ty bảo hiểm
        if (string.IsNullOrWhiteSpace(Model.InsurCompanyID))
        {
            toastService.ShowWarning("Công ty bảo hiểm", "Bắt buột nhập.");
            await RefInsure.FocusAsync();
            return false;
        }
        //Chi nhánh bồi thường
        if (string.IsNullOrWhiteSpace(Model.BrancheID))
        {
            toastService.ShowWarning("Chi nhánh bồi thường", "Bắt buột nhập.");
            await RefBranch.FocusAsync();
            return false;
        }
        //
        return true;
    }

    async void SaveMain()
    {
        try
        {
            //Validate input data
            var validateRes = await ValidateForm();
            if (!validateRes) return;

            //Request
            var request = new SaveClaimRequest_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.ClaimRequest = new grpcClaimRequestModel();
            ClassHelper.CopyPropertiesDataDateConverted(Model, request.ClaimRequest);
            //Call api
            var response = await ClaimServiceClient.SaveClaimRequestAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", "Lưu thất bại");
            }

            //Reload data
            await OnValidSumit.InvokeAsync();
            await CloseMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Lưu tờ trình thất bại.");
        }
    }
    async Task CloseMain()
    {
        await OnVisibleChanged(false);
    }
    #endregion

    #region Items
    private bool AttachFileVisbible { get; set; } = false;
    void ShowAttachFiles()
    {
        AttachFileVisbible = true;
        StateHasChanged();
    }

    private bool EstimationVisbible { get; set; } = false;
    void ShowEstimation()
    {
        EstimationVisbible = true;
        StateHasChanged();
    }
    #endregion


}
