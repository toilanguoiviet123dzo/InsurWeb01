@using System.ComponentModel.DataAnnotations;
@using Admin.Services
@using Claim.Services
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService


<div class="container">
    <div class="row align-items-end">
        <!--ClaimNo-->
        <div class="col-6 col-lg-2">
            <MyTextEdit @bind-Text="Model.ClaimNo"
                        ReadOnly="true"
                        Literal="Số tờ trình"
                        InputCssClass="text-blue font-weight-bold" />
        </div>
        <!--Chi nhanh BM-->
        <div class="col-6 col-lg-2">
            <MyMuteLabel Literal="Chi nhánh Bảo Minh" />
            <DxComboBox @ref="RefBranchID"
                        @bind-Value="SelectedBranch"
                        Data="BranchList"
                        AllowUserInput="true"
                        FilteringMode="DataGridFilteringMode.Contains"
                        TextFieldName="@(nameof(BranchMasterModel.BranchName))"
                        SelectedItemChanged="@((BranchMasterModel selectedRow) => {
                                                   Model.BranchID = selectedRow.BranchID;
                                                   Model.BranchName = selectedRow.BranchName;
                                             })"
                        CssClass="branchid-focusid" />
        </div>
        <!--Attach files-->
        <div class="col-6 col-lg-3 pt-2">
            <MyButton BtnCss="btn btn-dark"
                      Text="@AttachFileText"
                      OnClick="ShowAttachFiles"
                      Width="15rem">
                <Icon>
                    <i class="fa fa-paperclip" aria-hidden="true" style="padding-right:10px"></i>
                </Icon>
            </MyButton>
        </div>
    </div>

    <!--Row2 ======================================================================================-->
    <div class="row">
        <!--Left-->
        <div class="col-12 col-lg-4 padding-right-col12">
            <!--Thông tin phương tiện-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Thông tin phương tiện
                </div>
            </div>
            <!--CarOwner,LicensePlate-->
            <div class="row">
                <div class="col-7">
                    <MyTextEdit @bind-Text="Model.CarOwner"
                                Literal="Chủ sở hữu"
                                InputCssClass="font-bold"
                                CssClass="carowner-focus" />
                </div>
                <div class="col-5">
                    <MyTextEdit @bind-Text="Model.PhoneNo"
                                Literal="Điện thoại"
                                InputCssClass="color-blue font-bold"
                                CssClass="phoneno-focus" />
                </div>
            </div>
            <!--Nhan hieu,So loai-->
            <div class="row">
                <div class="col-4" style="padding-right:0">
                    <MyTextEdit @bind-Text="Model.BrandName"
                                Literal="Nhãn hiệu" />
                </div>
                <div class="col-4" style="padding-left: 4px; padding-right: 0">
                    <MyTextEdit @bind-Text="Model.CarType"
                                Literal="Số loại" />
                </div>
                <div class="col-4" style="padding-left:4px">
                    <MyTextEdit @bind-Text="Model.LicensePlate"
                                Literal="Biển kiểm soát"
                                InputCssClass="color-blue font-bold"
                                CssClass="licenseplate-focus" />
                </div>
            </div>
            <!--Nam san xuat,So cho ngoi-->
            <div class="row">
                <div class="col-7">
                    <MyTextEdit @bind-Text="Model.ManufactureYear"
                                Literal="Năm sản xuất" />
                </div>
                <div class="col-5">
                    <MyNumEdit @bind-Value="Model.SeatCount"
                               Mask="N0"
                               Literal="Số chỗ ngồi" />
                </div>
            </div>
            <!--Mục đích sử dụng-->
            <div class="row">
                <div class="col-12">
                    <MyMuteLabel Literal="Mục đích sử dụng" />
                    <DxComboBox Value="Model.BusinessTarget"
                                Data="BusinessTargetList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                ValueFieldName="@(nameof(OptionListModel.ItemName))"
                                TextChanged="@((string text) => Model.BusinessTarget = text)" />
                </div>
            </div>
            <!--Nam ĐK lần đầu, tải trọng-->
            <div class="row">
                <div class="col-6">
                    <MyTextEdit @bind-Text="Model.FirstYearReg"
                                Literal="Năm ĐKLĐ" />
                </div>
                <div class="col-6">
                    <MyNumEdit @bind-Value="Model.Weight"
                               Mask="N0"
                               Literal="Tải trọng (kg)" />
                </div>
            </div>
            <!--Giay chung nhan, tu ngay, den ngay-->
            <div class="row no-gutters">
                <div class="col-4" style="padding-right:0">
                    <MyTextEdit @bind-Text="Model.CarRegisterNo"
                                Literal="Giấy CNĐK số" />
                </div>
                <div class="col-4" style="padding-left: 2px; padding-right: 0">
                    <MyDateEdit @bind-Date="Model.RegFromDate"
                                Literal="Từ ngày" />
                </div>
                <div class="col-4" style="padding-left:2px">
                    <MyDateEdit @bind-Date="Model.RegToDate"
                                Literal="Đến ngày"
                                CssClass="regtodate-focus" />
                </div>
            </div>
            <!--Lai xe, giấy phép lái xe-->
            <div class="row">
                <div class="col-7">
                    <MyTextEdit @bind-Text="Model.Driver"
                                Literal="Lái xe" />
                </div>
                <div class="col-5">
                    <MyTextEdit @bind-Text="Model.DriveLicenseNo"
                                Literal="GPLX số" />
                </div>
            </div>
            <!--Hạng, tu ngay, den ngay-->
            <div class="row no-gutters">
                <div class="col-4" style="padding-right:0">
                    <MyMuteLabel Literal="Hạng" />
                    <DxComboBox Value="Model.DriveLicenseLevel"
                                Data="DriveLicenseLevelList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                ValueFieldName="@(nameof(OptionListModel.ItemName))"
                                TextChanged="@((string text) => Model.DriveLicenseLevel = text)" />
                </div>
                <div class="col-4" style="padding-left: 2px; padding-right: 0">
                    <MyDateEdit @bind-Date="Model.LicenseFromDate"
                                Literal="Từ ngày" />
                </div>
                <div class="col-4" style="padding-left:2px">
                    <MyDateEdit @bind-Date="Model.LicenseToDate"
                                Literal="Đến ngày"
                                CssClass="licensetodate-focus" />
                </div>
            </div>

        </div>

        <!--Mid---------------------------------------------------------------->
        <div class="col-12 col-lg-4 padding-right-col12">
            <!--Thông tin tai nạn-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Thông tin tai nạn
                </div>
            </div>
            <!--Ngày giờ-->
            <div class="row">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.AccidentDateTime"
                                Format="dd/MM/yyyy HH:mm"
                                Literal="Ngày giờ" />
                </div>
            </div>
            <!--Nơi xảy ra tai nạn-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.AccidentPlace"
                                Literal="Nơi xảy ra tai nạn" />
                </div>
            </div>
            <!--Cơ quan xử lý tại nạn-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.AccidentProcessor"
                                Literal="Cơ quan xử lý tại nạn" />
                </div>
            </div>
            <!--Diễn biến tai nạn-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.AccidentProgress"
                                Rows="2"
                                Literal="Diễn biến tai nạn" />
                </div>
            </div>
            <!--Nguyên nhân-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.AccidentReason"
                                Rows="2"
                                Literal="Nguyên nhân" />
                </div>
            </div>
            <!--Mức độ tổn thất-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.DamageVolume"
                                Rows="2"
                                Literal="Mức độ tổn thất" />
                </div>
            </div>



        </div>

        <!--Right-------------------------------------------------------------->
        <div class="col-12 col-lg-4 padding-right-col3">
            <!--Thông tin bảo hiểm-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Thông tin bảo hiểm
                </div>
            </div>
            <!--VCX==========================-->
            <!--Hợp đồng bảo hiểm số, hiệu lực tu ngay, den ngay-->
            <div class="row no-gutters">
                <div class="col-4" style="padding-right:0">
                    <MyTextEdit @bind-Text="Model.VCXContractNo"
                                Literal="Số HĐ VCX"
                                InputCssClass="color-blue font-bold"
                                CssClass="insucontractno-focus" />
                </div>
                <div class="col-4" style="padding-left:4px;padding-right:4px">
                    <MyDateEdit @bind-Date="Model.VCXFromDate"
                                Literal="Từ ngày" />
                </div>
                <div class="col-4" style="padding-left:0">
                    <MyDateEdit @bind-Date="Model.VCXToDate"
                                Literal="Đến ngày"
                                CssClass="insutodate-focus" />
                </div>
            </div>
            <!--Thanh toán phí BH, ngày thanh toán-->
            <div class="row">
                <div class="col-6">
                    <MyTextEdit @bind-Text="Model.VCXPayStatus"
                                ReadOnly="true"
                                Literal="Thanh toán" />
                </div>
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.VCXPayDate"
                                ReadOnly="true"
                                Literal="Ngày" />
                </div>
            </div>
            <!--Điều khoản-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.VCXContent"
                                Rows="2"
                                ReadOnly="true"
                                Literal="Điều khoản" />
                </div>
            </div>
            <!--Điều khoản bổ sung-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.VCXRules"
                                ReadOnly="true"
                                Literal="Điều khoản bổ sung" />
                </div>
            </div>
            <!--Khấu trừ-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.VCXDeduct"
                                ReadOnly="true"
                                Literal="Khấu trừ" />
                </div>
            </div>
            <!--TNDS==========================-->
            <!--Hợp đồng bảo hiểm số, hiệu lực tu ngay, den ngay-->
            <div class="row no-gutters">
                <div class="col-4" style="padding-right:0">
                    <MyTextEdit @bind-Text="Model.TNDSContractNo"
                                Literal="Số HĐ TNDS"
                                InputCssClass="color-blue font-bold"
                                CssClass="insucontractno-focus" />
                </div>
                <div class="col-4" style="padding-left:4px;padding-right:4px">
                    <MyDateEdit @bind-Date="Model.TNDSFromDate"
                                Literal="Từ ngày" />
                </div>
                <div class="col-4" style="padding-left:0">
                    <MyDateEdit @bind-Date="Model.TNDSToDate"
                                Literal="Đến ngày"
                                CssClass="insutodate-focus" />
                </div>
            </div>
            <!--Thanh toán phí BH, ngày thanh toán-->
            <div class="row">
                <div class="col-6">
                    <MyTextEdit @bind-Text="Model.TNDSPayStatus"
                                ReadOnly="true"
                                Literal="Thanh toán" />
                </div>
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.TNDSPayDate"
                                ReadOnly="true"
                                Literal="Ngày" />
                </div>
            </div>
            <!--Điều khoản-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.TNDSContent"
                                Rows="3"
                                ReadOnly="true"
                                Literal="Điều khoản" />
                </div>
            </div>
        </div>
    </div>

    <!--Row3 ======================================================================================-->
    <div class="row">
        <!--left--------------------------------------------------------------->
        <div class="col-12 col-lg-4 padding-right-col12">
            <!--Thông tin tiếp nhận hồ sơ------------------------------------->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Thông tin tiếp nhận hồ sơ
                </div>
            </div>
            <!--Ngày tiếp nhận-->
            <div class="row align-items-end">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.AcceptDatetime"
                                ReadOnly="true"
                                Format="dd/MM/yyyy HH:mm"
                                Literal="Ngày tiếp nhận"
                                InputCssClass="color-green" />
                </div>
                <div class="col-6">
                    <DxCheckBox @bind-Checked="@Model.AcceptStatus"
                                Enabled="false">
                        <label style="color:green; font-weight:bold"> Nhận hồ sơ </label>
                    </DxCheckBox>
                </div>
            </div>
            <!--Người tiếp nhận-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.AcceptPersonName"
                                ReadOnly="true"
                                Literal="Người tiếp nhận" />
                </div>
            </div>
            <!--Ghi chú tiếp nhận-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.AcceptNotes"
                                Rows="2"
                                ReadOnly="true"
                                Literal="Ghi chú" />
                </div>
            </div>
        </div>

        <!--mid---------------------------------------------------------------->
        <div class="col-12 col-lg-4 padding-right-col12">
            <!--Phạm vi và phương án bồi thường-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Phạm vi và phương án bồi thường
                </div>
            </div>
            <!--Ngày trình-->
            <div class="row align-items-end">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.ReqDateTime"
                                ReadOnly="true"
                                Format="dd/MM/yyyy HH:mm"
                                Literal="Ngày giờ xử lý"
                                InputCssClass="color-green" />
                </div>
                <div class="col-6">
                    <DxCheckBox @bind-Checked="@Model.CompenStatus"
                                Enabled="false">
                        <label style="color:green; font-weight:bold"> Xử lý hồ sơ </label>
                    </DxCheckBox>
                </div>
            </div>
            <!--Cán bộ bồi thường-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.ReqPersonName"
                                ReadOnly="true"
                                Literal="Cán bộ bồi thường" />
                </div>
            </div>
            <!--Nhận định của cán bộ bồi thường-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.ReqContent"
                                Rows="2"
                                ReadOnly="true"
                                Literal="Nhận định của cán bộ bồi thường" />
                </div>
            </div>
            <!--Đơn vị sửa chữa-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.RepairerName"
                                ReadOnly="true"
                                Literal="Đơn vị sửa chữa" />
                </div>
            </div>
        </div>

        <!--right-------------------------------------------------------------->
        <div class="col-12 col-lg-4 mr-4 padding-right-col3">
            <!--Duyệt bồi thường-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Tình trạng duyệt, chi trả
                </div>
            </div>
            <!--Ngày giờ, trạng thái-->
            <div class="row align-items-end">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.AprDateTime"
                                Format="dd/MM/yyyy HH:mm"
                                ReadOnly="true"
                                Literal="Ngày giờ duyệt"
                                InputCssClass="color-blue" />
                </div>
                <div class="col-6">
                    <DxCheckBox @bind-Checked="@Model.AprStatus"
                                Enabled="false">
                        <label style="color:blue; font-weight:bold">Duyệt</label>
                    </DxCheckBox>
                </div>
            </div>
            <!--Chi trả bồi thường-->
            <!--Ngày giờ-->
            <div class="row align-items-end">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.PayDateTime"
                                Format="dd/MM/yyyy HH:mm"
                                ReadOnly="true"
                                Literal="Ngày giờ chi trả"
                                InputCssClass="color-maroon" />
                </div>
                <div class="col-6">
                    <DxCheckBox @bind-Checked="@Model.PayStatus"
                                Enabled="false">
                        <label style="color:maroon; font-weight:bold">Chi trả</label>
                    </DxCheckBox>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center mt-2">
        <!--OK, Cancel-->
        <MyButtonSave OnClick="SaveMain" />
        <MyButtonCancel OnClick="CloseMain" />
    </div>

</div>

<!--Attach files-->
<MyPopup @bind-Visible="@AttachFileVisbible"
         HeaderText="Files đính kèm"
         Height="600px"
         Width="1000px"
         ZIndex="1002">
    <BodyContentTemplate>
        <AttachFiles @bind-Visible="@AttachFileVisbible"
                     VoucherNo="@Model.ClaimNo"
                     OnValidSumit="@(async () => await Get_AttachFileCount())" />
    </BodyContentTemplate>
</MyPopup>


@code {
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    //Parameters and events
    [Parameter]
    public string ClaimNo { get; set; } = "";
    [Parameter]
    public EventCallback OnValidSumit { get; set; }
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private async Task OnVisibleChanged(bool newValue)
    {
        await VisibleChanged.InvokeAsync(newValue);
    }

    //Master
    private List<UserAccountModel> UserList = new List<UserAccountModel>();
    private List<BranchMasterModel> BranchList = new List<BranchMasterModel>();
    private DxComboBox<BranchMasterModel, BranchMasterModel> RefBranchID;
    private BranchMasterModel SelectedBranch;
    //BusinessTargetList
    private List<OptionListModel> BusinessTargetList = new List<OptionListModel>();
    private List<OptionListModel> DriveLicenseLevelList = new List<OptionListModel>();
    //
    private ClaimRequestModel Model = new ClaimRequestModel();
    private string AttachFileText = "File đính kèm (0 files)";

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        if (string.IsNullOrWhiteSpace(ClaimNo))
        {
            await InitMain();
        }
        else
        {
            await DisplayMain();
        }
    }
    //
    async Task LoadMaster()
    {
        //...
        BranchList = await masterService.Load_BranchList();
        BusinessTargetList = await masterService.Load_OptionList("004");
        DriveLicenseLevelList = await masterService.Load_OptionList("005");
    }
    async Task InitMain()
    {
        Model = new ClaimRequestModel();
        Model.UpdMode = 1;

        //ClaimNo
        Model.ClaimNo = await Get_NewVoucherNo();
        //CompenDateTime
        Model.CompenDateTime = DateTime.Now;
        //AccidentDateTime
        Model.AccidentDateTime = DateTime.Now;
        //Customer
        Model.CustomerID = WebUserCredential.Username;
        Model.CustomerName = WebUserCredential.Fullname;
    }
    //
    private async Task<string> Get_NewVoucherNo()
    {
        try
        {
            var request = new Admin.Services.String_Request();
            request.Credential = new Admin.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.StringValue = "001";
            //
            var response = await adminServiceClient.GetVoucherNoAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                return response.StringValue;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Get số báo giá mới bị lỗi !!!");
        }
        //
        return "";
    }


    #endregion

    #region MainForm
    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Claim.Services.String_Request();
            var Credential = new Claim.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            request.StringValue = ClaimNo;
            //Call api
            var response = await ClaimServiceClient.GetClaimRequestAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Show success
                ClassHelper.CopyPropertiesDataDateConverted(response.ClaimRequest, Model);
                //BusinessTargetList
                if (!BusinessTargetList.Exists(x => x.ItemName.Contains(Model.BusinessTarget)))
                {
                    BusinessTargetList.Add(new OptionListModel()
                    {
                        ItemName = Model.BusinessTarget
                    });
                }
                //DriveLicenseLevelList
                if (!DriveLicenseLevelList.Exists(x => x.ItemName.Contains(Model.DriveLicenseLevel)))
                {
                    DriveLicenseLevelList.Add(new OptionListModel()
                    {
                        ItemName = Model.DriveLicenseLevel
                    });
                }
                //SelectedBranch
                if (!string.IsNullOrWhiteSpace(Model.BranchID)) SelectedBranch = BranchList.Find(x => x.BranchID == Model.BranchID);
                //
                Model.UpdMode = 2;

                //Get attach files count
                await Get_AttachFileCount();
            }
            else
            {
                await InitMain();
            }

            //Refresh layout
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load tờ trình thất bại.");
        }
    }

    private async Task Get_AttachFileCount()
    {
        try
        {
            AttachFileText = $"File đính kèm (0 files)";
            //
            var request = new Claim.Services.GetAttachFileCount_Request();
            request.Credential = new Claim.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.VoucherNo = Model.ClaimNo;
            request.DocumentLevel = WebUserCredential.DocumentLevel;
            //
            var response = await ClaimServiceClient.GetAttachFileCountAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                AttachFileText = $"File đính kèm ({response.IntValue.ToString()} files)";
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Get số lượng file đính kèm bị lỗi !!!");
        }
        this.StateHasChanged();
    }

    async Task<bool> ValidateForm()
    {
        //Skip if approved
        if (Model.AcceptStatus)
        {
            toastService.ShowWarning("Hồ sơ đã thụ lý nên không thể chỉnh sữa.", "Không cho phép");
            return false;
        }
        //BranchID
        if (string.IsNullOrWhiteSpace(Model.BranchID))
        {
            toastService.ShowWarning("Chi nhánh Bảo Minh", "Bắt buột nhập.");
            await RefBranchID.FocusAsync();
            return false;
        }
        //CarOwner
        if (string.IsNullOrWhiteSpace(Model.CarOwner))
        {
            toastService.ShowWarning("Chủ sơ hữu", "Bắt buột nhập.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "carowner-focus");
            return false;
        }
        //PhoneNo
        if (string.IsNullOrWhiteSpace(Model.PhoneNo))
        {
            toastService.ShowWarning("Số điện thoại", "Bắt buột nhập.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "phoneno-focus");
            return false;
        }
        //LicensePlate
        if (string.IsNullOrWhiteSpace(Model.LicensePlate))
        {
            toastService.ShowWarning("Chủ sơ hữu", "Bắt buột nhập.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "licenseplate-focus");
            return false;
        }
        //RegToDate
        if (Model.RegToDate < Model.RegFromDate)
        {
            toastService.ShowWarning("Giấy CNĐK: đến ngày", "Không được nhỏ hơn ngày bắt đầu.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "regtodate-focus");
            return false;
        }
        //LicenseToDate
        if (Model.LicenseToDate < Model.LicenseFromDate)
        {
            toastService.ShowWarning("Hiệu lực GPLX: đến ngày", "Không được nhỏ hơn ngày bắt đầu.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "licensetodate-focus");
            return false;
        }
        //InsuToDate
        if (Model.VCXToDate < Model.VCXFromDate)
        {
            toastService.ShowWarning("Hiệu lực HĐ: đến ngày", "Không được nhỏ hơn ngày bắt đầu.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "insutodate-focus");
            return false;
        }

        //VCXContractNo
        if (string.IsNullOrWhiteSpace(Model.VCXContractNo))
        {
            toastService.ShowWarning("HĐBH số", "Bắt buột nhập.");
            await JsRuntime.InvokeAsync<string>("focusEditor", "insucontractno-focus");
            return false;
        }
        //
        return true;
    }

    async void SaveMain()
    {
        try
        {
            //Validate input data
            var validateRes = await ValidateForm();
            if (!validateRes) return;

            //Request
            var request = new SaveClaimRequest_Request();
            var Credential = new Claim.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            request.ClaimRequest = new grpcClaimRequestModel();
            ClassHelper.CopyPropertiesDataDateConverted(Model, request.ClaimRequest);
            //Call api
            var response = await ClaimServiceClient.SaveClaimRequestAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", "Lưu thất bại");
            }

            //Reload data
            await OnValidSumit.InvokeAsync();
            await CloseMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Lưu tờ trình thất bại.");
        }
    }
    async Task CloseMain()
    {
        await OnVisibleChanged(false);
    }
    #endregion

    #region Items
    private bool AttachFileVisbible { get; set; } = false;
    void ShowAttachFiles()
    {
        AttachFileVisbible = true;
        StateHasChanged();
    }

    private bool EstimationVisbible { get; set; } = false;
    void ShowEstimation()
    {
        EstimationVisbible = true;
        StateHasChanged();
    }
    #endregion


}
