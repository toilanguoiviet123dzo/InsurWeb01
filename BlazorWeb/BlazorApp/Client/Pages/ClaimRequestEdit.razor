@using System.ComponentModel.DataAnnotations;
@using Admin.Services
@using Claim.Services
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject VoucherService voucherService;
@inject IJSRuntime JsRuntime;
@inject ISnackbar Snackbar

<MyForm Title="Yêu cầu bồi thường"
        UpdMode="@Model.UpdMode"
        OnCancelClick="CloseMain"
        OnSubmitClick="SaveMain">
    <MyPanels>
        <!--Thông tin chung-->
        <MyPanel Title="Thông tin chung">
            <div class="container-fluid">
                <!--Row 1-------------------------------------------------->
                <div class="row">
                    <!--Số tiếp nhận-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit @bind-Text="Model.ClaimNo"
                                    ReadOnly="true"
                                    Literal="Số tiếp nhận"
                                    Width="8rem"
                                    Class="text-blue font-weight-bold" />
                    </div>

                    <!--Ngày tiếp nhận-->
                    <div class="col-12 col-lg-3">
                        <MyDateTimeEdit @bind-Date="Model.ClaimDate"
                                        Literal="Ngày tiếp nhận"
                                        ReadOnly="true"
                                        Class="text-blue" />
                    </div>
                    <!--Người tiếp nhận-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit @bind-Text="Model.ClaimAccountName"
                                    ReadOnly="true"
                                    Literal="Người tiếp nhận" />
                    </div>
                </div>

                <!--Row 2-------------------------------------------------->
                <div class="row">
                    <!--Phone-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit @ref="@RefPhone"
                                    Text="@Model.CusPhone"
                                    TextChanged="@((string x) => OnTextChanged_Phone(x))"
                                    Literal="Điện thoại liên hệ"
                                    Class="text-blue font-weight-bold"/>
                    </div>
                    <!--Tên khách hàng-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit @bind-Text="Model.CusFullname"
                                    Literal="Tên khách hàng"
                                    Class="cusfullname-focus" />
                    </div>
                    <!--Email-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit @bind-Text="Model.CusEmail"
                                    Literal="Email" />
                    </div>
                    <!--Số CMND/CCCD-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit @bind-Text="Model.CusCardID"
                                    Literal="Số CMND/CCCD" />
                    </div>
                </div>

                <!--Row 3-------------------------------------------------->
                <div class="row">
                    <!--Loại sản phẩm-->
                    <div class="col-12 col-lg-3">
                        <MyComboBox @ref="RefProduct"
                                    @bind-Value="SelectedProduct"
                                    Data="ProductList"
                                    TextFieldName="@(nameof(OptionListModel.ItemName))"
                                    SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.TPAProductID = selectedRow.ItemCode;
                                                   Model.TPAProductName = selectedRow.ItemName;
                                                })"
                                    Literal="Loại sản phẩm" />
                    </div>
                    <!--Số IMEI thiết bị-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit @bind-Text="Model.DeviceIMEI"
                                    Literal="Số IMEI thiết bị"
                                    Class="text-purple font-weight-bold text-uppercase" />
                    </div>
                    <!--Model-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit @bind-Text="Model.DeviceModel"
                                    Literal="Model" />
                    </div>
                </div>

                <!--Row 4-------------------------------------------------->
                <div class="row">
                    <!--Địa chỉ nhận thiết bị-->
                    <div class="col-12 col-lg-6">
                        <MyTextEdit @bind-Text="Model.PickupAddress"
                                    Literal="Địa chỉ nhận thiết bị"
                                    Class="pickupaddress-focus" />
                    </div>
                    <!--Địa chỉ trả thiết bị-->
                    <div class="col-12 col-lg-6">
                        <MyTextEdit @bind-Text="Model.ReturnAddress"
                                    Literal="Địa chỉ trả thiết bị" />
                    </div>
                </div>
            </div>
        </MyPanel>
        <!--Thông tin hư hỏng-->
        <MyPanel Title="Thông tin hư hỏng">
            <div class="container-fluid">
                <!--Row 1-------------------------------------------------->
                <div class="row">
                    <!--Ngày KH thông báo-->
                    <div class="col-12 col-lg-3">
                        <MyDateTimeEdit @bind-Date="Model.NotificationDate"
                                        Literal="Ngày KH thông báo"
                                        Class="text-green" />
                    </div>
                    <!--Ngày sự cố-->
                    <div class="col-12 col-lg-3">
                        <MyDateTimeEdit @bind-Date="Model.IncidentDate"
                                        Literal="Ngày sự cố"
                                        Class="text-maroon" />
                    </div>
                    <!--Kênh thông báo-->
                    <div class="col-12 col-lg-3">
                        <MyComboBox @ref="RefChannel"
                                    @bind-Value="SelectedChannel"
                                    Data="ChannelList"
                                    TextFieldName="@(nameof(OptionListModel.ItemName))"
                                    SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                            Model.NotificationChannelID = selectedRow.ItemCode;
                                                            Model.NotificationChannelName = selectedRow.ItemName;
                                                        })"
                                    Literal="Kênh thông báo" />
                    </div>
                    <!--Loại hư hỏng-->
                    <div class="col-12 col-lg-3">
                        <MyComboBox @ref="RefDamageType"
                                    @bind-Value="SelectedDamageCause"
                                    Data="DamageCauseList"
                                    TextFieldName="@(nameof(OptionListModel.ItemName))"
                                    SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                       Model.DamageType = selectedRow.ItemCode;
                                                       Model.DamageTypeName = selectedRow.ItemName;
                                                 })"
                                    Literal="Loại hư hỏng" />
                    </div>
                </div>

                <!--Row 2-------------------------------------------------->
                <div class="row">
                    <!--Nguyên nhân hư hỏng-->
                    <div class="col-12 col-lg-7">
                        @*<MyMuteLabel Literal="Nguyên nhân hư hỏng" />*@
                        <MyMemoEdit @ref="RefDamageCause"
                                    @bind-Text="Model.DamageCause"
                                    Rows="5"
                                    Literal="Nguyên nhân hư hỏng" />
                    </div>
                    <!--Ghi chú-->
                    <div class="col-12 col-lg-5">
                        <MyMemoEdit @bind-Text="Model.AcceptNotes"
                                    Rows="5"
                                    Literal="Ghi chú" />
                    </div>
                </div>
            </div><!--End container-->
        </MyPanel>

        <!--Thông hợp tin đồng-->
        <MyPanel Title="Thông hợp tin đồng">
            <div class="container-fluid">
                <!--Row 1-------------------------------------------------->
                <div class="row">
                    <!--Công ty bảo hiểm-->
                    <div class="col-12 col-lg-3">
                        <MyComboBox @ref="RefInsure"
                                    @bind-Value="SelectedInsure"
                                    Data="InsureList"
                                    TextFieldName="@(nameof(OptionListModel.ItemName))"
                                    SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                       Model.InsurCompanyID = selectedRow.ItemCode;
                                                       Model.InsurCompanyName = selectedRow.ItemName;
                                                       OnInsurCompanyID_Changed(Model.InsurCompanyID);
                                                 })"
                                    Literal="Công ty bảo hiểm" />
                    </div>
                    <!--Số hợp đồng-->
                    <div class="col-12 col-lg-3">
                        <MyTextEdit Text="@Model.InsurContractNo"
                                    TextChanged="@((string x) => OnInsurContractNo_Changed(x))"
                                    Literal="Số hợp đồng"
                                    Class="text-blue font-weight-bold text-uppercase" />
                    </div>
                    <!--Từ ngày-->
                    <div class="col-12 col-lg-2">
                        <MyDateTimeEdit @bind-Date="Model.InsurStartDate"
                                        Literal="Từ ngày"
                                        ReadOnly="true"
                                        Class="text-green" />
                    </div>
                    <!--Đến ngày-->
                    <div class="col-12 col-lg-2">
                        <MyDateTimeEdit @bind-Date="Model.InsurEndDate"
                                        Literal="Đến ngày"
                                        ReadOnly="true"
                                        Class="text-maroon" />
                    </div>
                </div>

                <!--Row 2-------------------------------------------------->
                <div class="row">
                    <!--Chi nhánh bồi thường-->
                    <div class="col-12 col-lg-3">
                        <MyComboBox @ref="RefBranch"
                                    @bind-Value="SelectedBranch"
                                    Data="BranchList"
                                    TextFieldName="@(nameof(BranchMasterModel.BranchName))"
                                    SelectedItemChanged="@((BranchMasterModel selectedRow) => {
                                                       Model.BrancheID = selectedRow.BranchID;
                                                       Model.BrancheName = selectedRow.BranchName;
                                                 })"
                                    Literal="Chi nhánh bồi thường" />
                    </div>
                    <!--Mức độ ưu tiên-->
                    <div class="col-12 col-lg-3">
                        <MyComboBox @ref="RefPriority"
                                    @bind-Value="SelectedPriority"
                                    Data="PriorityList"
                                    TextFieldName="@(nameof(OptionListModel.ItemName))"
                                    SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                       Model.Priority = selectedRow.IntCode;
                                                       PriorityCss = "";
                                                       if (Model.Priority == 2) PriorityCss = "bg-warning";
                                                       if (Model.Priority == 3) PriorityCss = "bg-danger";
                                                       this.StateHasChanged();
                                                 })"
                                    Class="@PriorityCss"
                                    Literal="Mức độ ưu tiên" />
                    </div>
                    <!--Giá trị hợp đồng-->
                    <div class="col-12 col-lg-2">
                        <MyNumEdit @bind-Value="Model.ContractAmount"
                                   Format="N0"
                                   ReadOnly="true"
                                   Class="text-blue font-weight-bold"
                                   Literal="Giá trị hợp đồng" />
                    </div>
                    <!--Số tiền bảo hiểm còn lại-->
                    <div class="col-12 col-lg-2">
                        <MyNumEdit @bind-Value="Model.InsurAmount"
                                   Format="N0"
                                   ReadOnly="true"
                                   Class="text-maroon font-weight-bold"
                                   Literal="Tiền bảo hiểm còn lại" />
                    </div>
                </div>
            </div><!--End container-->
        </MyPanel>
    </MyPanels>
</MyForm>

@code {

    [CascadingParameter] protected ProgramInfo Program { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    //Parameters and events
    [Parameter] public string ClaimNo { get; set; } = "";
    //
    ClaimRequestModel Model = new ClaimRequestModel();
    //Master
    List<OptionListModel> ProductList = new List<OptionListModel>();
    List<OptionListModel> ChannelList = new List<OptionListModel>();
    List<OptionListModel> DamageCauseList = new List<OptionListModel>();
    List<OptionListModel> PriorityList = new List<OptionListModel>();
    List<OptionListModel> InsureList = new List<OptionListModel>();
    List<BranchMasterModel> BranchList = new List<BranchMasterModel>();
    //Selected combo value
    OptionListModel SelectedProduct = null;
    OptionListModel SelectedChannel = null;
    OptionListModel SelectedDamageCause = null;
    OptionListModel SelectedPriority = null;
    OptionListModel SelectedInsure = null;
    BranchMasterModel SelectedBranch = null;
    //Ref
    MyComboBox<OptionListModel> RefProduct;
    MyComboBox<OptionListModel> RefChannel;
    MyComboBox<OptionListModel> RefDamageType;
    MyComboBox<OptionListModel> RefPriority;
    MyComboBox<OptionListModel> RefInsure;
    MyComboBox<BranchMasterModel> RefBranch;
    MyTextEdit RefPhone;
    MyMemoEdit RefDamageCause;
    //Css
    string PriorityCss = "";

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        if (string.IsNullOrWhiteSpace(ClaimNo))
        {
            await InitMain();
        }
        else
        {
            await DisplayMain();
        }
        this.StateHasChanged();
    }
    //
    async Task LoadMaster()
    {
        ProductList = await masterService.Load_OptionList("004");
        DamageCauseList = await masterService.Load_OptionList("005");
        ChannelList = await masterService.Load_OptionList("006");
        PriorityList = await masterService.Load_OptionList("007");
        InsureList = await masterService.Load_OptionList("008");
        BranchList = await masterService.Load_BranchList();
    }
    async Task InitMain()
    {
        Model = new ClaimRequestModel();
        Model.UpdMode = 1;

        //ClaimNo
        Model.ClaimNo = await voucherService.Get_NewVoucherNo();
        //ClaimDate
        Model.ClaimDate = DateTime.Now;
        //ClaimAccount
        Model.ClaimAccountID = WebUserCredential.Username;
        Model.ClaimAccountName = WebUserCredential.Fullname;
        //TPAProduct
        if (ProductList != null && ProductList.Count > 0)
        {
            SelectedProduct = ProductList[0];
            Model.TPAProductID = SelectedProduct.ItemCode;
            Model.TPAProductName = SelectedProduct.ItemName;
        }
        //NotificationDate
        Model.NotificationDate = DateTime.Now;
        //IncidentDate
        Model.IncidentDate = DateTime.Now;
        //AccidentDateTime
        Model.IncidentDate = DateTime.Now;
        //TPAProduct
        if (ChannelList != null && ChannelList.Count > 0)
        {
            SelectedChannel = ChannelList[0];
            Model.NotificationChannelID = SelectedChannel.ItemCode;
            Model.NotificationChannelName = SelectedChannel.ItemName;
        }
        //DamageCause
        if (DamageCauseList != null && DamageCauseList.Count > 0)
        {
            SelectedDamageCause = DamageCauseList[0];
            Model.DamageType = SelectedDamageCause.ItemCode;
        }
        //Branch
        if (BranchList != null && BranchList.Count > 0)
        {
            SelectedBranch = BranchList.Find(a => a.BranchID == WebUserCredential.BrancheID);
            if (SelectedBranch != null)
            {
                Model.BrancheID = SelectedBranch.BranchID;
                Model.BrancheName = SelectedBranch.BranchName;
            }
        }
        //DamageCause
        if (PriorityList != null && PriorityList.Count > 0)
        {
            SelectedPriority = PriorityList[0];
            Model.Priority = SelectedPriority.IntCode;
        }
    }
    //
    #endregion

    #region MainForm
    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Claim.Services.String_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.StringValue = ClaimNo;
            //Call api
            var response = await ClaimServiceClient.GetClaimRequestAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Show success
                ClassHelper.CopyPropertiesDataDateConverted(response.ClaimRequest, Model);
                //TPAProduct
                if (!string.IsNullOrWhiteSpace(Model.TPAProductID)) SelectedProduct = ProductList.Find(x => x.ItemCode == Model.TPAProductID);
                //Notification channel
                if (!string.IsNullOrWhiteSpace(Model.NotificationChannelID)) SelectedChannel = ChannelList.Find(x => x.ItemCode == Model.NotificationChannelID);
                //DamageType
                if (!string.IsNullOrWhiteSpace(Model.DamageType)) SelectedDamageCause = DamageCauseList.Find(x => x.ItemCode == Model.DamageType);
                //SelectedBranch
                if (!string.IsNullOrWhiteSpace(Model.InsurCompanyID)) SelectedInsure = InsureList.Find(x => x.ItemCode == Model.InsurCompanyID);
                //SelectedBranch
                if (!string.IsNullOrWhiteSpace(Model.BrancheID)) SelectedBranch = BranchList.Find(x => x.BranchID == Model.BrancheID);
                //Priority
                SelectedPriority = PriorityList.Find(x => x.IntCode == Model.Priority);

                //Estimations
                if (response.ClaimRequest.Estimations != null && response.ClaimRequest.Estimations.Count > 0)
                {
                    foreach (var item in response.ClaimRequest.Estimations)
                    {
                        var estRow = new EstimationModel();
                        ClassHelper.CopyPropertiesDataDateConverted(item, estRow);
                        Model.Estimations.Add(estRow);
                    }
                }


                //CSS
                PriorityCss = "";
                if (Model.Priority == 2) PriorityCss = "bg-warning";
                if (Model.Priority == 3) PriorityCss = "bg-danger";
                //
                Model.UpdMode = 2;
            }
            else
            {
                await InitMain();
            }

            //Refresh layout
            StateHasChanged();
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_LoadDataFailed, Severity.Error);
        }
    }

    async Task<bool> ValidateForm()
    {
        //Skip
        if (Model.AcceptStatus)
        {
            Snackbar.Add(MyMessage.Error_DataReadOnly, Severity.Warning);
            return false;
        }
        //Phone
        if (string.IsNullOrWhiteSpace(Model.CusPhone))
        {
            Snackbar.Add("Bắt buột nhập: Điện thoại liên hệ", Severity.Warning);
            RefPhone.Focus();
            return false;
        }
        //Tên khách hàng
        if (string.IsNullOrWhiteSpace(Model.CusFullname))
        {
            Snackbar.Add("Bắt buột nhập: Tên khách hàng", Severity.Warning);
            await JsRuntime.InvokeAsync<string>("focusEditor", "cusfullname-focus");
            return false;
        }
        //TPA Product
        if (string.IsNullOrWhiteSpace(Model.TPAProductID))
        {
            Snackbar.Add("Bắt buột nhập: Loại sản phẩm", Severity.Warning);
            RefProduct.Focus();
            return false;
        }
        //Địa chỉ nhận thiết bị
        if (string.IsNullOrWhiteSpace(Model.PickupAddress))
        {
            Snackbar.Add("Bắt buột nhập: Địa chỉ nhận thiết bị", Severity.Warning);
            await JsRuntime.InvokeAsync<string>("focusEditor", "pickupaddress-focus");
            return false;
        }
        //Kênh thông báo
        if (string.IsNullOrWhiteSpace(Model.NotificationChannelID))
        {
            Snackbar.Add("Bắt buột nhập: Kênh thông báo", Severity.Warning);
            RefChannel.Focus();
            return false;
        }
        //Loại hư hỏng
        if (string.IsNullOrWhiteSpace(Model.DamageType))
        {
            Snackbar.Add("Bắt buột nhập: Loại hư hỏng", Severity.Warning);
            RefDamageType.Focus();
            return false;
        }
        //Nguyên nhân hư hỏng
        if (string.IsNullOrWhiteSpace(Model.DamageCause))
        {
            Snackbar.Add("Bắt buột nhập: Nguyên nhân hư hỏng", Severity.Warning);
            RefDamageCause.Focus();
            return false;
        }
        //Công ty bảo hiểm
        if (string.IsNullOrWhiteSpace(Model.InsurCompanyID))
        {
            Snackbar.Add("Bắt buột nhập: Công ty bảo hiểm", Severity.Warning);
            RefInsure.Focus();
            return false;
        }
        //Chi nhánh bồi thường
        if (string.IsNullOrWhiteSpace(Model.BrancheID))
        {
            Snackbar.Add("Bắt buột nhập: Chi nhánh bồi thường", Severity.Warning);
            RefBranch.Focus();
            return false;
        }
        //
        return true;
    }

    async void SaveMain()
    {
        try
        {
            //Validate input data
            var validateRes = await ValidateForm();
            if (!validateRes) return;

            //Request
            var request = new SaveClaim_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.ClaimRequest = new grpcClaimRequestModel();
            //ReturnAddress -> PickupAddress
            if (string.IsNullOrWhiteSpace(Model.ReturnAddress))
            {
                Model.ReturnAddress = Model.PickupAddress;
            }

            ClassHelper.CopyPropertiesDataDateConverted(Model, request.ClaimRequest);
            //Call api
            var response = await ClaimServiceClient.SaveClaimRequestAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                Snackbar.Add(MyMessage.Error_SaveFailed, Severity.Error);
            }

            //Close
            MudDialog.Close(DialogResult.Ok(Model));
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_SaveFailed, Severity.Error);
        }
    }
    void CloseMain()
    {
        MudDialog.Cancel();
    }
    #endregion

    #region Items
    async void OnTextChanged_Phone(string cusPhone)
    {
        try
        {
            Model.CusPhone = cusPhone;
            //
            if (!string.IsNullOrWhiteSpace(cusPhone))
            {
                //Request
                var request = new Claim.Services.String_Request();
                var Credential = new Claim.Services.UserCredential()
                    {
                        Username = WebUserCredential.Username,
                        RoleID = WebUserCredential.RoleID,
                        AccessToken = WebUserCredential.AccessToken,
                        ApiKey = WebUserCredential.ApiKey
                    };
                request.Credential = Credential;
                //
                request.StringValue = cusPhone;
                //Call api
                var response = await ClaimServiceClient.GetCustomerInfoAsync(request);
                // Success
                if (response != null && response.ReturnCode == GrpcReturnCode.OK)
                {
                    Model.CusEmail = response.CusEmail;
                    Model.CusFullname = response.CusFullname;
                    Model.CusCardID = response.CusCardID;
                    Model.PickupAddress = response.PickupAddress;
                    //
                    this.StateHasChanged();
                }
            }
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_NoNetwork, Severity.Error);
        }
    }

    // Get contract info
    void OnInsurContractNo_Changed(string insurContractNo)
    {
        Model.InsurContractNo = insurContractNo;
        Get_InsureContraction(Model.InsurContractNo, Model.InsurCompanyID);
    }
    void OnInsurCompanyID_Changed(string insurCompanyID)
    {
        Model.InsurCompanyID = insurCompanyID;
        Get_InsureContraction(Model.InsurContractNo, Model.InsurCompanyID);
    }
    async void Get_InsureContraction(string insurContractNo, string insurCompanyID)
    {
        try
        {
            //validate
            if (string.IsNullOrWhiteSpace(insurContractNo) || string.IsNullOrWhiteSpace(insurCompanyID)) return;

            //Request
            var request = new Claim.Services.GetInsureContract_Request();
            var Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //
            request.InsurCompanyID = insurCompanyID;
            request.InsurContractNo = insurContractNo;
            //Call api
            var response = await ClaimServiceClient.GetInsureContractAsync(request);
            // Success
            if (response != null || response.ReturnCode == GrpcReturnCode.OK)
            {
                Model.InsurStartDate = response.InsurStartDate.ToLocalDateFromTimestamp();
                Model.InsurEndDate = response.InsurEndDate.ToLocalDateFromTimestamp();
                Model.ContractAmount = response.ContractAmount;
                Model.InsurAmount = response.InsurAmount;
                //
                this.StateHasChanged();
            }
        }
        catch
        {
            Snackbar.Add(MyMessage.Error_NoNetwork, Severity.Error);
        }
    }
    //


    #endregion


}
