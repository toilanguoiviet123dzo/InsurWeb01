@using System.ComponentModel.DataAnnotations;
@using Admin.Services
@using Claim.Services
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<style>
    .color-blue {
        color: blue !important;
    }

    .color-green {
        color: green !important;
    }

    .color-maroon {
        color: maroon !important;
    }

    .font-bold {
        font-weight: bold !important;
    }

    .padding-right-col12 {
        padding-right: 15px
    }

    .padding-right-col3 {
        padding-right: 15px
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-6 col-lg-3">
            <!--ClaimNo-->
            <MyTextEdit @bind-Text="Model.ClaimNo"
                        ReadOnly="true"
                        Literal="Số tờ trình"
                        InputCssClass="color-blue font-bold" />
        </div>
        <div class="col-6 col-lg-3">
            <MyDateEdit @bind-Date="Model.ReqDateTime"
                        ReadOnly="true"
                        Format="dd/MM/yyyy HH:mm"
                        Literal="Ngày yêu cầu sửa" />
        </div>
    </div>

    <!--Row2 ======================================================================================-->
    <div class="row">
        <!--Left-->
        <div class="col-12 col-lg-6 padding-right-col12">
            <!--Thông tin phương tiện-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Thông tin phương tiện
                </div>
            </div>
            <!--CarOwner,LicensePlate-->
            <div class="row">
                <div class="col-7">
                    <MyTextEdit @bind-Text="Model.CarOwner"
                                Literal="Chủ sở hữu"
                                ReadOnly="true"
                                InputCssClass="font-bold"
                                CssClass="carowner-focus" />
                </div>
                <div class="col-5">
                    <MyTextEdit @bind-Text="Model.PhoneNo"
                                Literal="Điện thoại"
                                ReadOnly="true"
                                InputCssClass="color-blue font-bold"
                                CssClass="phoneno-focus" />
                </div>
            </div>
            <!--Nhan hieu,So loai-->
            <div class="row">
                <div class="col-4" style="padding-right:0">
                    <MyTextEdit @bind-Text="Model.BrandName"
                                ReadOnly="true"
                                Literal="Nhãn hiệu" />
                </div>
                <div class="col-4" style="padding-left: 4px; padding-right: 0">
                    <MyTextEdit @bind-Text="Model.CarType"
                                ReadOnly="true"
                                Literal="Số loại" />
                </div>
                <div class="col-4" style="padding-left:4px;">
                    <MyTextEdit @bind-Text="Model.LicensePlate"
                                Literal="Biển kiểm soát"
                                ReadOnly="true"
                                InputCssClass="color-blue font-bold"
                                CssClass="licenseplate-focus" />
                </div>
            </div>
            <!--Nam san xuat,So cho ngoi-->
            <div class="row">
                <div class="col-7">
                    <MyTextEdit @bind-Text="Model.ManufactureYear"
                                ReadOnly="true"
                                Literal="Năm sản xuất" />
                </div>
                <div class="col-5">
                    <MyNumEdit @bind-Value="Model.SeatCount"
                               Mask="N0"
                               ReadOnly="true"
                               Literal="Số chỗ ngồi" />
                </div>
            </div>
            <!--Mục đích sử dụng-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.BusinessTarget"
                                ReadOnly="true"
                                Literal="Mục đích sử dụng" />
                </div>
            </div>
            <!--Lai xe, giấy phép lái xe-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.Driver"
                                ReadOnly="true"
                                Literal="Lái xe" />
                </div>
            </div>
        </div>

        <!--Mid---------------------------------------------------------------->
        <div class="col-12 col-lg-6 padding-right-col12">
            <!--Thông tin tai nạn-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Thông tin tai nạn
                </div>
            </div>
            <!--Ngày giờ-->
            <div class="row">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.AccidentDateTime"
                                Format="dd/MM/yyyy HH:mm"
                                ReadOnly="true"
                                Literal="Ngày giờ" />
                </div>
            </div>
            <!--Nơi xảy ra tai nạn-->
            <div class="row">
                <div class="col-12">
                    <MyTextEdit @bind-Text="Model.AccidentPlace"
                                ReadOnly="true"
                                Literal="Nơi xảy ra tai nạn" />
                </div>
            </div>
            <!--Diễn biến tai nạn-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.AccidentProgress"
                                ReadOnly="true"
                                Rows="2"
                                Literal="Diễn biến tai nạn" />
                </div>
            </div>
            <!--Mức độ tổn thất-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.DamageVolume"
                                ReadOnly="true"
                                Rows="2"
                                Literal="Mức độ tổn thất" />
                </div>
            </div>
        </div>

    </div>

    <!--Row3 ======================================================================================-->
    <div class="row">
        <!--left--------------------------------------------------------------->
        <div class="col-12 col-lg-6 padding-right-col12">
            <!--Thông tin báo giá-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Thông tin báo giá
                </div>
            </div>
            <!--Chi tiet bao gia, File dinh kem-->
            <div class="row justify-content-around mt-2">
                <div class="col-6">
                    <MyButton BtnCss="btn btn-warning"
                              Text="Chi tiết báo giá"
                              OnClick="ShowEstimation"
                              Width="10rem">
                        <Icon>
                            <i class="fa fa-calculator" aria-hidden="true" style="padding-right:10px"></i>
                        </Icon>
                    </MyButton>
                </div>
                <div class="col-6 pt-2">
                    <MyButton BtnCss="btn btn-dark"
                              Text="@AttachFileText"
                              OnClick="ShowAttachFiles"
                              Width="10rem">
                        <Icon>
                            <i class="fa fa-paperclip" aria-hidden="true" style="padding-right:10px"></i>
                        </Icon>
                    </MyButton>
                </div>
            </div>
            <!--Đã báo giá xong-->
            <div class="row mt-2">
                <div class="col-12">
                    <DxCheckBox @bind-Checked="@Model.EstDoneStatus"
                                Enabled="EstRole == 1">
                        <label style="color:green; font-weight:bold"> Đã báo giá xong </label>
                    </DxCheckBox>
                </div>
            </div>
            <!--Giá sửa chữa-->
            <div class="row">
                <div class="col-6">
                    <MyNumEdit @bind-Value="Model.EstRepairPrice"
                               Mask="N0"
                               ReadOnly="true"
                               Literal="Giá sửa chữa"
                               InputCssClass="color-green font-bold" />
                </div>
                <div class="col-6">
                    <MyMuteLabel Literal="% chế tài" />
                    <DxMaskedInput @bind-Value="Model.DiscountRate"
                                   Mask="p0"
                                   ReadOnly="true"
                                   InputCssClass="color-blue font-bold text-align-right" />
                </div>
            </div>
            <!--Giá thương lượng-->
            <div class="row">
                <div class="col-6">
                    <MyNumEdit @bind-Value="Model.DealRepairPrice"
                               Mask="N0"
                               ReadOnly="true"
                               Literal="Giá thương lượng"
                               InputCssClass="color-blue font-bold" />
                </div>
                <div class="col-6">
                    <MyNumEdit @bind-Value="Model.DiscountAmount"
                               Mask="N0"
                               ReadOnly="true"
                               Literal="Chế tài"
                               InputCssClass="color-maroon font-bold" />
                </div>
            </div>
            <!--Giá duyệt-->
            <div class="row">
                <div class="col-6">
                    <MyNumEdit @bind-Value="Model.AprRepairPrice"
                               Mask="N0"
                               ReadOnly="true"
                               Literal="Giá duyệt"
                               InputCssClass="color-maroon font-bold" />
                </div>
                <!--Khấu trừ-->
                <div class="col-6">
                    <MyMuteLabel Literal="Khấu trừ" />
                    <DxMaskedInput @bind-Value="Model.TipAmount"
                                   Mask="N0"
                                   ReadOnly="true"
                                   InputCssClass="font-bold text-align-right" />
                </div>
            </div>
            <!--Tiền đền bù-->
            <div class="row">
                <div class="col-12">
                    <MyNumEdit @bind-Value="Model.ClaimPrice"
                               ReadOnly="true"
                               Mask="N0"
                               Literal="Tiền đền bù"
                               InputCssClass="color-blue font-bold" />
                </div>
            </div>
            <!--======================================================================-->
            <!--Thông tin sửa chữa-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Thông tin sửa chữa
                </div>
            </div>
            <!--Đã sửa xong-->
            <div class="row mt-3">
                <div class="col-12">
                    <DxCheckBox Checked="@Model.RepairStatus"
                                CheckedChanged="@((bool newValue) => {
                                                      Model.RepairStatus = newValue;
                                                      Model.RepairDoneDatetime = DateTime.Now;
                                                  })"
                                Enabled="@Model.EstAprStatus">
                        <label style="color:green; font-weight:bold"> Đã sửa xong </label>
                    </DxCheckBox>
                </div>
            </div>
            <!--Ngày bàn giao xe-->
            <div class="row">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.RepairDoneDatetime"
                                Format="dd/MM/yyyy HH:mm"
                                ReadOnly="!Model.EstAprStatus"
                                Literal="Ngày giao xe"
                                InputCssClass="color-green" />
                </div>
            </div>
            <!--Ghi chú-->
            <div class="row">
                <div class="col-12">
                    <MyMemoEdit @bind-Text="Model.RepairNotes"
                                Rows="2"
                                ReadOnly="!Model.EstAprStatus"
                                Literal="Ghi chú sửa chữa" />
                </div>
            </div>

        </div>

        <!--mid---------------------------------------------------------------->
        <div class="col-12 col-lg-6 padding-right-col12">
            <!--Duyệt bồi thường-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Duyệt bồi thường
                </div>
            </div>
            <!--Ngày giờ-->
            <div class="row">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.AprDateTime"
                                Format="dd/MM/yyyy HH:mm"
                                ReadOnly="true"
                                Literal="Ngày giờ"
                                InputCssClass="color-blue" />
                </div>
            </div>
            <!--Trạng duyệt-->
            <div class="row mt-3">
                <div class="col-12">
                    <DxCheckBox @bind-Checked="@Model.AprStatus"
                                Enabled="false">
                        <label style="color:maroon; font-weight:bold">Duyệt</label>
                    </DxCheckBox>
                </div>
            </div>

            <!--Chi trả bồi thường-->
            <div class="row mt-3" style="margin-right:50px">
                <div class="col-12 border border-primary bg-info text-white">
                    Chi trả bồi thường
                </div>
            </div>
            <!--Ngày giờ-->
            <div class="row">
                <div class="col-6">
                    <MyDateEdit @bind-Date="Model.PayDateTime"
                                Format="dd/MM/yyyy HH:mm"
                                ReadOnly="true"
                                Literal="Ngày giờ"
                                InputCssClass="color-maroon" />
                </div>
            </div>
            <!--Trạng thái chi trả-->
            <div class="row mt-3">
                <div class="col-12">
                    <DxCheckBox @bind-Checked="@Model.PayStatus"
                                Enabled="false">
                        <label style="color:maroon; font-weight:bold">Chi trả</label>
                    </DxCheckBox>
                </div>
            </div>

        </div>
    </div>
    <div class="row justify-content-center mt-2">
        <!--OK, Cancel-->
        <MyButtonSave OnClick="SaveMain" />
        <MyButtonCancel OnClick="CloseMain" />
    </div>
</div>

<!--Attach files-->
<MyPopup @bind-Visible="@AttachFileVisbible"
         HeaderText="Files đính kèm"
         Height="600px"
         Width="1000px"
         ZIndex="1002">
    <BodyContentTemplate>
        <AttachFiles @bind-Visible="@AttachFileVisbible"
                     VoucherNo="@Model.ClaimNo"
                     OnValidSumit="@(async () => await Get_AttachFileCount())" />
    </BodyContentTemplate>
</MyPopup>

<!--Estimation-->
<MyPopup @bind-Visible="@EstimationVisbible"
         HeaderText="Chi tiết báo giá"
         Height="700px"
         Width="1200px"
         ZIndex="1002">
    <BodyContentTemplate>
        <RepairEstimation ClaimNo="@Model.ClaimNo"
                          ReqPersonName="@Model.ReqPersonName"
                          BranchName="@Model.BranchName"
                          RepairerName="@Model.RepairerName"
                          @bind-Visible="@EstimationVisbible"
                          RoleMode="@EstRole"
                          OnValidSumit="@((value) => RepairEstimation_Submit(value))" />
    </BodyContentTemplate>
</MyPopup>



@code {
    //Parameters and events
    [Parameter]
    public string ClaimNo { get; set; } = "";
    [Parameter]
    public EventCallback OnValidSumit { get; set; }
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private async Task OnVisibleChanged(bool newValue)
    {
        await VisibleChanged.InvokeAsync(newValue);
    }

    //Master
    private List<UserAccountModel> UserList = new List<UserAccountModel>();
    private List<RepairerMasterModel> RepairerList = new List<RepairerMasterModel>();
    //
    public RepairerMasterModel Repairer { get; set; }
    public UserAccountModel ReqPerson { get; set; }
    public UserAccountModel AprPerson { get; set; }
    public UserAccountModel PayPerson { get; set; }
    //Status at open
    private bool OriEstDoneStatus = false;
    private bool OriRepairStatus = false;

    private CompenRequestModel Model = new CompenRequestModel();
    private string AttachFileText = "File đính kèm (0 files)";
    private int EstRole = 2;    // edit

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        if (string.IsNullOrWhiteSpace(ClaimNo))
        {
            await InitMain();
        }
        else
        {
            await DisplayMain();
        }
        EstRole = 1;    //Bao gia
        if (Model.EstAprStatus)
        {
            EstRole = 0;    //View
        }
    }
    //
    async Task LoadMaster()
    {

        //...
        UserList = await masterService.Load_UserList();
        RepairerList = await masterService.Load_RepairerList();

    }
    async Task InitMain()
    {
        Model = new CompenRequestModel();
        Model.UpdMode = 1;

        //ClaimNo
        Model.ClaimNo = await Get_NewVoucherNo();
        //CompenDateTime
        Model.CompenDateTime = DateTime.Now;
        //AccidentDateTime
        Model.AccidentDateTime = DateTime.Now;
        //Customer
        Model.CustomerID = WebUserCredential.Username;
        Model.CustomerName = WebUserCredential.Fullname;
    }
    //
    private async Task<string> Get_NewVoucherNo()
    {
        try
        {
            var request = new Admin.Services.String_Request();
            request.Credential = new Admin.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.StringValue = "001";
            //
            var response = await adminServiceClient.GetVoucherNoAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                return response.StringValue;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Get số báo giá mới bị lỗi !!!");
        }
        //
        return "";
    }

    #endregion

    #region MainForm
    async Task DisplayMain()
    {
        try
        {
            //Request
            var request = new Claim.Services.String_Request();
            var Credential = new Claim.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            request.StringValue = ClaimNo;
            //Call api
            var response = await ClaimServiceClient.GetCompenRequestAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Show success
                ClassHelper.CopyPropertiesDataDateConverted(response.CompenRequest, Model);

                //ReqPerson, AprPersonID, PayPersonID, repairer
                if (!string.IsNullOrWhiteSpace(Model.ReqPersonID)) ReqPerson = UserList.Find(x => x.UserName == Model.ReqPersonID);
                if (!string.IsNullOrWhiteSpace(Model.AprPersonID)) AprPerson = UserList.Find(x => x.UserName == Model.AprPersonID);
                if (!string.IsNullOrWhiteSpace(Model.PayPersonID)) PayPerson = UserList.Find(x => x.UserName == Model.PayPersonID);
                if (!string.IsNullOrWhiteSpace(Model.RepairerID)) Repairer = RepairerList.Find(x => x.RepairerID == Model.RepairerID);
                //
                OriEstDoneStatus = Model.EstDoneStatus;
                OriRepairStatus = Model.RepairStatus;
                //
                Model.UpdMode = 2;

                //Get attach files count
                await Get_AttachFileCount();
            }
            else
            {
                await InitMain();
            }

            //Refresh layout
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load tờ trình thất bại.");
        }
    }

    private async Task Get_AttachFileCount()
    {
        try
        {
            AttachFileText = $"Đính kèm (0 files)";
            //
            var request = new Claim.Services.GetAttachFileCount_Request();
            request.Credential = new Claim.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.VoucherNo = Model.ClaimNo;
            request.DocumentLevel = WebUserCredential.DocumentLevel;
            //
            var response = await ClaimServiceClient.GetAttachFileCountAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                AttachFileText = $"Đính kèm ({response.IntValue.ToString()} files)";
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Get số lượng file đính kèm bị lỗi !!!");
        }
        this.StateHasChanged();
    }

    bool ValidateForm()
    {
        //Validate rule
        if (Model.PayStatus)
        {
            toastService.ShowWarning("Hồ sơ không cho phép chỉnh sửa", "Không cho phép");
            return false;
        }

        //
        return true;
    }

    async void SaveMain()
    {
        try
        {
            //Validate input data
            var validateRes = ValidateForm();
            if (!validateRes) return;

            //EstDoneStatus
            if (!OriEstDoneStatus && Model.EstDoneStatus) Model.EstDoneDateTime = DateTime.Now;
            //EstDoneStatus
            if (!OriRepairStatus && Model.RepairStatus) Model.RepairDoneDatetime = DateTime.Now;

            //Request
            var request = new SaveCompenRequest_Request();
            var Credential = new Claim.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            request.CompenRequest = new grpcCompenRequestModel();
            ClassHelper.CopyPropertiesDataDateConverted(Model, request.CompenRequest);
            //Call api
            var response = await ClaimServiceClient.SaveCompenRequestAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", "Lưu thất bại");
            }

            //Reload data
            await OnValidSumit.InvokeAsync();
            await CloseMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Lưu tờ trình thất bại.");
        }
    }
    async Task CloseMain()
    {
        await OnVisibleChanged(false);
    }
    #endregion

    #region Items
    private bool AttachFileVisbible { get; set; } = false;
    void ShowAttachFiles()
    {
        AttachFileVisbible = true;
        StateHasChanged();
    }

    private bool EstimationVisbible { get; set; } = false;
    void ShowEstimation()
    {
        EstimationVisbible = true;
        StateHasChanged();
    }

    private async void RepairEstimation_Submit(RepairEstimation_ReturnModel estReturn)
    {
        Model.EstRepairPrice = estReturn.EstRepairPrice;
        //
        await Get_AttachFileCount();
    }
    #endregion



}
