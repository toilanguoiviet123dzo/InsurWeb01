@page "/attachfiles"
@using Admin.Services
@using Claim.Services
@using Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcResourceService.grpcResourceServiceClient resourceServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<br />
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@DetailData"
                ColumnResizeMode="DataGridColumnResizeMode.Component"
                EditMode="DataGridEditMode.PopupEditForm"
                PageSize="@PageRowCount"
                ShowFilterRow="true"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                RowRemoving="@((dataRow) => OnRowRemoving(dataRow))"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))"
                RowInsertStart="@(() => OnRowEditStarting(null))">
        <Columns>
            <DxDataGridCommandColumn Width="6rem" VisibleIndex="0">
                <HeaderCellTemplate>
                    <div class="text-center">
                        <a class="fa fa-plus" style="font-size:24px" @onclick="@(() => grid.StartRowEdit(null))" href="javascript:void(0);"></a>
                    </div>
                </HeaderCellTemplate>
                <CellTemplate>
                    <div style="display:flex">
                        @if (((AttachFileModel)context).AccountID == WebUserCredential.Username)
                        {
                            <div class="text-center" style="width:2rem">
                                <a class="fa fa-pencil" style="font-size:24px" @onclick="@(() => grid.StartRowEdit(context))" href="javascript:void(0);"></a>
                            </div>
                            <div class="text-center" style="width:2rem">
                                <a class="fa fa-times" style="font-size:24px; color:red" @onclick="@(() => OnRowRemoving(context as AttachFileModel))" href="javascript:void(0);"></a>
                            </div>
                        }
                        <!--Download file-->
                        <div class="text-center" style="width:2rem">
                            <a class="fa fa-cloud-download" style="font-size:24px; color:green" @onclick="@(() => DownLoadFile(context as AttachFileModel))" href="javascript:void(0);"></a>
                        </div>
                    </div>
                </CellTemplate>
            </DxDataGridCommandColumn>
            <DxDataGridDateEditColumn Field="@nameof(AttachFileModel.IssueDate)"
                                      Caption="Issue time"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="10rem" />
            <DxDataGridColumn Field="@nameof(AttachFileModel.FileName)"
                              Caption="FileName"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(AttachFileModel.Title)"
                              Caption="Ghi chú"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(AttachFileModel.SecureLevel)"
                              Caption="Mức độ bảo mật"
                              Width="8rem" />
        </Columns>
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <!--DocumentLevel-->
                    <DxFormLayoutItem Caption="Mức độ bảo mật: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxComboBox @bind-Value="@EditContext.SecureLevel"
                                        Data="@DocumentLevelList"
                                        AllowUserInput="true"
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        TextFieldName="@nameof(OptionListModel.ItemName)"
                                        ValueFieldName="@nameof(OptionListModel.IntCode)"
                                        SelectedItemChanged="@((OptionListModel value) => {
                                                                   EditContext.SecureLevel = value.IntCode;
                                                                   EditContext.SecureLevelName = value.ItemName;
                                                               })" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--Notes-->
                    <DxFormLayoutItem Caption="Notes: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Title" />
                            <ValidationMessage For="@(() => EditContext.Title)" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--Upload file-->
                    <DxFormLayoutItem Caption="Upload file: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <InputFile OnChange="@(async(e) => await LoadFile(e))" />
                            <ValidationMessage For="@(() => EditContext.FileName)" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--OK Cancel-->
                    <DxFormLayoutItem ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <div class="text-center">
                                <DxButton RenderStyle="@ButtonRenderStyle.Success" style="width:100px; font-size:15px" SubmitFormOnClick="true" Text="OK" />
                                <DxButton RenderStyle="@ButtonRenderStyle.Danger" style="width:100px; font-size:15px" @onclick="@OnCancelButtonClick" Text="Cancel" />
                            </div>
                        </Template>
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
    </DxDataGrid>
    <br />
    <div class="text-center">
        <MyButtonOK OnClick="ShowConfirm_SaveMain" />
        <MyButtonCancel OnClick="ShowConfirm_CancelSaveMain" />
    </div>
</div>
<!--Confirm dialog-->
<MessageBox Title="Đính kèm file" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

@code{
    [Parameter]
    public string VoucherNo { get; set; } = "21000001";
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback OnValidSumit { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private async Task OnVisibleChanged(bool newValue)
    {
        await VisibleChanged.InvokeAsync(newValue);
    }

    //
    private int PageRowCount = MyConstant.Grid_PageRowCount;
    FormEditContext EditContext = null;
    // Detail data
    readonly ObservableCollection<AttachFileModel> DetailData = new ObservableCollection<AttachFileModel>();
    // OptionList
    private List<OptionListModel> CategoryList = new List<OptionListModel>();
    private List<OptionListModel> DocumentLevelList = new List<OptionListModel>();
    //
    // Confirm dialog
    private string ConfirmAction = "";
    private string ConfirmMessage = "";
    private bool ConfirmVisible = false;
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        DisplayMain();
    }
    #region Load data
    async Task LoadMaster()
    {

        //...
        CategoryList = await masterService.Load_OptionList("001");
        DocumentLevelList = await masterService.Load_OptionList("003");
    }


    async void DisplayMain()
    {
        try
        {
            //Filter
            var request = new Resource.Services.GetResourceFiles_Request()
            {
                Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                },
                OwnerID = VoucherNo
            };

            //Get data from DB
            DetailData.Clear();
            var response = await resourceServiceClient.GetResourceFilesAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                foreach (var item in response.Records)
                {
                    var dataRow = new AttachFileModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //DocumentLevelName
                    var DocumentLevel = DocumentLevelList.Find(x => x.IntCode == item.SecureLevel);
                    if (DocumentLevel != null)
                    {
                        dataRow.SecureLevelName = DocumentLevel.ItemName;
                    }
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //Doc security check
                    if (dataRow.SecureLevel <= WebUserCredential.DocumentLevel)
                    {
                        DetailData.Add(dataRow);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load attach files failed.");
        }
        //
    }
    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        //Save main
        if (ConfirmAction == "SaveMain")
        {
            SaveMain();
        }
        //Cancel save main
        if (ConfirmAction == "CancelSaveMain")
        {
            CancelSaveMain();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }

    //Cancel changed
    void ShowConfirm_CancelSaveMain()
    {
        CancelSaveMain();
    }
    async void CancelSaveMain()
    {
        await OnVisibleChanged(false);
    }

    //Save main
    void ShowConfirm_SaveMain()
    {
        SaveMain();
    }

    //Check changed
    bool Check_Changed()
    {
        foreach (AttachFileModel row in DetailData)
        {
            if (row.UpdMode != 0)
            {
                return true;
            }
        }
        return false;
    }
    //
    async void SaveMain()
    {
        try
        {
            //Check changed
            if (!Check_Changed())
            {
                //Close form
                await OnVisibleChanged(false);
                return;
            }

            //Request
            var request = new Resource.Services.SaveResourceFiles_Request();
            var Credential = new Resource.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            foreach (AttachFileModel row in DetailData)
            {
                if (row.UpdMode != 0)
                {
                    //Convert to DB row
                    var dbRow = new grpcResourceFileModel();
                    ClassHelper.CopyPropertiesDataDateConverted(row, dbRow);
                    request.Records.Add(dbRow);
                }
            }
            //Call api
            var response = await resourceServiceClient.SaveResourceFilesAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                await OnValidSumit.InvokeAsync();
            }
            else
            {
                toastService.ShowError("", "Đính kèm file thất bại");
            }
            //Close form
            await OnVisibleChanged(false);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Save failed.");
        }
    }
    
    #endregion

    #region Grid main
    //Confirm delete
    AttachFileModel DeletedRow = null;
    void OnRowRemoving(AttachFileModel dataRow)
    {
        DeletedRow = dataRow;

        //Show popup confirm
        ConfirmMessage = "Xóa file đình kèm?";
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }

    //Cancel edit
    async Task OnCancelButtonClick()
    {
        await grid.CancelRowEdit();
        EditContext = null;
    }

    async void DeleteRow()
    {
        //Set to delete mode
        if (DeletedRow.UpdMode == 1)
        {
            //Remove new row from data source
            DetailData.Remove(DeletedRow);
        }
        else
        {
            //Mark to delete
            DeletedRow.UpdMode = 3;
        }

        //Refresh layout
        await grid.Refresh();
    }
    //Update row
    async Task UpdateRow()
    {
        //Update for edit field
        var backupRow = new AttachFileModel();
        ClassHelper.CopyPropertiesData(EditContext.EditingRow, backupRow);
        //
        EditContext.EditingRow.IssueDate = DateTime.Now;
        EditContext.EditingRow.CategoryID = EditContext.CategoryID;
        EditContext.EditingRow.FileName = EditContext.FileName;
        EditContext.EditingRow.Title = EditContext.Title;
        EditContext.EditingRow.FileContent = EditContext.FileContent;
        EditContext.EditingRow.IsFileChanged = EditContext.IsFileChanged;
        EditContext.EditingRow.SecureLevel = EditContext.SecureLevel;
        //DocumentLevelName
        var DocumentLevel = DocumentLevelList.Find(x => x.IntCode == EditContext.SecureLevel);
        if (DocumentLevel != null)
        {
            EditContext.EditingRow.SecureLevelName = DocumentLevel.ItemName;
        }

        //Update mode
        if (EditContext.EditingRow.UpdMode == 0 || EditContext.EditingRow.UpdMode == 3)
        {
            EditContext.EditingRow.UpdMode = 2;
        }

        //Insert to datasource
        if (EditContext.EditingRow.UpdMode == -1)
        {
            EditContext.EditingRow.UpdMode = 1;
            DetailData.Add(EditContext.EditingRow);
        }

        //Close popup & refresh data
        await grid.CancelRowEdit();
        await grid.Refresh();
    }
    // Edit row model
    DxDataGrid<AttachFileModel> grid;
    class FormEditContext : AttachFileModel
    {
        public FormEditContext(AttachFileModel row)
        {
            //Saved data
            EditingRow = row;

            //Editable data only
            IssueDate = EditingRow.IssueDate;
            CategoryID = EditingRow.CategoryID;
            FileName = EditingRow.FileName;
            Title = EditingRow.Title;
            FileContent = EditingRow.FileContent;
            IsFileChanged = EditingRow.IsFileChanged;
            SecureLevel = EditingRow.SecureLevel;
            SecureLevelName = EditingRow.SecureLevelName;
        }
        public AttachFileModel EditingRow { get; set; }
        public Action StateHasChanged { get; set; }
    }

    //Get data for edit/insert
    void OnRowEditStarting(AttachFileModel editingRow)
    {
        //Init new row
        if (editingRow == null)
        {
            editingRow = new AttachFileModel();
            //
            //DocumentLevel -> set if 1 option
            if (DocumentLevelList.Count == 1)
            {
                editingRow.SecureLevel = DocumentLevelList.FirstOrDefault().IntCode;
            }
            //
            editingRow.AccountID = WebUserCredential.Username;
            editingRow.OwnerID = VoucherNo;
            editingRow.IssueDate = DateTime.Now;
            editingRow.UpdMode = -1;
        }
        EditContext = new FormEditContext(editingRow);
        //
        StateHasChanged();
    }
    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<AttachFileModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += myColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }

    #endregion

    #region Screen items

    private IBrowserFile selectedFile;
    async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;

            //Update edit context
            Stream stream = selectedFile.OpenReadStream(10000000);
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            //
            EditContext.FileName = selectedFile.Name;
            EditContext.FileContent = ms.ToArray();
            EditContext.IsFileChanged = true;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load file bị lỗi");
        }
    }

    async void DownLoadFile(AttachFileModel dataRow)
    {
        //Download file content
        if (dataRow.FileContent == null || dataRow.FileContent.Length == 0)
        {
            var request = new Resource.Services.String_Request();
            var Credential = new Resource.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            request.StringValue = dataRow.ResourceID;
            //
            var response = await resourceServiceClient.GetResourceFileAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                dataRow.FileContent = ClassHelper.ByteArray_FromByteString(response.Record.FileContent);
            }
        }
        if (dataRow.FileContent == null || dataRow.FileContent.Length == 0)
        {
            toastService.ShowError("", "Download file thất bại !!");
            return;
        }

        //call javascript function to download the file
        await JsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream", Convert.ToBase64String(dataRow.FileContent), dataRow.FileName);
    }

    #endregion
    //
}