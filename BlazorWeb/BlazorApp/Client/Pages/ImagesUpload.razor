@using Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcResourceService.grpcResourceServiceClient resourceServiceClient;
@inject MasterService masterService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService


<br />
<EditForm Model="@UpLoadFile" OnValidSubmit="@SaveMain">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <ValidationMessage For="@(() => UpLoadFile.FileName)" />

    <img id="ImagePreView" src="">
    <button type="submit">Submit</button>

    <div>
        <label for="fileToUpload">Upload ảnh</label><br />
        <input type="file" name="fileToUpload" id="fileToUpload" onchange="uploadFile_FileSelected();" accept="image/*" capture="camera" />
    </div>
    <div id="details"></div>
    <div>
        <input type="button" onclick="uploadFile()" value="Upload" />
    </div>
    <div id="progress"></div>

</EditForm>


<InputFile OnChange="@(async(e) => await LoadFile(e))" />




<!--Confirm dialog-->
<MessageBox Title="Đính kèm file" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

@code {
    [Parameter]
    public string VoucherNo { get; set; } = "21000001";
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback OnValidSumit { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private async Task OnVisibleChanged(bool newValue)
    {
        await VisibleChanged.InvokeAsync(newValue);
    }
    //
    private UpLoadFileModel UpLoadFile = new UpLoadFileModel();
    // Confirm dialog
    private string ConfirmAction = "";
    private string ConfirmMessage = "";
    private bool ConfirmVisible = false;
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

    }
    #region Load data
    async Task LoadMaster()
    {

        //...

    }


    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Save main
        if (ConfirmAction == "SaveMain")
        {
            SaveMain();
        }
        //Cancel save main
        if (ConfirmAction == "CancelSaveMain")
        {
            CancelSaveMain();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }

    //Cancel changed
    void ShowConfirm_CancelSaveMain()
    {
        CancelSaveMain();
    }
    async void CancelSaveMain()
    {
        await OnVisibleChanged(false);
    }

    //Save main
    void ShowConfirm_SaveMain()
    {
        SaveMain();
    }
    //
    async void SaveMain()
    {
        try
        {
            //Request
            var request = new Resource.Services.SaveResourceFiles_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            //

            //Call api
            var response = await resourceServiceClient.SaveResourceFilesAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                await OnValidSumit.InvokeAsync();
            }
            else
            {
                toastService.ShowError("", "Đính kèm file thất bại");
            }
            //Close form
            await OnVisibleChanged(false);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Save failed.");
        }
    }

    #endregion



    #region Screen items

    private IBrowserFile selectedFile;
    async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;

            //Update edit context
            Stream stream = selectedFile.OpenReadStream(10000000);
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            //
            UpLoadFile.FileName = selectedFile.Name;
            UpLoadFile.FileContent = ms.ToArray();
            UpLoadFile.IsFileChanged = true;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load file bị lỗi");
        }
    }

    async void DownLoadFile(UpLoadFileModel dataRow)
    {
        //Download file content
        if (dataRow.FileContent == null || dataRow.FileContent.Length == 0)
        {
            var request = new Resource.Services.String_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            request.StringValue = dataRow.ResourceID;
            //
            var response = await resourceServiceClient.GetResourceFileAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                dataRow.FileContent = ClassHelper.ByteArray_FromByteString(response.Record.FileContent);
            }
        }
        if (dataRow.FileContent == null || dataRow.FileContent.Length == 0)
        {
            toastService.ShowError("", "Download file thất bại !!");
            return;
        }

        //call javascript function to download the file
        await JsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream", Convert.ToBase64String(dataRow.FileContent), dataRow.FileName);
    }

    #endregion
    //
}