@page "/ServiceList"
@using Admin.Services
@using System.Collections.ObjectModel
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient
@inject IToastService toastService

<br />
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@detailData"
                EditMode="DevExpress.Blazor.DataGridEditMode.PopupEditForm"
                PageSize="20"
                ShowFilterRow="true"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))"
                RowInsertStart="@(() => OnRowEditStarting(null))">
        <Columns>
            <DxDataGridColumn Field="@nameof(ServiceListModel.ID)" Visible="false" />
            <DxDataGridColumn Field="@nameof(ServiceListModel.ServiceName)"
                              Width="15rem" />
            <DxDataGridColumn Field="@nameof(ServiceListModel.Descriptions)"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(ServiceListModel.Host)"
                              Width="10rem" />
            <DxDataGridSpinEditColumn Field="@nameof(ServiceListModel.Port)"
                                      Width="5rem" />
            <DxDataGridColumn Field="@nameof(ServiceListModel.Url)"
                              Width="20rem" />
            <DxDataGridDateEditColumn Field="@nameof(ServiceListModel.CreatedOn)"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      EditorVisible="false"
                                      Width="10rem" />
            <DxDataGridDateEditColumn Field="@nameof(ServiceListModel.ModifiedOn)"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      EditorVisible="false"
                                      Width="10rem" />
            <!--Command columns-->
            <MyGridCommand Grid="grid"
                           ShowAddnew="true"
                           ShowEdit="true"
                           ShowDelete="true"
                           OnRowRemoving="@((context) => OnRowRemoving(context as ServiceListModel))" />
        </Columns>
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <DxFormLayoutItem Caption="ServiceName: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.ServiceName" />
                            <ValidationMessage For="@(() => EditContext.ServiceName)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Descriptions: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Descriptions" />
                            <ValidationMessage For="@(() => EditContext.Descriptions)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Host: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Host" />
                            <ValidationMessage For="@(() => EditContext.Host)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Port: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxSpinEdit @bind-Value="@EditContext.Port" />
                            <ValidationMessage For="@(() => EditContext.Port)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Url: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Url" />
                            <ValidationMessage For="@(() => EditContext.Url)" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--OK Cancel-->
                    <MyGridEditFormOKCancel OnCancelClick="OnCancelButtonClick" />
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
    </DxDataGrid>
    <br />
    <div class="text-center">
        <MyButtonSave OnClick="ShowConfirm_SaveMain" />
        <MyButtonCancel OnClick="ShowConfirm_CancelSaveMain" />
    </div>
</div>
<MessageBox Title="@Program.ProgramName" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

@code {
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    FormEditContext EditContext = null;
    // Detail data
    readonly ObservableCollection<ServiceListModel> detailData = new ObservableCollection<ServiceListModel>();
    // Popup
    private string ConfirmMessage = "";
    private string ConfirmAction = "";
    private bool ConfirmVisible = false;
    //

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        DisplayMain();
        await Task.Delay(1);
    }
    async void DisplayMain()
    {
        try
        {
            //Filter
            var requestString = new Empty_Request()
            {
                Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                }

            };

            //Get data from DB
            detailData.Clear();
            var response = await adminServiceClient.GetServiceListAsync(requestString);
            if (response != null && response.ReturnCode == 200)
            {
                foreach (var item in response.ServiceList)
                {
                    ServiceListModel dataRow = new ServiceListModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //
                    detailData.Add(dataRow);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
            throw;
        }
    }
    //Save
    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        //Save main
        if (ConfirmAction == "SaveMain")
        {
            SaveMain();
        }
        //Cancel save main
        if (ConfirmAction == "CancelSaveMain")
        {
            CancelSaveMain();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }
    //
    //
    async void SaveMain()
    {
        try
        {
            var hasChanged = false;
            //Request
            SaveServiceList_Request request = new SaveServiceList_Request();
            var Credential = new UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            foreach (ServiceListModel row in detailData)
            {
                if (row.UpdMode != 0)
                {
                    //Convert to DB row
                    var dbRow = new grpcServiceList();
                    ClassHelper.CopyPropertiesDataDateConverted(row, dbRow);
                    request.ServiceList.Add(dbRow);
                    //
                    hasChanged = true;
                }
            }
            //Check changed
            if (!hasChanged)
            {
                //Message no change
                toastService.ShowInfo("", MyMessage.Info_NothingChanged);
                return;
            }

            //Call api
            var response = await adminServiceClient.SaveServiceListAsync(request);
            // Success
            if (response != null && response.ReturnCode == 200)
            {
                //Show success
                toastService.ShowSuccess("", MyMessage.Info_SaveSucess);
            }
            else
            {
                toastService.ShowError("", MyMessage.Error_SaveFailed);
            }
            
            //Reload data
            DisplayMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_SaveFailed);
        }

    }
    //
    //Cancel changed
    void ShowConfirm_CancelSaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        //Show popup confirm
        ConfirmMessage = "Cancel changed?";
        ConfirmAction = "CancelSaveMain";
        ConfirmVisible = true;
        StateHasChanged();
    }
    void CancelSaveMain()
    {
        //Reload data
        DisplayMain();
    }

    //Save main
    void ShowConfirm_SaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        //Show popup confirm
        ConfirmMessage = "Save changed?";
        ConfirmAction = "SaveMain";
        ConfirmVisible = true;
        StateHasChanged();
    }

    //Check changed
    bool Check_Changed()
    {
        foreach (ServiceListModel row in detailData)
        {
            if (row.UpdMode != 0)
            {
                return true;
            }
        }
        return false;
    }
    //Confirm delete
    ServiceListModel DeletedRow = null;
    void OnRowRemoving(ServiceListModel dataRow)
    {
        DeletedRow = dataRow;

        //Show popup confirm
        ConfirmMessage = "Delete row?";
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }

    //Cancel edit
    async Task OnCancelButtonClick()
    {
        await grid.CancelRowEdit();
        EditContext = null;
    }

    async void DeleteRow()
    {
        //Set to delete mode
        if (DeletedRow.UpdMode == 1)
        {
            //Remove new row from data source
            detailData.Remove(DeletedRow);
        }
        else
        {
            //Mark to delete
            DeletedRow.UpdMode = 3;
        }

        //Refresh layout
        await grid.Refresh();
    }
    //Update row
    async Task UpdateRow()
    {
        //Update for edit field
        var backupRow = new ServiceListModel();
        ClassHelper.CopyPropertiesData(EditContext.EditingRow, backupRow);
        //
        EditContext.EditingRow.ServiceName = EditContext.ServiceName;
        EditContext.EditingRow.Descriptions = EditContext.Descriptions;
        EditContext.EditingRow.Host = EditContext.Host;
        EditContext.EditingRow.Port = EditContext.Port;
        EditContext.EditingRow.Url = EditContext.Url;
        EditContext.EditingRow.ModifiedOn = DateTime.Now;
        //Update mode
        if (EditContext.EditingRow.UpdMode == 0 || EditContext.EditingRow.UpdMode == 3)
        {
            EditContext.EditingRow.UpdMode = 2;
        }

        //Insert to datasource
        if (EditContext.EditingRow.UpdMode == -1)
        {
            EditContext.EditingRow.UpdMode = 1;
            detailData.Add(EditContext.EditingRow);
        }

        //Close popup & refresh data
        await grid.CancelRowEdit();
        await grid.Refresh();
    }
    //Get data for edit/insert
    void OnRowEditStarting(ServiceListModel editingRow)
    {
        //Init new row
        if (editingRow == null)
        {
            editingRow = new ServiceListModel();
            //
            editingRow.CreatedOn = DateTime.Now;
            editingRow.ModifiedOn = DateTime.Now;
            editingRow.UpdMode = -1;
        }
        EditContext = new FormEditContext(editingRow);
    }

    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<ServiceListModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += myColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }

    // Edit row model
    DxDataGrid<ServiceListModel> grid;
    class FormEditContext : ServiceListModel
    {
        public FormEditContext(ServiceListModel ServiceListModel)
        {
            //Saved data
            EditingRow = ServiceListModel;

            //Editable data only
            ServiceName = EditingRow.ServiceName;
            Descriptions = EditingRow.Descriptions;
            Host = EditingRow.Host;
            Port = EditingRow.Port;
            Url = EditingRow.Url;
        }
        public ServiceListModel EditingRow { get; set; }
        public Action StateHasChanged { get; set; }
    }
}
