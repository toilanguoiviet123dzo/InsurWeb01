@page "/ClaimRequest"
@using Admin.Services
@using Claim.Services
@using Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject MasterService masterService;
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime;
@inject IToastService toastService
@using System.Collections.Concurrent
@using System.Threading

<!--Filter-->
<MyCard Title="Bộ lọc dữ liệu">
    <CardBody>
        <div class="container-fluid">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Phone-->
                <div class="col-12 col-lg-2">
                    <MyTextEdit @bind-Text="Filter_CusPhone"
                                Literal="Phone"
                                Class="text-blue font-weight-bold" />
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-2">
                    <MyTextEdit @bind-Text="Filter_DeviceIMEI"
                                Literal="Số IMEI thiết bị"
                                Class="text-purple font-weight-bold" />
                </div>
                <!--Tên khách hàng-->
                <div class="col-12 col-lg-2">
                    <MyTextEdit @bind-Text="Filter_CusFullname"
                                Literal="Tên khách hàng" />
                </div>
                <!--Chi nhánh bồi thường-->
                <div class="col-12 col-lg-2">
                    <MyComboBox @bind-Value="Filter_Branch"
                                Data="BranchList"
                                Clearable="true"
                                TextFieldName="@(nameof(BranchMasterModel.BranchName))" 
                                Literal="Chi nhánh bồi thường"/>
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row align-items-end">
                <!--Công ty bảo hiểm-->
                <div class="col-12 col-lg-2">
                    <MyComboBox @bind-Value="Filter_Insure"
                                Data="InsureList"
                                Clearable="true"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                Literal="Công ty bảo hiểm"/>
                </div>
                <!--Thời gian-->
                <div class="col-12 col-lg-4">
                    <div class="row">
                        <!--Time flag-->
                        <div class="col-12 col-lg-4">
                            <MyComboBox @bind-Value="Filter_TimeFlag"
                                        Data="TimeFlagList"
                                        TextFieldName="@(nameof(CodeNameModel.Name))"
                                        TextChanged="@((string text) =>
                                                       {
                                                            var timeRange = MyDateTimeSelector.Select_DateTimeRange1(Filter_TimeFlag);
                                                            Filter_StartDate = timeRange.StartDate;
                                                            Filter_EndDate = timeRange.EndDate;
                                                            this.StateHasChanged();
                                                       })"
                                        Clearable="true"
                                        Literal="Thời gian" />
                        </div>
                        <!--Start-->
                        <div class="col-6 col-lg-4">
                            <MyDateEdit @bind-Date="Filter_StartDate"
                                        Format="dd/MM/yyyy"
                                        Width="100%"
                                        Literal="Từ ngày" />
                        </div>
                        <!--End-->
                        <div class="col-6 col-lg-4">
                            <MyDateEdit @bind-Date="Filter_EndDate"
                                        Format="dd/MM/yyyy"
                                        Width="100%"
                                        Literal="Đến ngày" />
                        </div>
                    </div>
                </div>
                <!--Trạng thái-->
                <div class="col-12 col-lg-2 pr-lg-3">
                    <div class="row align-items-end">
                        <div class="col-8">
                            <MyComboBox @bind-Value="Filter_Status"
                                        Data="StatusList"
                                        TextFieldName="@(nameof(CodeNameModel.Name))"
                                        Clearable="true"
                                        Literal="Trạng thái" />
                        </div>
                        <div class="col-4">
                            <!--Check Chưa/Xong-->
                            <DxCheckBox Checked="@StatusCheck"
                                        CheckedChanged="@((bool newValue) => {
                                                      StatusCheck = newValue;
                                                      CheckName = newValue? "Xong" : "Chưa";
                                                  })">
                                <label> @CheckName </label>
                            </DxCheckBox>
                        </div>
                    </div>
                </div>
                <!--Search buttion-->
                <div class="col-12 col-lg-2 mt-2">
                    <MyButtonSearch OnClick="@(() => DisplayMain())" />
                </div>

            </div>

        </div><!--End container-->
    </CardBody>
</MyCard>

<!--Grid-->
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@DetailData"
                ColumnResizeMode="DataGridColumnResizeMode.Component"
                SelectionMode="DataGridSelectionMode.SingleSelectedDataRow"
                PageSize="@PageRowCount"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HtmlDataCellDecoration="@OnHtmlDataCellDecoration">
        <Columns>
            <!--Command columns-->
            <DxDataGridCommandColumn Width="5rem" VisibleIndex="0">
                <HeaderCellTemplate>
                    <div class="text-center">
                        <a class="fa fa-plus fa-2x" @onclick="@(() => OnRowEditStarting(null))"></a>
                    </div>
                </HeaderCellTemplate>
                <CellTemplate>
                    <div style="display:flex;justify-content:center">
                        @if (((ClaimRequestListModel)context).AcceptStatus)
                        {
                            <!--View-->
                            <div class="text-center" style="width:3rem">
                                <a class="fas fa-eye fa-2x" @onclick="@(() => OnRowEditStarting(context as ClaimRequestListModel))"></a>
                            </div>
                        }
                        else
                        {
                            <!--Edit-->
                            <div class="text-center" style="width:2.5rem">
                                <a class="fa fa-pencil fa-2x" @onclick="@(() => OnRowEditStarting(context as ClaimRequestListModel))"></a>
                            </div>
                            <!--Delete-->
                            <div class="text-center" style="width:2.5rem">
                                <a class="fa fa-times fa-2x text-danger" @onclick="@(() => OnRowRemoving(context as ClaimRequestListModel))"></a>
                            </div>
                        }
                    </div>
                </CellTemplate>
            </DxDataGridCommandColumn>
            <!--columns-->
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.ClaimNo)"
                              Caption="Số tiếp nhận"
                              SortOrder="DataGridColumnSortOrder.Descending"
                              Width="6rem" />
            <DxDataGridDateEditColumn Field="@nameof(ClaimRequestListModel.ClaimDate)"
                                      Caption="Ngày tiếp nhận"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="9rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.StatusName)"
                              Caption="Trạng thái"
                              Width="7rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.CusFullname)"
                              Caption="Tên khách hàng"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.CusPhone)"
                              Caption="Điện thoại"
                              Width="6rem" />
            <DxDataGridDateEditColumn Field="@nameof(ClaimRequestListModel.IncidentDate)"
                                      Caption="Ngày sự cố"
                                      DisplayFormat="dd/MM/yyyy"
                                      Width="6rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.DeviceModel)"
                              Caption="Model thiết bị"
                              Width="8rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.DeviceIMEI)"
                              Caption="Số IMEI thiết bị"
                              Width="8rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.PickupAddress)"
                              Caption="Địa chỉ lấy thiết bị"
                              Width="15rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.ClaimAccountName)"
                              Caption="Người tiếp nhận"
                              Width="7rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.BrancheName)"
                              Caption="Chi nhánh bồi thường"
                              Width="7rem" />
        </Columns>
    </DxDataGrid>
</div>
<!--Confirm dialog-->
<MessageBox Title="@Program.ProgramName" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />


@code {
    //Program
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }

    // Detail data
    private int PageRowCount = MyConstant.Grid_PageRowCount;
    DxDataGrid<ClaimRequestListModel> grid;
    readonly ObservableCollection<ClaimRequestListModel> DetailData = new ObservableCollection<ClaimRequestListModel>();

    // Master
    private List<BranchMasterModel> BranchList = new List<BranchMasterModel>();
    private List<OptionListModel> InsureList = new List<OptionListModel>();
    private List<CodeNameModel> StatusList = MyClaimStatus.Get_StatusList();
    private List<CodeNameModel> TimeFlagList = MyDateTimeSelector.Get_TimeRangeList();
    // Popup
    private MyPopup ClaimPopup;
    private string ConfirmMessage = "";
    private int ConfirmAction = 0;
    private bool ConfirmVisible = false;

    //Filter
    private string Filter_CusPhone = "";
    private string Filter_DeviceIMEI = "";
    private string Filter_CusFullname = "";
    private CodeNameModel Filter_Status { get; set; } = new CodeNameModel { CodeInt = 1, Name = "Thụ lý" };
    private CodeNameModel Filter_TimeFlag { get; set; }
    private DateTime Filter_StartDate { get; set; } = DateTime.Today.MinDate().ToLocalTime();
    private DateTime Filter_EndDate { get; set; } = DateTime.Today.MaxDate().ToLocalTime();
    private BranchMasterModel Filter_Branch = null;
    private OptionListModel Filter_Insure = null;
    //
    private string ClaimNo = "";
    private bool StatusCheck = false;
    private string CheckName = "Chưa";
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        await DisplayMain();
    }
    #region Load data
    async Task LoadMaster()
    {
        InsureList = await masterService.Load_OptionList("008");
        BranchList = await masterService.Load_BranchList();
    }
    //
    async Task DisplayMain()
    {
        try
        {
            //Filter
            var request = new Claim.Services.GetClaimRequestList_Request();
            request.Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            //CusPhone
            if (!string.IsNullOrWhiteSpace(Filter_CusPhone)) request.CusPhone = Filter_CusPhone;
            //DeviceIMEI
            if (!string.IsNullOrWhiteSpace(Filter_DeviceIMEI)) request.DeviceIMEI = Filter_DeviceIMEI;
            //CusFullname
            if (!string.IsNullOrWhiteSpace(Filter_CusFullname)) request.CusFullname = Filter_CusFullname;
            //BrancheID
            if (Filter_Branch != null && !string.IsNullOrWhiteSpace(Filter_Branch.BranchID)) request.BrancheID = Filter_Branch.BranchID;
            //InsurCompanyID
            if (Filter_Insure != null && !string.IsNullOrWhiteSpace(Filter_Insure.ItemCode)) request.InsurCompanyID = Filter_Insure.ItemCode;
            //Status
            if (Filter_Status != null && Filter_Status.CodeInt != 0) request.Status = Filter_Status.CodeInt;
            //Status check
            request.StatusCheck = StatusCheck;
            //Time range
            request.StartDate = Filter_StartDate.ToTimestampFromLocalTime();
            request.EndDate = Filter_EndDate.ToTimestampFromLocalTime();
            //
            var response = await ClaimServiceClient.GetClaimRequestListAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                if (response.ClaimRequests != null)
                {
                    //Get data from DB
                    DetailData.Clear();
                    //
                    foreach (var item in response.ClaimRequests)
                    {
                        //Parrent grid
                        var dataRow = new ClaimRequestListModel();
                        ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                        //Status name
                        dataRow.StatusName = MyClaimStatus.Get_StatusName(dataRow);
                        //
                        DetailData.Add(dataRow);
                    }
                }
            }
            if (DetailData.Count == 0)
            {
                toastService.ShowInfo("", MyMessage.Error_NoData);
            }
            await grid.Refresh();
        }
        catch
        {
            toastService.ShowError("", MyMessage.Error_LoadDataFailed);
        }
    }

    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == MyConstant.ConfirmAction_DeleteRow)
        {
            DeleteRow();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }
    //
    #endregion

    #region Grid main
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<ClaimRequestListModel> eventArgs)
    {
        //AcceptStatus
        if (eventArgs.DataItem.RepairStatus) eventArgs.Style += MyColor.DoneRowColor;
    }
    void OnHtmlDataCellDecoration(DataGridHtmlDataCellDecorationEventArgs<ClaimRequestListModel> eventArgs)
    {
        eventArgs.CssClass += " border-0";
        //eventArgs.Style += " ;font-weight:bold;text-align: right";
        //ClaimNo
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.ClaimNo))
        {
            eventArgs.Style += " ;font-weight:bold; color: blue";
        }
        //ClaimDate
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.ClaimDate))
        {
            eventArgs.Style += " ;color: green";
        }
        //StatusName
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.StatusName))
        {
            eventArgs.Style += " ;color: blue";
        }
        //DeviceIMEI
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.DeviceIMEI))
        {
            eventArgs.Style += " ;font-weight:bold";
        }
    }

    //Cancel edit
    async Task OnCancelButtonClick()
    {
        await grid.CancelRowEdit();
    }

    //Confirm delete
    ClaimRequestListModel DeletedRow = null;
    void OnRowRemoving(ClaimRequestListModel dataRow)
    {
        //Validate skip if approved
        if (dataRow.AcceptStatus)
        {
            toastService.ShowWarning("", MyMessage.Error_DeleteReadOnlyData);
            return;
        }
        //
        DeletedRow = dataRow;
        //Show popup confirm
        ConfirmMessage = MyMessage.Confirm_DeleteRow;
        ConfirmAction = MyConstant.ConfirmAction_DeleteRow;
        ConfirmVisible = true;
        StateHasChanged();
    }
    //
    async void DeleteRow()
    {
        try
        {
            //call api
            var request = new Claim.Services.SaveClaim_Request();
            request.Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.ClaimRequest = new grpcClaimRequestModel();
            request.ClaimRequest.ClaimNo = DeletedRow.ClaimNo;
            request.ClaimRequest.UpdMode = 3;
            //
            var response = await ClaimServiceClient.SaveClaimRequestAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                DetailData.Remove(DeletedRow);
                //
                toastService.ShowSuccess("", MyMessage.Info_DeleteSucess);
                //Refresh layout
                await grid.Refresh();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_DeleteFailed);
        }
    }

    //Get data for edit/insert
    async void OnRowEditStarting(ClaimRequestListModel editingRow)
    {
        if (editingRow == null)
        {
            //Addnew
            ClaimNo = "";
        }
        else
        {
            //ClaimNo
            ClaimNo = editingRow.ClaimNo;
        }
        //Show edit form
        var parameters = new DialogParameters { ["ClaimNo"] = ClaimNo };
        var result = await DialogService.Show<ClaimRequestEdit>("", parameters, MyOptions.GetPopupEditFormOptions(MaxWidth.Large)).Result;
        if (!result.Cancelled)
        {
            await DisplayMain();
        }
    }

    #endregion

}
