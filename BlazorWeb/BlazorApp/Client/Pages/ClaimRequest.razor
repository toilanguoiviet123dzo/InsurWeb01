@page "/ClaimRequest"
@using Admin.Services
@using Claim.Services
@using Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcClaimService.grpcClaimServiceClient ClaimServiceClient;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService
@using System.Collections.Concurrent
@using System.Threading

<!--Filter-->
<div class="card">
    <h5 class="card-header">Bộ lọc dữ liệu</h5>
    <div class="card-body">
        <div class="container">
            <!--Row 1-------------------------------------------------->
            <div class="row">
                <!--Phone-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Filter_CusPhone"
                                Literal="Phone"
                                InputCssClass="text-blue font-weight-bold" />
                </div>
                <!--Ngày tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyDateTimeEdit @bind-Date="Model.ClaimDate"
                                    Literal="Ngày tiếp nhận"
                                    InputCssClass="text-blue" />
                </div>
                <!--Người tiếp nhận-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ClaimAccountName"
                                ReadOnly="true"
                                Literal="Người tiếp nhận" />
                </div>
            </div>

            <!--Row 2-------------------------------------------------->
            <div class="row">
                <!--Phone-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusPhone"
                                Literal="Phone"
                                InputCssClass="text-blue font-weight-bold"
                                CssClass="cusphone-focus" />
                </div>
                <!--Tên khách hàng-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusFullname"
                                Literal="Tên khách hàng"
                                CssClass="cusfullname-focus" />
                </div>
                <!--Email-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusPhone"
                                Literal="SEmail" />
                </div>
                <!--Số CMND/CCCD-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.CusCardID"
                                Literal="Số CMND/CCCD" />
                </div>
            </div>

            <!--Row 3-------------------------------------------------->
            <div class="row">
                <!--Loại sản phẩm-->
                <div class="col-12 col-lg-3">
                    <MyMuteLabel Literal="Loại sản phẩm" />
                    <DxComboBox @ref="RefProduct"
                                @bind-Value="SelectedProduct"
                                Data="ProductList"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains"
                                TextFieldName="@(nameof(OptionListModel.ItemName))"
                                SelectedItemChanged="@((OptionListModel selectedRow) => {
                                                   Model.TPAProductID = selectedRow.ItemCode;
                                                   Model.TPAProductName = selectedRow.ItemName;
                                             })" />
                </div>
                <!--Số IMEI thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceIMEI"
                                Literal="Số IMEI thiết bị"
                                InputCssClass="text-purple font-weight-bold" />
                </div>
                <!--Model-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.DeviceModel"
                                Literal="Model" />
                </div>
            </div>

            <!--Row 4-------------------------------------------------->
            <div class="row">
                <!--Địa chỉ nhận thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.PickupAddress"
                                Literal="Địa chỉ nhận thiết bị"
                                CssClass="pickupaddress-focus" />
                </div>
                <!--Địa chỉ trả thiết bị-->
                <div class="col-12 col-lg-3">
                    <MyTextEdit @bind-Text="Model.ReturnAddress"
                                Literal="Địa chỉ trả thiết bị" />
                </div>
            </div>
        </div>
    </div>
</div>



<!--Parent grid-->
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@DetailData"
                ColumnResizeMode="DataGridColumnResizeMode.Component"
                EditMode="DataGridEditMode.PopupEditForm"
                SelectionMode="DataGridSelectionMode.SingleSelectedDataRow"
                PageSize="@PageRowCount"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HtmlDataCellDecoration="@OnHtmlDataCellDecoration">
        <Columns>
            <!--Command columns-->
            <DxDataGridCommandColumn Width="5rem" VisibleIndex="0">
                <HeaderCellTemplate>
                    <div class="text-center">
                        <a class="fa fa-plus" style="font-size:24px" @onclick="@(() => OnRowEditStarting(null))"></a>
                    </div>
                </HeaderCellTemplate>
                <CellTemplate>
                    <div style="display:flex;justify-content:center">
                        @if (((ClaimRequestListModel)context).AcceptStatus)
                        {
                            <!--View-->
                            <div class="text-center" style="width:3rem">
                                <a class="fas fa-eye" style="font-size: 24px; color: black" @onclick="@(() => OnRowEditStarting(context as ClaimRequestListModel))"></a>
                            </div>
                        }
                        else
                        {
                            <!--Edit-->
                            <div class="text-center" style="width:2.5rem">
                                <a class="fa fa-pencil" style="font-size:24px" @onclick="@(() => OnRowEditStarting(context as ClaimRequestListModel))"></a>
                            </div>
                            <!--Delete-->
                            <div class="text-center" style="width:2.5rem">
                                <a class="fa fa-times" style="font-size:24px; color:red" @onclick="@(() => OnRowRemoving(context as ClaimRequestListModel))"></a>
                            </div>
                        }
                    </div>
                </CellTemplate>
            </DxDataGridCommandColumn>
            <!--columns-->
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.ClaimNo)"
                              Caption="Số HSBT"
                              SortOrder="DataGridColumnSortOrder.Descending"
                              Width="6rem" />
            <DxDataGridDateEditColumn Field="@nameof(ClaimRequestListModel.AcceptDatetime)"
                                      Caption="Ngày tiếp nhận"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="9rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.StatusName)"
                              Caption="Trạng thái"
                              Width="8rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.BranchName)"
                              Caption="Chi nhánh"
                              Width="8rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.CarOwner)"
                              Caption="Tên NĐBH"
                              Width="10rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.PhoneNo)"
                              Caption="Điện thoại"
                              Width="7rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.VCXContractNo)"
                              Caption="Số HĐBH"
                              Width="7rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.LicensePlate)"
                              Caption="BKS (SK/SM)"
                              Width="7rem" />
            <DxDataGridDateEditColumn Field="@nameof(ClaimRequestListModel.CompenDateTime)"
                                      Caption="Ngày yêu cầu"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="9rem" />
            <DxDataGridDateEditColumn Field="@nameof(ClaimRequestListModel.AccidentDateTime)"
                                      Caption="Ngày tổn thất"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="9rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.AccidentPlace)"
                              Caption="Nơi xảy ra tai nạn"
                              Width="12rem" />
            <DxDataGridSpinEditColumn Field="@nameof(ClaimRequestListModel.EstDamageAmount)"
                                      DisplayFormat="N0"
                                      Caption="Ước tổn thất"
                                      Width="8rem" />
            <DxDataGridColumn Field="@nameof(ClaimRequestListModel.ReqPersonName)"
                              Caption="Cán bộ bồ thường"
                              Width="10rem" />
        </Columns>
    </DxDataGrid>
</div>
<!--Confirm dialog-->
<MessageBox Title="@Program.ProgramName" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

<!--Edit compen request-->
<MyPopup @bind-Visible="@ClaimEditVisible"
         VerticalAlignment="@VerticalAlignment.Top"
         HeaderText="Tờ trình"
         Width="1300px"
         ZIndex="1001">
    <BodyContentTemplate>
        <ClaimRequestEdit @bind-Visible="@ClaimEditVisible"
                          ClaimNo="@ClaimNo"
                          OnValidSumit="@(async() => await DisplayMain())" />
    </BodyContentTemplate>
</MyPopup>


@code {
    //Program
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    
    // Detail data
    private int PageRowCount = MyConstant.Grid_PageRowCount;
    DxDataGrid<ClaimRequestListModel> grid;
    readonly ObservableCollection<ClaimRequestListModel> DetailData = new ObservableCollection<ClaimRequestListModel>();

    // Master
    private List<UserAccountModel> UserList = new List<UserAccountModel>();
    private List<CodeNameModel> StatusList = new List<CodeNameModel>() {
        new CodeNameModel{CodeInt = 1, Name="Chưa tiếp nhận"},
        new CodeNameModel{CodeInt = 2, Name="Chưa Xử lý"}
    };
    private List<CodeNameModel> TimeFlagList = new List<CodeNameModel>() {
        new CodeNameModel{CodeInt = 1,Name="Tuần này"},
        new CodeNameModel{CodeInt = 2,Name="Tuần trước"},
        new CodeNameModel{CodeInt = 3,Name="Tháng này"},
        new CodeNameModel{CodeInt = 4,Name="Tháng trước"},
        new CodeNameModel{CodeInt = 5,Name="Năm nay"}
    };
    // Confirm dialog
    private string ConfirmAction = "";
    private string ConfirmMessage = "";
    private bool ConfirmVisible = false;
    private bool ClaimEditVisible { get; set; } = false;

    //Filter
    private string Filter_CusPhone = "";
    private string Filter_DeviceIMEI = "";
    private string Filter_CusFullname = "";
    private BranchMasterModel Filter_Branch = new BranchMasterModel();
    private OptionListModel Filter_Insure = new OptionListModel();
    
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Display data ..
        await DisplayMain();
    }
    #region Load data

    //
    async Task DisplayMain()
    {
        try
        {
            //Filter
            var request = new Claim.Services.GetClaimRequestList_Request();
            request.Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            //CustomerID
            request.CustomerID = WebUserCredential.Username;
            //Full datetime
            request.StartDate = DateTime.Today.MinDate().ToTimestamp();
            request.EndDate = DateTime.Today.MaxDate().ToTimestamp();

            //Get data from DB
            DetailData.Clear();
            //
            var response = await ClaimServiceClient.GetClaimRequestListAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                if (response.ClaimRequests != null)
                {
                    foreach (var item in response.ClaimRequests)
                    {
                        //Parrent grid
                        var dataRow = new ClaimRequestListModel();
                        ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                        //StatusName
                        if (!dataRow.AcceptStatus) dataRow.StatusName = "Chưa tiếp nhận";
                        if (dataRow.CancelStatus) dataRow.StatusName = "Đã hủy hồ sơ";
                        if (dataRow.AcceptStatus) dataRow.StatusName = "Đã tiếp nhận";
                        if (dataRow.CompenStatus) dataRow.StatusName = "Đang xử lý";
                        if (dataRow.RepairStatus) dataRow.StatusName = "Đã sửa xong";
                        if (dataRow.AprRepairStatus) dataRow.StatusName = "Đã nghiệp thu";
                        if (dataRow.PayStatus) dataRow.StatusName = "Đã chi trả";
                        //
                        DetailData.Add(dataRow);
                    }
                }
            }
            if (DetailData.Count == 0)
            {
                toastService.ShowInfo("", "Không có dữ liệu.");
            }
            await grid.Refresh();
        }
        catch
        {
            toastService.ShowError("", "Nạp dữ liệu bị lỗi !!!");
        }
    }

    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }
    //
    #endregion

    #region Grid main
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<ClaimRequestListModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        //CloseStatus
        if (eventArgs.DataItem.CancelStatus) eventArgs.Style += myColor.DisabledRowColor;
        //PayStatus
        if (eventArgs.DataItem.PayStatus) eventArgs.Style += myColor.DoneRowColor;
    }
    void OnHtmlDataCellDecoration(DataGridHtmlDataCellDecorationEventArgs<ClaimRequestListModel> eventArgs)
    {
        eventArgs.CssClass += " border-0";
        //eventArgs.Style += " ;font-weight:bold;text-align: right";
        //ClaimNo
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.ClaimNo))
        {
            eventArgs.Style += " ;font-weight:bold; color: blue";
        }
        //VCXContractNo
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.VCXContractNo))
        {
            eventArgs.Style += " ;font-weight:bold; color: maroon";
        }
        //LicensePlate
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.LicensePlate))
        {
            eventArgs.Style += " ;font-weight:bold; color: navy";
        }
        //CompenDateTime
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.CompenDateTime))
        {
            eventArgs.Style += " ;font-weight:bold; color: green";
        }
        //AccidentDateTime
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.AccidentDateTime))
        {
            eventArgs.Style += " ;font-weight:bold; color: maroon";
        }
        //EstDamageAmount
        if (eventArgs.FieldName == nameof(ClaimRequestListModel.EstDamageAmount))
        {
            eventArgs.Style += " ;font-weight:bold; color: blue; text-align: right";
        }
    }

    //Cancel edit
    async Task OnCancelButtonClick()
    {
        await grid.CancelRowEdit();
    }

    //Confirm delete
    ClaimRequestListModel DeletedRow = null;
    void OnRowRemoving(ClaimRequestListModel dataRow)
    {
        //Validate skip if approved
        if (dataRow.AprStatus)
        {
            toastService.ShowWarning("", "Tờ đã duyệt nên không thể xóa.");
            return;
        }
        //
        DeletedRow = dataRow;
        //Show popup confirm
        ConfirmMessage = "Xóa tờ trình?";
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }
    //
    async void DeleteRow()
    {
        try
        {
            //call api
            var request = new Claim.Services.SaveClaimRequest_Request();
            request.Credential = new Claim.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.ClaimRequest.ClaimNo = DeletedRow.ClaimNo;
            request.ClaimRequest.UpdMode = 3;
            //
            var response = await ClaimServiceClient.SaveClaimRequestAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                DetailData.Remove(DeletedRow);
                //
                toastService.ShowSuccess("", "Xóa tờ trình thành công");
                //Refresh layout
                await grid.Refresh();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Xóa tờ trình thất bại.");
        }
    }

    //Get data for edit/insert
    void OnRowEditStarting(ClaimRequestListModel editingRow)
    {
        if (editingRow == null)
        {
            //Addnew
            ClaimNo = "";
        }
        else
        {
            //ClaimNo
            ClaimNo = editingRow.ClaimNo;
        }
        ClaimEditVisible = true;
        StateHasChanged();
    }
    //Update row
    async Task UpdateRow()
    {
        //Close popup & refresh data
        await grid.CancelRowEdit();
        await grid.Refresh();
    }

    #endregion

    #region Screen items



    #endregion
    //
}
