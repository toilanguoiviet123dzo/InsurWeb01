@page "/repairestimation"
@using Cores.Admin.Services
@using Cores.Compensation.Services
@using Cores.Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject grpcCompensationService.grpcCompensationServiceClient compensationServiceClient;
@inject SettingService settingService;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService
@using System.Collections.Concurrent
@using System.Threading


<br />

<style>

    .dxbs-fl .row {
        margin-left: 0;
        margin-right: 0;
        display: block;
    }

    .col-form-label-sm {
        font-size: 0.77rem;
        line-height: 1.5;
        padding: 0;
    }

    .col-md-6 {
        -webkit-box-flex: 0;
        -webkit-flex: 0 0 50%;
        -ms-flex: 0 0 50%;
        flex: 0 0 50%;
        max-width: 100% !important;
    }
</style>

<!--EstDateTime-->
<div class="container">
    <div class="row align-items-end">
        <div class="col-6 col-lg-2">
            <MyDateEdit @bind-Date="@Model.EstDateTime"
                        Format="dd/MM/yyyy HH:mm"
                        Literal="Ngày giờ báo giá"
                        ReadOnly="true"
                        Width="12rem" />
        </div>
        <div class="col-6 col-lg-3">
            <MyButton Text="Tham khảo báo giá"
                      OnClick="RefEstimation"
                      Width="15rem">
                <Icon>
                    <i class="fa fa-calculator" aria-hidden="true" style="padding-right:10px"></i>
                </Icon>
            </MyButton>
        </div>

    </div>
    <div class="row align-items-end">
        <div class="col-6 col-lg-4">
            <MyMuteLabel Literal="Nội dung báo giá" />
            <DxMemo @ref="RefEstContent"
                    @bind-Text="@Model.EstContent"
                    Rows="2"
                    CssClass="estcontent-focus" />
        </div>
        <div class="col-6 col-lg-3">
            <div class="row mt-2 mb-0 pb-0">
                <DxCheckBox @bind-Checked="Model.IsTemplate">
                    <label style="color:blue"> Báo giá mẫu</label>
                </DxCheckBox>
            </div>
            <div class="row">
                <DxTextBox @bind-Text="Model.TemplateName"
                            ReadOnly="!Model.IsTemplate"/>
            </div>
        </div>
        <div class="col-6 col-lg-3 pt-2">
            <!--Attach files-->
            <MyButton BtnCss="btn btn-info"
                      Text="@AttachFileText"
                      OnClick="ShowAttachFiles"
                      Width="15rem" />
        </div>
    </div>
</div>
<br />
<!--Parent grid-->
<div style="width:100%">
    <DxDataGrid @ref="@grid"
                Data="@DetailData"
                KeyFieldName="@nameof(EstGroupItemModel.RecNo)"
                ShowDetailRow="true"
                ColumnResizeMode="DataGridColumnResizeMode.Component"
                EditMode="DataGridEditMode.PopupEditForm"
                SelectionMode="DataGridSelectionMode.SingleSelectedDataRow"
                PageSize="@PageRowCount"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HtmlDataCellDecoration="@OnHtmlDataCellDecoration"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))"
                RowInsertStart="@(() => OnRowEditStarting(null))">
        <Columns>
            <DxDataGridSpinEditColumn Field="@nameof(EstGroupItemModel.LineNo)"
                                      Caption="No."
                                      DisplayFormat="N0"
                                      SortOrder="DataGridColumnSortOrder.Ascending"
                                      Width="3rem" />
            <DxDataGridDateEditColumn Field="@nameof(EstGroupItemModel.IssueDateTime)"
                                      Caption="Ngày giờ"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="10rem" />
            <DxDataGridColumn Field="@nameof(EstGroupItemModel.EstItem)"
                              Caption="FileName"
                              Width="15rem" />
            <DxDataGridSpinEditColumn Field="@nameof(EstGroupItemModel.RepairPrice)"
                                      Caption="Tổng cộng"
                                      DisplayFormat="N0"
                                      Width="7rem" />
            <DxDataGridSpinEditColumn Field="@nameof(EstGroupItemModel.AprRepairPrice)"
                                      Caption="Được duyệt"
                                      DisplayFormat="N0"
                                      Width="7rem" />
            <!--Command columns-->
            <MyGridCommand Grid="grid"
                           ShowAddnew="RoleMode == 1"
                           ShowEdit="RoleMode == 1"
                           ShowDelete="RoleMode == 1"
                           OnRowRemoving="@((context) => OnRowRemoving(context as EstGroupItemModel))"
                           VisibleIndex="0" />
        </Columns>
        <!--Edit form-->
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <!--LineNo-->
                    <DxFormLayoutItem Caption="No." ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxMaskedInput @bind-Value="@EditContext.LineNo"
                                           CssClass="cw-320"
                                           Mask="n0" />
                            <ValidationMessage For="@(() => EditContext.LineNo)" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--EstItem-->
                    <DxFormLayoutItem Caption="Hạng mục tổng" ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.EstItem" />
                            <ValidationMessage For="@(() => EditContext.EstItem)" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--OK Cancel-->
                    <MyGridEditFormOKCancel OnCancelClick="OnCancelButtonClick" />
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
        <!--Detail grid-->
        <DetailRowTemplate Context="parentrow">
            @{
                ParentRow = (EstGroupItemModel)parentrow;
            }
            <DxTabs>
                <DxTabPage Text="Hạng mục chi tiết">
                    <div class="p-1">
                        <DxDataGrid @ref="@ChildGrid1"
                                    DataAsync="@GetChildDataAsync(parentrow)"
                                    SelectionMode="DataGridSelectionMode.None"
                                    EditMode="DataGridEditMode.PopupEditForm"
                                    HtmlRowDecoration="@ChildGrid1_OnHtmlRowDecoration"
                                    HtmlDataCellDecoration="@ChildGrid1_OnHtmlDataCellDecoration"
                                    PageSize="@PageRowCount">
                            <!--Columns-->
                            <Columns>
                                <DxDataGridCommandColumn Width="5rem" VisibleIndex="0" Visible="RoleMode != 0">
                                    <HeaderCellTemplate>
                                        <!--Addnew-->
                                        @if (RoleMode == 1)
                                        {
                                            <div class="text-center">
                                                <a class="fa fa-plus" style="font-size:24px" @onclick="@(() => ChildGrid1_OnRowEditStarting(null))"></a>
                                            </div>
                                        }
                                    </HeaderCellTemplate>
                                    <CellTemplate>
                                        <div style="display:flex;justify-content:center">
                                            <!--Edit-->
                                            @if (RoleMode != 0)
                                            {
                                                <div class="text-center" style="width:2.5rem">
                                                    <a class="fa fa-pencil" style="font-size:24px" @onclick="@(() => ChildGrid1_OnRowEditStarting(context as EstDetailItemModel))"></a>
                                                </div>
                                            }
                                            <!--Delete-->
                                            @if (RoleMode == 1)
                                            {
                                                <div class="text-center" style="width: 2.5rem">
                                                    <a class="fa fa-trash-o" style="font-size:24px; color:red" @onclick="@(() => ChildGrid1_OnRowRemoving(context as EstDetailItemModel))"></a>
                                                </div>
                                            }
                                        </div>
                                    </CellTemplate>
                                </DxDataGridCommandColumn>
                                <!--Linno-->
                                <DxDataGridSpinEditColumn Field="@nameof(EstDetailItemModel.LineNo)"
                                                          Caption="No."
                                                          DisplayFormat="N0"
                                                          SortOrder="DataGridColumnSortOrder.Ascending"
                                                          Width="3rem">
                                </DxDataGridSpinEditColumn>
                                <!--IssueDateTime-->
                                <DxDataGridDateEditColumn Field="@nameof(EstDetailItemModel.IssueDateTime)"
                                                          Caption="Ngày giờ"
                                                          DisplayFormat="dd/MM/yyyy HH:mm"
                                                          Width="10rem" />
                                <!--EstItem-->
                                <DxDataGridColumn Field="@nameof(EstDetailItemModel.EstItem)"
                                                  Caption="Hạng mục chi tiết"
                                                  Width="12rem">
                                </DxDataGridColumn>
                                <!--Quantity-->
                                <DxDataGridSpinEditColumn Field="@nameof(EstDetailItemModel.Quantity)"
                                                          Caption="Số lượng"
                                                          DisplayFormat="N0"
                                                          Width="5rem">
                                </DxDataGridSpinEditColumn>
                                <!--UnitPrice-->
                                <DxDataGridSpinEditColumn Field="@nameof(EstDetailItemModel.UnitPrice)"
                                                          Caption="Đơn giá"
                                                          DisplayFormat="N0"
                                                          Width="8rem">
                                </DxDataGridSpinEditColumn>
                                <!--Amount-->
                                <DxDataGridSpinEditColumn Field="@nameof(EstDetailItemModel.Amount)"
                                                          Caption="Thành tiền"
                                                          DisplayFormat="N0"
                                                          Width="8rem" />
                                <!--AprAmount-->
                                <DxDataGridSpinEditColumn Field="@nameof(EstDetailItemModel.AprAmount)"
                                                          Caption="Duyệt"
                                                          DisplayFormat="N0"
                                                          Width="8rem" />
                                <!--Notes-->
                                <DxDataGridColumn Field="@nameof(EstDetailItemModel.Notes)"
                                                  Caption="Ghi chú"
                                                  Width="12rem">
                                </DxDataGridColumn>
                            </Columns>
                            <!--Total summary-->
                            <TotalSummary>
                                <DxDataGridSummaryItem Field=@nameof(EstDetailItemModel.Quantity)
                                                       SummaryType=SummaryItemType.Sum
                                                       DisplayFormat="{0:N0}" />
                                <DxDataGridSummaryItem Field=@nameof(EstDetailItemModel.Amount)
                                                       SummaryType=SummaryItemType.Sum
                                                       DisplayFormat="{0:N0}" />
                                <DxDataGridSummaryItem Field=@nameof(EstDetailItemModel.AprAmount)
                                                       SummaryType=SummaryItemType.Sum
                                                       DisplayFormat="{0:N0}" />
                            </TotalSummary>
                        </DxDataGrid>
                    </div>
                </DxTabPage>
            </DxTabs>
        </DetailRowTemplate>
    </DxDataGrid>
    <br />
    <div class="text-center">

        <!--Save-->
        @if (RoleMode == 1 || RoleMode == 2)
        {
            <button class="btn btn-primary" style="width:9rem; height:2rem; vertical-align:middle; margin-left:10px; margin-right:10px; padding:0" @onclick="@(async() => await SaveMain())">
                <div style="text-align:center">
                    <i class="fas fa-floppy-o" style="font-size:x-large; margin-right: 20px; display:inline-block;vertical-align:middle" aria-hidden="true"></i>
                    <span style="font-size: medium; display:inline-block; vertical-align: middle" aria-hidden="true">Lưu báo giá</span>
                </div>
            </button>
        }
        <!--Approve-->
        @if (RoleMode == 3)
        {
            <button class="btn btn-primary" style="width:9rem; height:2rem; vertical-align:middle; margin-left:10px; margin-right:10px; padding:0" @onclick="@(async() => await SaveMain())">
                <div style="text-align:center">
                    <i class="fas fa-check" style="font-size:x-large; margin-right: 20px; display:inline-block;vertical-align:middle" aria-hidden="true"></i>
                    <span style="font-size: medium; display:inline-block; vertical-align: middle" aria-hidden="true">Duyệt</span>
                </div>
            </button>
        }
        <!--Delete-->
        @if (RoleMode == 1)
        {
            <button class="btn btn-danger" style="width:9rem; height:2rem; vertical-align:middle; margin-left:10px; margin-right:10px; padding:0" @onclick="@ShowConfirm_DeleteMain">
                <div style="text-align:center">
                    <i class="fa fa-trash-o" style="font-size:x-large; margin-right: 20px; display:inline-block;vertical-align:middle" aria-hidden="true"></i>
                    <span style="font-size: medium; display:inline-block; vertical-align: middle" aria-hidden="true">Xóa báo giá</span>
                </div>
            </button>
        }
        <!--Cancel-->
        <MyButtonCancel Text="Close" OnClick="@(async () => await OnVisibleChanged(false))" />
    </div>
</div>
<!--Confirm dialog-->
<ConfirmDialog Message="@ConfirmMessage" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

<!--Attach files-->
<MyPopup @bind-Visible="@AttachFileVisbible"
         HeaderText="Files đính kèm"
         Height="600px"
         Width="1000px"
         ZIndex="1003">
    <BodyContentTemplate>
        <AttachFiles @bind-Visible="@AttachFileVisbible"
                     VoucherNo="@Model.CompenNo"
                     OnValidSumit="@(async () => await Get_AttachFileCount())" />
    </BodyContentTemplate>
</MyPopup>

<!--Child edit form-->
<MyPopup @bind-Visible="@Child1_Visible"
         HeaderText="Nhập chi tiết báo giá"
         Height="600px"
         Width="350px"
         ZIndex="1003">
    <BodyContentTemplate>
        <DetailEstmationEdit @bind-Visible="@Child1_Visible"
                             Model="@Child1_EditContext.PopupContext"
                             RoleMode="@RoleMode"
                             OnValidSumit="@(async (IsApproveAmountChanged) => await ChildGrid1_UpdateRow(IsApproveAmountChanged))" />
    </BodyContentTemplate>
</MyPopup>

<!--RefEstimation-->
<MyPopup @bind-Visible="@RefEstimationVisbible"
         HeaderText="Danh sách báo giá mẫu"
         Height="600px"
         Width="1000px"
         ZIndex="1003">
    <BodyContentTemplate>
        <RefEstimationList @bind-Visible="@RefEstimationVisbible"
                           OnValidSumit="@((string value) => RefEstimation_Submit(value))" />
    </BodyContentTemplate>
</MyPopup>

@code{
    [Parameter]
    public string CompenNo { get; set; } = "";
    [Parameter]
    public string ReqPersonName { get; set; } = "";
    [Parameter]
    public string BranchName { get; set; } = "";
    [Parameter]
    public string RepairerName { get; set; } = "";
    [Parameter]
    public int RoleMode { get; set; } = 1;  //0: View  1:Bao gia  2: Thuong luong 3: Approve
    [Parameter]
    public EventCallback<RepairEstimation_ReturnModel> OnValidSumit { get; set; }
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private async Task OnVisibleChanged(bool newValue)
    {
        await VisibleChanged.InvokeAsync(newValue);
    }
    //
    private int PageRowCount = MyConstant.Grid_PageRowCount;
    //
    private RepairEstimationModel Model = new RepairEstimationModel();
    private string EstContent_bk = "";
    private string AttachFileText = "File đính kèm (0 files)";

    // Detail data
    readonly ObservableCollection<EstGroupItemModel> DetailData = new ObservableCollection<EstGroupItemModel>();
    readonly List<EstDetailItemModel> ChildGrid1_Data = new List<EstDetailItemModel>();
    // OptionList
    private List<OptionListModel> OptionList = new List<OptionListModel>();
    // Confirm dialog
    private string ConfirmAction = "";
    private string ConfirmMessage = "";
    private bool ConfirmVisible = false;
    //
    private double DefaultVatRate = 0;
    DxMemo RefEstContent;
    //
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Load master
        await LoadMaster();

        //Display data ..
        if (string.IsNullOrWhiteSpace(CompenNo))
        {
            Init_Main();
        }
        else
        {
            await DisplayMain(CompenNo);
        }
        //
        await Get_AttachFileCount();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender) RefEstContent.FocusAsync();
    }
    //
    #region Load data
    void Init_Main()
    {
        Model = new RepairEstimationModel();
        Model.CompenNo = CompenNo;
        Model.ModifiedOn = DateTime.Now;
        Model.UpdMode = 1;
        Model.EstDateTime = DateTime.Now;
        //
        Model.ReqPersonName = ReqPersonName;
        Model.BranchName = BranchName;
        Model.RepairerName = RepairerName;
    }
    //
    async Task LoadMaster()
    {
        //await Get_DefaultVatRate();
        //...
        await Task.FromResult(0);


    }
    async Task Get_DefaultVatRate()
    {
        var setting = await settingService.GetSetting("004");
        if (setting != null)
        {
            DefaultVatRate = setting.DoubleValue1;
        }
    }
    //
    async Task DisplayMain(string compenNo, bool IsRefMode = false)
    {
        try
        {
            //Filter
            var request = new Cores.Compensation.Services.String_Request()
            {
                Credential = new Cores.Compensation.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                },
                StringValue = compenNo
            };

            //Get data from DB
            DetailData.Clear();
            ChildGrid1_Data.Clear();
            //
            var response = await compensationServiceClient.GetRepairEstimationAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Header
                Model = new RepairEstimationModel();
                ClassHelper.CopyPropertiesDataDateConverted(response.RepairEstimation, Model);
                Model.ReqPersonName = ReqPersonName;
                Model.BranchName = BranchName;
                Model.RepairerName = RepairerName;
                EstContent_bk = Model.EstContent;
                //
                foreach (var item in response.RepairEstimation.EstGroupItems)
                {
                    //Parrent grid
                    var dataRow = new EstGroupItemModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    //Upd mode
                    dataRow.UpdMode = 0;
                    //
                    DetailData.Add(dataRow);

                    //Child grid
                    if (item.EstDetailItems != null && item.EstDetailItems.Count > 0)
                    {
                        foreach (var childItem in item.EstDetailItems)
                        {
                            var childRow = new EstDetailItemModel();
                            ClassHelper.CopyPropertiesDataDateConverted(childItem, childRow);
                            //Upd mode
                            childRow.UpdMode = 0;
                            //
                            ChildGrid1_Data.Add(childRow);
                        }
                    }
                }
                //Refmode
                if (IsRefMode)
                {
                    Model.IsTemplate = false;
                    Model.TemplateName = "";
                    Model.CompenNo = CompenNo;
                    Model.ModifiedOn = DateTime.Now;
                    Model.UpdMode = 1;
                    Model.EstDateTime = DateTime.Now;
                    //
                    Model.ReqPersonName = ReqPersonName;
                    Model.BranchName = BranchName;
                    Model.RepairerName = RepairerName;
                }
            }
            else
            {
                Init_Main();
            }
            //grid.DetailRows.ExpandRow();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load báo giá thất bại.");
        }
    }
    //
    private async Task Get_AttachFileCount()
    {
        try
        {
            AttachFileText = $"File đính kèm (0 files)";
            //
            var request = new Cores.Compensation.Services.GetAttachFileCount_Request();
            request.Credential = new Cores.Compensation.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.VoucherNo = Model.CompenNo;
            request.DocumentLevel = WebUserCredential.DocumentLevel;
            //
            var response = await compensationServiceClient.GetAttachFileCountAsync(request);
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                AttachFileText = $"File đính kèm ({response.IntValue.ToString()} files)";
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Get số lượng file đính kèm bị lỗi !!!");
        }
        this.StateHasChanged();
    }
    //
    async void DeleteMain()
    {
        try
        {
            //Request
            var request = new SaveRepairEstimation_Request();
            var Credential = new Cores.Compensation.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            request.RepairEstimation = new grpcRepairEstimationModel();
            //Header
            request.RepairEstimation.CompenNo = CompenNo;
            request.RepairEstimation.UpdMode = 3;
            //Call api
            var response = await compensationServiceClient.SaveRepairEstimationAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", "Xóa thất bại");
            }
            //Close form
            await OnVisibleChanged(false);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Xóa báo giá thất bại.");
        }
    }
    #endregion

    #region Save

    void ConfirmHandler()
    {
        //Delete row
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        //Delete row
        if (ConfirmAction == "DeleteChildRow")
        {
            ChildGrid1_DeleteRow();
        }
        //Delete main
        if (ConfirmAction == "DeleteMain")
        {
            DeleteMain();
        }
        //Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }
    //Show confirm delete
    void ShowConfirm_DeleteMain()
    {
        ConfirmMessage = "Xóa báo giá?";
        ConfirmAction = "DeleteMain";
        ConfirmVisible = true;
        StateHasChanged();
    }

    //Check changed
    bool Check_Changed()
    {
        return true;
    }
    //
    async Task<bool> ValidateForm()
    {
        //EstContent
        if (string.IsNullOrWhiteSpace(Model.EstContent))
        {
            toastService.ShowWarning("Chủ sơ hữu", "Bắt buột nhập.");
            await RefEstContent.FocusAsync();
            return false;
        }
        //
        return true;
    }
    //
    async Task SaveMain()
    {
        try
        {
            if (!Check_Changed())
            {
                //Close form
                await OnVisibleChanged(false);
                return;
            }

            //Validate input data
            var validateRes = await ValidateForm();
            if (!validateRes) return;


            //Request
            var request = new SaveRepairEstimation_Request();
            var Credential = new Cores.Compensation.Services.UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            request.RepairEstimation = new grpcRepairEstimationModel();
            //Header
            ClassHelper.CopyPropertiesDataDateConverted(Model, request.RepairEstimation);
            //
            request.RepairEstimation.CompenNo = CompenNo;
            request.RepairEstimation.EstNo = CompenNo;
            //ApproveLevel: Approve mode
            if (RoleMode == 3)
            {
                request.RepairEstimation.ApproveLevel = WebUserCredential.ApproveLevel;
            }
            //UpdMode
            if (string.IsNullOrWhiteSpace(CompenNo))
            {
                request.RepairEstimation.UpdMode = 1;
            }
            else
            {
                request.RepairEstimation.UpdMode = 2;
            }

            //Total
            double EstRepairPrice = 0;
            double DealRepairPrice = 0;
            double AprRepairPrice = 0;
            double EstVAT = 0;
            double DealVAT = 0;
            double AprVAT = 0;
            //
            foreach (var groupRow in DetailData)
            {
                if (groupRow.UpdMode != 3)
                {
                    double grpEstRepairPrice = 0;
                    double grpDealRepairPrice = 0;
                    double grpAprRepairPrice = 0;
                    double grpEstVAT = 0;
                    double grpDealVAT = 0;
                    double grpAprVAT = 0;
                    //
                    var grpcGroupItem = new grpcEstGroupItemModel();
                    ClassHelper.CopyPropertiesDataDateConverted(groupRow, grpcGroupItem);

                    //Detail
                    if (ChildGrid1_Data != null && ChildGrid1_Data.Count > 0)
                    {
                        var childRecords = from x in ChildGrid1_Data where x.RecNo == groupRow.RecNo select x;
                        if (childRecords != null)
                        {
                            foreach (var childRow in childRecords)
                            {
                                //Est
                                childRow.EstVAT = Math.Round(childRow.Amount * childRow.VatRate, 0);

                                //Deal
                                childRow.DealAmount = childRow.Amount;
                                childRow.DealVAT = Math.Round(childRow.DealAmount * childRow.VatRate, 0);

                                //Approve: chot so lieu
                                if (RoleMode == 3)
                                {
                                    if (childRow.AprAmount == 0 || childRow.AprAmount > childRow.DealAmount)
                                    {
                                        childRow.AprAmount = childRow.DealAmount;

                                    }
                                    //AprVAT
                                    childRow.AprVAT = Math.Round(childRow.AprAmount * childRow.VatRate, 0);
                                }
                                //Total
                                EstRepairPrice += childRow.Amount;
                                DealRepairPrice += childRow.DealAmount;
                                AprRepairPrice += childRow.AprAmount;
                                EstVAT += childRow.EstVAT;
                                DealVAT += childRow.DealVAT;
                                AprVAT += childRow.AprVAT;
                                //
                                grpEstRepairPrice += childRow.Amount;
                                grpDealRepairPrice += childRow.DealAmount;
                                grpAprRepairPrice += childRow.AprAmount;
                                grpEstVAT += childRow.EstVAT;
                                grpDealVAT += childRow.DealVAT;
                                grpAprVAT += childRow.AprVAT;
                                //
                                var grpcChildItem = new grpcEstDetailItemModel();
                                ClassHelper.CopyPropertiesDataDateConverted(childRow, grpcChildItem);
                                //
                                grpcGroupItem.EstDetailItems.Add(grpcChildItem);
                            }
                        }
                    }
                    //Cal for gorup
                    grpcGroupItem.RepairPrice = grpEstRepairPrice;
                    grpcGroupItem.DealRepairPrice = grpDealRepairPrice;
                    grpcGroupItem.AprRepairPrice = grpAprRepairPrice;
                    grpcGroupItem.EstVAT = grpEstVAT;
                    grpcGroupItem.DealVAT = grpDealVAT;
                    grpcGroupItem.AprVAT = grpAprVAT;

                    //Add to group
                    request.RepairEstimation.EstGroupItems.Add(grpcGroupItem);
                }
            }
            //Call api
            var response = await compensationServiceClient.SaveRepairEstimationAsync(request);
            // Success
            if (response != null && response.ReturnCode == GrpcReturnCode.OK)
            {
                //Return to parent
                var returnModel = new RepairEstimation_ReturnModel();
                returnModel.EstRepairPrice = EstRepairPrice;
                returnModel.DealRepairPrice = DealRepairPrice;
                returnModel.AprRepairPrice = AprRepairPrice;
                returnModel.EstVAT = EstVAT;
                returnModel.DealVAT = DealVAT;
                returnModel.AprVAT = AprVAT;

                //Update Total
                var totalRequest = new UpdateTotalCompenRequest_Request();
                totalRequest.Credential = new Cores.Compensation.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
                totalRequest.CompenNo = CompenNo;
                totalRequest.EstRepairPrice = EstRepairPrice;
                totalRequest.DealRepairPrice = DealRepairPrice;
                totalRequest.AprRepairPrice = AprRepairPrice;
                totalRequest.EstVAT = AprVAT;
                totalRequest.DealVAT = DealVAT;
                totalRequest.AprVAT = AprVAT;
                var totalResponse = await compensationServiceClient.UpdateTotalCompenRequestAsync(totalRequest);
                if (totalResponse == null || totalResponse.ReturnCode != GrpcReturnCode.OK)
                {
                    toastService.ShowError("", "Lưu báo giá thất bại.");
                    return;
                }

                //OnValidSumit
                await OnValidSumit.InvokeAsync(returnModel);
            }
            else
            {
                toastService.ShowError("", "Lưu báo giá thất bại.");
                return;
            }
            //Close form
            await OnVisibleChanged(false);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Lưu báo giá thất bại.");
        }
    }


    #endregion

    #region Grid main
    FormEditContext EditContext = null;
    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<EstGroupItemModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }
    void OnHtmlDataCellDecoration(DataGridHtmlDataCellDecorationEventArgs<EstGroupItemModel> eventArgs)
    {
        eventArgs.CssClass += " border-0";
        //LineNo
        if (eventArgs.FieldName == nameof(EstDetailItemModel.LineNo))
        {
            eventArgs.Style += " ;font-weight:bold;text-align: right";
        }
        //EstItem
        if (eventArgs.FieldName == nameof(EstGroupItemModel.EstItem))
        {
            eventArgs.Style += " ;font-weight:bold;";
        }
        //Amount
        if (eventArgs.FieldName == nameof(EstGroupItemModel.RepairPrice))
        {
            eventArgs.Style += " ;color:green; font-weight:bold;text-align: right";
        }
        //DealRepairPrice
        if (eventArgs.FieldName == nameof(EstGroupItemModel.DealRepairPrice))
        {
            eventArgs.Style += " ;color:navy; font-weight:bold;text-align: right";
        }
        //AprRepairPrice
        if (eventArgs.FieldName == nameof(EstGroupItemModel.AprRepairPrice))
        {
            eventArgs.Style += " ;color:maroon; font-weight:bold;text-align: right";
        }
        //EstVAT
        if (eventArgs.FieldName == nameof(EstGroupItemModel.EstVAT))
        {
            eventArgs.Style += " ;color:green; font-weight:bold;text-align: right";
        }
        //DealVAT
        if (eventArgs.FieldName == nameof(EstGroupItemModel.DealVAT))
        {
            eventArgs.Style += " ;color:navy; font-weight:bold;text-align: right";
        }
        //AprVAT
        if (eventArgs.FieldName == nameof(EstGroupItemModel.AprVAT))
        {
            eventArgs.Style += " ;color:maroon; font-weight:bold;text-align: right";
        }
    }

    //Confirm delete
    EstGroupItemModel DeletedRow = null;
    void OnRowRemoving(EstGroupItemModel dataRow)
    {
        DeletedRow = dataRow;

        //Show popup confirm
        ConfirmMessage = "Xóa dòng?";
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }

    //Cancel edit
    async Task OnCancelButtonClick()
    {
        await grid.CancelRowEdit();
        EditContext = null;
    }

    async void DeleteRow()
    {
        //Set to delete mode
        if (DeletedRow.UpdMode == 1)
        {
            //Remove new row from data source
            DetailData.Remove(DeletedRow);
        }
        else
        {
            //Mark to delete
            DeletedRow.UpdMode = 3;
        }
        ReOrder_GroupLineNo();
        //Refresh layout
        await grid.Refresh();
    }

    void ReOrder_GroupLineNo()
    {
        int lineNo = 1;
        var sortedList = DetailData.OrderBy(x => x.LineNo).ToList();
        sortedList.ForEach(x =>
        {
            x.LineNo = lineNo;
            lineNo++;
        });
    }

    // Edit row model
    DxDataGrid<EstGroupItemModel> grid;
    class FormEditContext : EstGroupItemModel
    {
        public FormEditContext(EstGroupItemModel EstGroupItemModel)
        {
            //Saved data
            EditingRow = EstGroupItemModel;

            //Editable data only
            LineNo = EditingRow.LineNo;
            RecNo = EditingRow.RecNo;
            EstItem = EditingRow.EstItem;
        }
        public EstGroupItemModel EditingRow { get; set; }
        public Action StateHasChanged { get; set; }
    }

    //Get data for edit/insert
    void OnRowEditStarting(EstGroupItemModel editingRow)
    {
        //Init new row
        if (editingRow == null)
        {
            editingRow = new EstGroupItemModel();
            //
            editingRow.LineNo = Get_MaxGroupLineNo();
            editingRow.IssueDateTime = DateTime.Now;
            editingRow.RecNo = MyCodeGenerator.GenRecNo();
            //
            editingRow.UpdMode = -1;
        }
        EditContext = new FormEditContext(editingRow);
        //
        StateHasChanged();
    }
    //Update row
    async Task UpdateRow()
    {
        //Update for edit field
        EditContext.EditingRow.LineNo = EditContext.LineNo;
        EditContext.EditingRow.RecNo = EditContext.RecNo;
        EditContext.EditingRow.IssueDateTime = DateTime.Now;
        EditContext.EditingRow.EstItem = EditContext.EstItem;

        //Update mode
        if (EditContext.EditingRow.UpdMode == 0 || EditContext.EditingRow.UpdMode == 3)
        {
            EditContext.EditingRow.UpdMode = 2;
        }

        //Insert to datasource
        if (EditContext.EditingRow.UpdMode == -1)
        {
            EditContext.EditingRow.UpdMode = 1;
            DetailData.Add(EditContext.EditingRow);
        }

        //Close popup & refresh data
        await grid.CancelRowEdit();
        await grid.Refresh();
    }
    private int Get_MaxGroupLineNo()
    {
        if (DetailData != null && DetailData.Count() > 0)
        {
            return DetailData.Max(x => x.LineNo) + 1;
        }
        return 1;
    }

    #endregion

    #region Grid detail
    DxDataGrid<EstDetailItemModel> ChildGrid1;
    private EstGroupItemModel ParentRow = new EstGroupItemModel();
    //
    private int Get_MaxDetailLineNo(EstGroupItemModel parrentRow)
    {
        if (ChildGrid1_Data != null)
        {
            var records = from x in ChildGrid1_Data where x.RecNo == parrentRow.RecNo select x;
            if (records != null && records.Count() > 0)
            {
                return records.Max(x => x.LineNo) + 1;
            }
        }
        return 1;
    }

    // Color of edit data
    void ChildGrid1_OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<EstDetailItemModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }
    void ChildGrid1_OnHtmlDataCellDecoration(DataGridHtmlDataCellDecorationEventArgs<EstDetailItemModel> eventArgs)
    {
        eventArgs.CssClass += " border-0";
        //LineNo
        if (eventArgs.FieldName == nameof(EstDetailItemModel.LineNo))
        {
            eventArgs.Style += " ;font-weight:bold;text-align: right";
        }
        //Quantity
        if (eventArgs.FieldName == nameof(EstDetailItemModel.Quantity))
        {
            eventArgs.Style += " ;color:blue; font-weight:bold;text-align: right";
        }
        //UnitPrice
        if (eventArgs.FieldName == nameof(EstDetailItemModel.UnitPrice))
        {
            eventArgs.Style += " ;color:green; font-weight:bold;text-align: right";
        }
        //VatRate
        if (eventArgs.FieldName == nameof(EstDetailItemModel.VatRate))
        {
            eventArgs.Style += " ;font-weight:bold;text-align: right";
        }
        //Amount
        if (eventArgs.FieldName == nameof(EstDetailItemModel.Amount))
        {
            eventArgs.Style += " ;color:green; font-weight:bold;text-align: right";
        }
        //DealAmount
        if (eventArgs.FieldName == nameof(EstDetailItemModel.DealAmount))
        {
            eventArgs.Style += " ;color:navy; font-weight:bold;text-align: right";
        }
        //AprAmount
        if (eventArgs.FieldName == nameof(EstDetailItemModel.AprAmount))
        {
            eventArgs.Style += " ;color:maroon; font-weight:bold;text-align: right";
        }

    }

    //
    protected Func<CancellationToken, Task<IEnumerable<EstDetailItemModel>>> GetChildDataAsync(EstGroupItemModel parentRow)
    {
        return GetDetailDataAsync;
        Task<IEnumerable<EstDetailItemModel>> GetDetailDataAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(ChildGrid1_Data.Where(x => x.RecNo == parentRow.RecNo));
        }
    }

    private bool Child1_Visible = false;
    Child1_FormEditContext Child1_EditContext = null;
    class Child1_FormEditContext
    {
        public Child1_FormEditContext(EstDetailItemModel editRow)
        {
            //Keep Editting row
            EditingRow = editRow;

            //Popup context
            PopupContext = new EstDetailItemModel();
            ClassHelper.CopyPropertiesData(editRow, PopupContext);
        }
        public EstDetailItemModel PopupContext { get; set; }
        public EstDetailItemModel EditingRow { get; set; }
    }

    void ChildGrid1_OnRowEditStarting(EstDetailItemModel editRow)
    {
        //Init new row
        if (editRow == null)
        {
            editRow = new EstDetailItemModel();
            //
            editRow.LineNo = Get_MaxDetailLineNo(ParentRow);
            editRow.IssueDateTime = DateTime.Now;
            editRow.RecNo = ParentRow.RecNo;
            editRow.VatRate = DefaultVatRate;
            //
            editRow.UpdMode = -1;
        }
        Child1_EditContext = new Child1_FormEditContext(editRow);

        //Show edit form
        Child1_Visible = true;
        this.StateHasChanged();

    }
    //Update row
    async Task ChildGrid1_UpdateRow(bool isApproveAmountChanged)
    {
        //Update for edit field
        Child1_EditContext.EditingRow.LineNo = Child1_EditContext.PopupContext.LineNo;
        Child1_EditContext.EditingRow.RecNo = Child1_EditContext.PopupContext.RecNo;
        Child1_EditContext.EditingRow.IssueDateTime = DateTime.Now;
        Child1_EditContext.EditingRow.EstItem = Child1_EditContext.PopupContext.EstItem;
        Child1_EditContext.EditingRow.Quantity = Child1_EditContext.PopupContext.Quantity;
        Child1_EditContext.EditingRow.UnitPrice = Child1_EditContext.PopupContext.UnitPrice;
        Child1_EditContext.EditingRow.VatRate = Child1_EditContext.PopupContext.VatRate;
        Child1_EditContext.EditingRow.Amount = Child1_EditContext.PopupContext.Amount;
        Child1_EditContext.EditingRow.DealAmount = Child1_EditContext.PopupContext.DealAmount;
        Child1_EditContext.EditingRow.AprAmount = Child1_EditContext.PopupContext.AprAmount;
        Child1_EditContext.EditingRow.AprVAT = Child1_EditContext.PopupContext.AprVAT;
        Child1_EditContext.EditingRow.Notes = Child1_EditContext.PopupContext.Notes;

        //Update mode
        if (Child1_EditContext.EditingRow.UpdMode == 0 || Child1_EditContext.EditingRow.UpdMode == 3)
        {
            Child1_EditContext.EditingRow.UpdMode = 2;
        }

        //Insert to datasource
        if (Child1_EditContext.EditingRow.UpdMode == -1)
        {
            Child1_EditContext.EditingRow.UpdMode = 1;
            ChildGrid1_Data.Add(Child1_EditContext.EditingRow);
        }
        //refresh data
        await ChildGrid1.Refresh();
        //
        Update_GroupTotal();
        //
    }

    //Cal group total
    private void Update_GroupTotal()
    {
        double RepairPrice = 0;
        double DealRepairPrice = 0;
        double AprRepairPrice = 0;
        double EstVAT = 0;
        double AprVAT = 0;
        double DealVAT = 0;
        //
        var details = ChildGrid1_Data.Where(x => x.RecNo == ParentRow.RecNo);
        if (details != null && details.Count() > 0)
        {
            RepairPrice = details.Sum(x => x.Amount);
            DealRepairPrice = details.Sum(x => x.DealAmount);
            AprRepairPrice = details.Sum(x => x.AprAmount);
            EstVAT = details.Sum(x => x.EstVAT);
            DealVAT = details.Sum(x => x.DealVAT);
            AprVAT = details.Sum(x => x.AprVAT);
        }
        ParentRow.RepairPrice = RepairPrice;
        ParentRow.DealRepairPrice = DealRepairPrice;
        ParentRow.AprRepairPrice = AprRepairPrice;
        ParentRow.EstVAT = EstVAT;
        ParentRow.DealVAT = DealVAT;
        ParentRow.AprVAT = AprVAT;
        //
        grid.Refresh();
    }


    //Confirm delete
    EstDetailItemModel ChildGrid1_DeletedRow = null;
    void ChildGrid1_OnRowRemoving(EstDetailItemModel dataRow)
    {
        ChildGrid1_DeletedRow = dataRow;

        //Show popup confirm
        ConfirmMessage = "Xóa dòng?";
        ConfirmAction = "DeleteChildRow";
        ConfirmVisible = true;
        StateHasChanged();
    }

    async void ChildGrid1_DeleteRow()
    {
        //Set to delete mode
        if (ChildGrid1_DeletedRow.UpdMode == 1)
        {
            //Remove new row from data source
            ChildGrid1_Data.Remove(ChildGrid1_DeletedRow);
        }
        else
        {
            //Mark to delete
            ChildGrid1_DeletedRow.UpdMode = 3;
        }
        //Update group total
        Update_GroupTotal();
        ReOrder_DetailLineNo();
        //Refresh layout
        await ChildGrid1.Refresh();
    }
    void ReOrder_DetailLineNo()
    {
        int lineNo = 1;
        var sortedList = ChildGrid1_Data.Where(x => x.RecNo == ParentRow.RecNo).OrderBy(x => x.LineNo).ToList();
        if (sortedList != null)
        {
            sortedList.ForEach(x =>
            {
                x.LineNo = lineNo;
                lineNo++;
            });
        }
    }
    //Cancel edit
    async Task ChildGrid1_OnCancelButtonClick()
    {
        await ChildGrid1.CancelRowEdit();
    }
    #endregion

    #region Attach files
    private bool AttachFileVisbible { get; set; } = false;
    void ShowAttachFiles()
    {
        AttachFileVisbible = true;
        StateHasChanged();
    }
    #endregion

    #region Screen items
    private bool RefEstimationVisbible = false;
    void RefEstimation()
    {
        RefEstimationVisbible = true;
        StateHasChanged();
    }

    async void RefEstimation_Submit(string compenno)
    {
        await DisplayMain(compenno, true);
    }


    #endregion
    //
}
