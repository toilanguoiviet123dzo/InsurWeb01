@page "/userrole"
@using Admin.Services
@using System.Collections.ObjectModel;
@inject grpcAdminService.grpcAdminServiceClient adminServiceClient;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<br />
<div style="width:75%">
    <DxDataGrid @ref="@Grid"
                Data="@ListUserRole"
                EditMode="DataGridEditMode.PopupEditForm"
                PageSize="18"
                ShowFilterRow="true"
                HtmlRowDecoration="@OnHtmlRowDecoration"
                HorizontalScrollBarMode="ScrollBarMode.Auto"
                RowInsertStart="@(() => OnRowEditStarting(null))"
                RowEditStart="@(dataRow => OnRowEditStarting(dataRow))">
        <Columns>
            <DxDataGridColumn Field="@nameof(UserRoleModel.UserName)"
                              Caption="UserName"
                              Width="15rem" />
            <DxDataGridColumn Field="@nameof(UserRoleModel.RoleName)"
                              Caption="RoleName"
                              Width="15rem" />
            <DxDataGridColumn Field="@nameof(UserRoleModel.Discriptions)"
                              Caption="Descriptions"
                              Width="10rem" />
            <DxDataGridDateEditColumn Field="@nameof(UserRoleModel.CreatedOn)"
                                      Caption="CreatedOn"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="15rem" />
            <DxDataGridDateEditColumn Field="@nameof(UserRoleModel.ModifiedOn)"
                                      Caption="ModifiedOn"
                                      DisplayFormat="dd/MM/yyyy HH:mm"
                                      Width="15rem" />
            <!--Command columns-->
            <MyGridCommand Grid="Grid"
                           ShowAddnew="true"
                           ShowEdit="true"
                           ShowDelete="true"
                           OnRowRemoving="@((context) => OnRowRemoving(context as UserRoleModel))" />
        </Columns>
        <EditFormTemplate>
            <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@UpdateRow">
                <DataAnnotationsValidator />
                <DxFormLayout>
                    <DxFormLayoutItem Caption="UserName: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.UserName" />
                            <ValidationMessage For="@(() => EditContext.UserName)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="RoleName: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxComboBox @bind-Value="@EditContext.RoleName"
                                        Data="@ListRoleList"
                                        AllowUserInput="true"
                                        FilteringMode="DataGridFilteringMode.Contains"
                                        TextFieldName="@nameof(RoleListModel.RoleName)"
                                        ValueFieldName="@nameof(RoleListModel.RoleName)"
                                        SelectedItemChanged="@((RoleListModel value) => RoleList_ItemChanged(value))" />
                            <ValidationMessage For="@(() => EditContext.RoleName)" />
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Discriptions: " ColSpanMd="12" Context="FormLayoutContext">
                        <Template>
                            <DxTextBox @bind-Text="@EditContext.Discriptions" />
                            <ValidationMessage For="@(() => EditContext.Discriptions)" />
                        </Template>
                    </DxFormLayoutItem>
                    <!--OK Cancel-->
                    <MyGridEditFormOKCancel OnCancelClick="OnCancelButtonClick" />
                </DxFormLayout>
            </EditForm>
        </EditFormTemplate>
    </DxDataGrid>
    <br />
    <div class="text-center">
        <MyButtonSave OnClick="ShowConfirm_SaveMain" />
        <MyButtonCancel OnClick="ShowConfirm_CancelSaveMain" />
    </div>
</div>

<MessageBox Title="@Program.ProgramName" Message="@ConfirmMessage" IsDanger=true MessageBoxIcon="@MyConstant.MessageBoxIcon_Question" @bind-Visible="@ConfirmVisible" confirm="@ConfirmHandler" />

@code{
    // Popup
    [CascadingParameter]
    protected ProgramInfo Program { get; set; }
    private string ConfirmMessage = "";
    private string ConfirmAction = "";
    private bool ConfirmVisible = false;
    // RoleList
    private readonly List<RoleListModel> ListRoleList = new List<RoleListModel>();
    // UserRole
    readonly ObservableCollection<UserRoleModel> ListUserRole = new ObservableCollection<UserRoleModel>();
    // Init
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        // Load filter data
        await LoadMaster();

        // Display data ..
        DisplayMain();
    }

    #region Load data
    // Load filter data
    async Task LoadMaster()
    {

        //...
        await Load_RoleList();
    }

    // Load RoleList
    async Task Load_RoleList()
    {
        var requestRoleList = new Empty_Request()
        {
            Credential = new UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            }
        };
        //Get data from DB
        ListRoleList.Clear();
        var resRoleList = await adminServiceClient.GetRoleListAsync(requestRoleList);
        if (resRoleList != null && resRoleList.ReturnCode == 200)
        {
            foreach (var item in resRoleList.RoleList)
            {
                RoleListModel dataRow = new RoleListModel();
                ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                ListRoleList.Add(dataRow);
            }
        }
    }
    // Load ListUserRole
    async void DisplayMain()
    {
        try
        {
            var requestUserRole = new Empty_Request()
            {
                Credential = new UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                }
            };
            //Get data from DB
            ListUserRole.Clear();
            var resUserRole = await adminServiceClient.GetUserRoleAsync(requestUserRole);
            if (resUserRole != null && resUserRole.ReturnCode == 200)
            {
                foreach (var item in resUserRole.UserRoles)
                {
                    UserRoleModel dataRow = new UserRoleModel();
                    ClassHelper.CopyPropertiesDataDateConverted(item, dataRow);
                    // Get RoleName
                    RoleListModel newRoleListModel = ListRoleList.Find(newRoleListModel => newRoleListModel.RoleID == dataRow.RoleID);
                    if (newRoleListModel != null)
                    {
                        dataRow.RoleName = newRoleListModel.RoleName;
                    }
                    // Set Updmode
                    dataRow.UpdMode = 0;
                    //
                    ListUserRole.Add(dataRow);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_LoadDataFailed);
        }
    }
    #endregion

    #region Save
    // Check changed in ListUserRole
    bool Check_Changed()
    {
        foreach (UserRoleModel row in ListUserRole)
        {
            if (row.UpdMode != 0)
            {
                return true;
            }
        }
        return false;
    }
    // Show confirm cancel SaveMain
    void ShowConfirm_CancelSaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        // Show popup confirm
        ConfirmMessage = "Cancel changed?";
        ConfirmAction = "CancelSaveMain";
        ConfirmVisible = true;
        StateHasChanged();
    }
    // Show confirm delete SaveMain
    UserRoleModel DeletedRow = null;
    void OnRowRemoving(UserRoleModel dataRow)
    {
        DeletedRow = dataRow;
        // Show popup confirm
        ConfirmMessage = "Xóa dòng dữ liệu?";
        ConfirmAction = "DeleteRow";
        ConfirmVisible = true;
        StateHasChanged();
    }
    // Show confirm save SaveMain
    void ShowConfirm_SaveMain()
    {
        if (!Check_Changed())
        {
            //Show message: Nothing changed!
            toastService.ShowInfo("", MyMessage.Info_NothingChanged);
            return;
        }
        // Show popup confirm
        ConfirmMessage = "Save changed?";
        ConfirmAction = "SaveMain";
        ConfirmVisible = true;
        StateHasChanged();
    }
    // Confirm Cancel, Delete, Save
    void ConfirmHandler()
    {
        // Cancel save main
        if (ConfirmAction == "CancelSaveMain")
        {
            CancelSaveMain();
        }
        // Delete row main
        if (ConfirmAction == "DeleteRow")
        {
            DeleteRow();
        }
        // Save all change main
        if (ConfirmAction == "SaveMain")
        {
            SaveMain();
        }
        // Close confirm delete popup
        ConfirmVisible = false;
        StateHasChanged();
    }
    // Cancel edit main
    void CancelSaveMain()
    {
        // Reload data
        DisplayMain();
    }
    // Delete edit main
    async void DeleteRow()
    {
        // Set to delete mode
        if (DeletedRow.UpdMode == 1)
        {
            // Remove new row from data source
            ListUserRole.Remove(DeletedRow);
        }
        else
        {
            // Mark to delete
            DeletedRow.UpdMode = 3;
        }
        // Refresh layout
        await Grid.Refresh();
    }
    // Get data for edit/insert
    void OnRowEditStarting(UserRoleModel editingRow)
    {
        // Init new row
        if (editingRow == null)
        {
            editingRow = new UserRoleModel();
            //
            editingRow.CreatedOn = DateTime.Now;
            editingRow.ModifiedOn = DateTime.Now;
            editingRow.UpdMode = -1;
        }
        EditContext = new FormEditContext(editingRow);
    }
    // Update row
    async Task UpdateRow()
    {
        // Update for edit field
        var backupRow = new UserRoleModel();
        ClassHelper.CopyPropertiesData(EditContext.EditingRow, backupRow);
        //
        EditContext.EditingRow.SystemID = "";
        EditContext.EditingRow.UserName = EditContext.UserName;
        EditContext.EditingRow.RoleID = GetRoleID;
        EditContext.EditingRow.RoleName = GetRoleName;
        EditContext.EditingRow.Discriptions = EditContext.Discriptions;
        EditContext.EditingRow.ModifiedOn = DateTime.Now;
        // Update mode
        if (EditContext.EditingRow.UpdMode == 0 || EditContext.EditingRow.UpdMode == 3)
        {
            EditContext.EditingRow.UpdMode = 2;
        }
        // Insert to datasource
        if (EditContext.EditingRow.UpdMode == -1)
        {
            EditContext.EditingRow.UpdMode = 1;
            ListUserRole.Add(EditContext.EditingRow);
        }
        // Close popup & refresh data
        await Grid.CancelRowEdit();
        await Grid.Refresh();
    }
    // Save edit main
    async void SaveMain()
    {
        try
        {
            var hasChanged = false;
            //Request
            SaveUserRole_Request request = new SaveUserRole_Request();
            var Credential = new UserCredential()
            {
                Username = WebUserCredential.Username,
                RoleID = WebUserCredential.RoleID,
                AccessToken = WebUserCredential.AccessToken,
                ApiKey = WebUserCredential.ApiKey
            };
            request.Credential = Credential;
            //
            foreach (UserRoleModel row in ListUserRole)
            {
                if (row.UpdMode != 0)
                {
                    // Convert to DB row
                    var dbRow = new grpcUserRole();
                    ClassHelper.CopyPropertiesDataDateConverted(row, dbRow);
                    request.UserRoles.Add(dbRow);
                    //
                    hasChanged = true;
                }
            }
            // Check changed
            if (!hasChanged)
            {
                //Message no change
                toastService.ShowInfo("", MyMessage.Info_NothingChanged);
                return;
            }
            // Call api
            var response = await adminServiceClient.SaveUserRoleAsync(request);
            // Success
            if (response.ReturnCode == 200)
            {
                //Show success
                toastService.ShowSuccess("", MyMessage.Info_SaveSucess);
            }
            // Error call
            if (response == null)
            {
                // Show error Call grpc

                return;
            }
            if (response.ReturnCode != 200)
            {
                // 201: Data not found
                if (response.ReturnCode == 201)
                {
                    // Show error 201
                    toastService.ShowError("", "Error 201");
                }
                // 500: Data not found
                if (response.ReturnCode == 500)
                {
                    //Show error 500
                    toastService.ShowError("", "Error 500");
                }
                return;
            }
            // Reload data
            DisplayMain();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_SaveFailed);
        }
    }
    // Cancel edit
    async Task OnCancelButtonClick()
    {
        await Grid.CancelRowEdit();
        EditContext = null;
    }
    #endregion

    #region DataGrid
    // Edit row model
    DxDataGrid<UserRoleModel> Grid;
    FormEditContext EditContext = null;
    class FormEditContext : UserRoleModel
    {
        public FormEditContext(UserRoleModel userRoleModel)
        {
            // Saved data
            EditingRow = userRoleModel;
            // Editable data only
            SystemID = EditingRow.SystemID;
            UserName = EditingRow.UserName;
            RoleID = EditingRow.RoleID;
            RoleName = EditingRow.RoleName;
            Discriptions = EditingRow.Discriptions;
        }
        public UserRoleModel EditingRow { get; set; }
        public Action StateHasChanged { get; set; }
    }
    // Color of edit data
    void OnHtmlRowDecoration(DataGridHtmlRowDecorationEventArgs<UserRoleModel> eventArgs)
    {
        MyColor myColor = new MyColor();
        if (eventArgs.DataItem.UpdMode == 1)
            eventArgs.Style += myColor.NewRowColor;
        else if (eventArgs.DataItem.UpdMode == 2)
            eventArgs.Style += myColor.EditRowColor;
        else if (eventArgs.DataItem.UpdMode == 3)
            eventArgs.Style += myColor.DeleteRowColor;
    }
    #endregion

    #region Screen items

    // Select RoleList
    string GetRoleID;
    string GetRoleName = "";
    void RoleList_ItemChanged(RoleListModel item)
    {
        GetRoleName = "";
        if (item != null)
        {
            GetRoleID = item.RoleID;
            GetRoleName = item.RoleName ?? "";
        }
    }
    #endregion
}