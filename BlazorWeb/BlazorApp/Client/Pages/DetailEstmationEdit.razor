@inject IJSRuntime JsRuntime;
@inject IToastService toastService
@using System.Threading

<div class="container" @onkeydown="keyDownHandler" >
    <!--LineNo-->
    <div class="row">
        <div class="col-12">
            <MyNumEdit @bind-Value="Model.LineNo"
                       Mask="N0"
                       ReadOnly="RoleMode != 1"
                       Literal="No."
                       CssClass="lineno-focusid" />
        </div>
    </div>
    <!--EstItem-->
    <div class="row">
        <div class="col-12">
            <MyTextEdit @bind-Text="Model.EstItem"
                        ReadOnly="RoleMode != 1"
                        Literal="Hạng mục chi tiết" 
                        CssClass="estitem-focusid"/>
        </div>
    </div>
    <!--Quantity-->
    <div class="row">
        <div class="col-12">
            <MyNumEdit Value="Model.Quantity"
                       ValueChanged="@((double value) => Dervied_FromQuantity(value))"
                       Mask="N0"
                       ReadOnly="RoleMode != 1"
                       Literal="Số lượng"
                       CssClass="quantity-focusid" />
        </div>
    </div>
    <!--UnitPrice-->
    <div class="row">
        <div class="col-12">
            <MyNumEdit Value="Model.UnitPrice"
                       ValueChanged="@((double value) => Dervied_FromUnitPrice(value))"
                       Mask="N0"
                       ReadOnly="RoleMode != 1"
                       Literal="Đơn giá"
                       CssClass="unitprice-focusid" />
        </div>
    </div>
    <!--VatRate-->
    @*<div class="row">
        <div class="col-12">
            <MyNumEdit @bind-Value="Model.VatRate"
                       Mask="p0"
                       ReadOnly="RoleMode != 1"
                       Literal="%VAT" />
        </div>
    </div>*@
    <!--Amount-->
    <div class="row">
        <div class="col-12">
            <MyNumEdit @bind-Value="Model.Amount"
                       Mask="N0"
                       ReadOnly="true"
                       Literal="Thành tiền" />
        </div>
    </div>
    <!--DealAmount-->
    @*<div class="row">
        <div class="col-12">
            <MyNumEdit @bind-Value="Model.DealAmount"
                       Mask="N0"
                       ReadOnly="RoleMode != 2"
                       Literal="Thương lượng" />
        </div>
    </div>*@
    <!--AprAmount-->
    <div class="row">
        <div class="col-12">
            <MyNumEdit @bind-Value="Model.AprAmount"
                       TextChanged="@((value) => ApproveAmountChanged = true)"
                       ReadOnly="RoleMode != 3"
                       Mask="N0"
                       Literal="Duyệt"
                       CssClass="apramount-focusid" />
        </div>
    </div>
    <!--Notes-->
    <div class="row">
        <div class="col-12">
            <MyMuteLabel Literal="Ghi chú" />
            <DxTextBox @bind-Text="Model.Notes"/>
        </div>
    </div>
    <!--OK, Cancel-->
    <div class="row" style="margin-top:20px">
        <div class="col-12">
            <div class="text-center">
                <DxButton RenderStyle="@ButtonRenderStyle.Success" style="width: 100px; font-size: 15px; margin-right: 10px" @onclick="@(() => OnValidSumit_Handler())" Text="OK" />
                <DxButton RenderStyle="@ButtonRenderStyle.Danger" style="width:100px; font-size:15px; margin-right:10px" @onclick="@(() => OnVisibleChanged(false))" Text="Cancel" />
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public int RoleMode { get; set; } = 2;  //0: View 1: Báo giá 2: Thương lượng 3: Duyệt
    [Parameter]
    public EstDetailItemModel Model { get; set; }
    [Parameter]
    public bool Visible { get; set; } = false;
    [Parameter]
    public EventCallback<bool> OnValidSumit { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private bool ApproveAmountChanged = false;
    private EditContext editContext;

    private async void OnVisibleChanged(bool value)
    {
        await VisibleChanged.InvokeAsync(value);
    }

    protected override void OnInitialized()
    {
        editContext = new(Model);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<string>("focusEditor", "estitem-focusid");
        }
    }

    private void keyDownHandler(KeyboardEventArgs args)
    {
        //Enter
        if (args.Key == ConsoleKey.Enter.ToString())
        {
            OnValidSumit_Handler();
        }
        //Esc
        if (args.Key == ConsoleKey.Escape.ToString())
        {
            OnVisibleChanged(false);
        }
    }

    void Dervied_FromQuantity(double quantity)
    {
        Model.Quantity = quantity;
        Model.Amount = quantity * Model.UnitPrice;
        //this.StateHasChanged();
    }
    void Dervied_FromUnitPrice(double unitPrice)
    {
        Model.UnitPrice = unitPrice;
        Model.Amount = unitPrice * Model.Quantity;
        //this.StateHasChanged();
    }

    async void OnValidSumit_Handler()
    {
        //Validate
        if (Model.LineNo < 0 || Model.LineNo > 9999)
        {
            toastService.ShowError("", "No.: không hợp lệ");
            await JsRuntime.InvokeAsync<string>("focusEditor", "lineno-focusid");
            return;
        }
        if (Model.Quantity < 0 || Model.Quantity > 9999)
        {
            toastService.ShowError("", "Số lượng: không hợp lệ");
            await JsRuntime.InvokeAsync<string>("focusEditor", "quantity-focusid");
            return;
        }
        if (Model.UnitPrice < 0 || Model.UnitPrice > 99999999999)
        {
            toastService.ShowError("", "Đơn giá: không hợp lệ");
            await JsRuntime.InvokeAsync<string>("focusEditor", "unitprice-focusid");
            return;
        }
        if (Model.AprAmount < 0 || Model.AprAmount > 999999999999)
        {
            toastService.ShowError("", "Duyệt: không hợp lệ");
            await JsRuntime.InvokeAsync<string>("focusEditor", "apramount-focusid");
            return;
        }

        //Derived
        Model.Amount = Model.Quantity * Model.UnitPrice;
        //VAT amount
        Model.AprVAT = Math.Round(Model.AprAmount * Model.VatRate, 0);
        //
        await OnValidSumit.InvokeAsync(ApproveAmountChanged);
        await VisibleChanged.InvokeAsync(false);
    }

}
