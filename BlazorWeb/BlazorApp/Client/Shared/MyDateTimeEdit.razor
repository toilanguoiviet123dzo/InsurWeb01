<div style="width:@Width">
    <label class="text-muted" style="padding: 0; margin: 0; font-size: small">@Literal</label>
    <DxDateEdit CssClass="@CssClass"
                InputCssClass="@InputCssClass"
                Format="@Format"
                Mask="@Format"
                ReadOnly="@ReadOnly"
                DateChanged="@((DateTime newValue) => OnDateChanged(newValue))"
                Date="@Date"
                @attributes="Attributes" />
</div>
@code {
    [Parameter]
    public bool TabStop { get; set; } = true;
    [Parameter]
    public string Width { get; set; } = "10rem";
    [Parameter]
    public string Literal { get; set; } = "";
    [Parameter]
    public string InputCssClass { get; set; } = "";
    [Parameter]
    public string CssClass { get; set; } = "";
    [Parameter]
    public string Format { get; set; } = "dd/MM/yyyy HH:mm";
    [Parameter]
    public bool ReadOnly { get; set; } = false;
    [Parameter]
    public DateTime Date { get; set; } = DateTime.Today;
    [Parameter]
    public EventCallback<DateTime> DateChanged { get; set; }
    private async Task OnDateChanged(DateTime newValue)
    {
        await DateChanged.InvokeAsync(newValue);
    }
    //
    //Attributes
    private Dictionary<string, object> Attributes { get; set; }
    //
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //ReadOnly
        if (ReadOnly || !TabStop)
        {
            Attributes = new Dictionary<string, object>()
                                            {
                                                { "tabIndex", "-1" }
                                            };
        }
    }

}
