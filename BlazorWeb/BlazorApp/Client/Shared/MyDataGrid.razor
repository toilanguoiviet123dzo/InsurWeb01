@using System.Reflection
@typeparam T

<MudTable @ref="@Ref"
          Items="@Items"
          Dense="@Dense"
          Hover="true"
          Bordered="@Bordered"
          Striped="@Striped"
          Filter="new Func<T,bool>(FilterFunc1)"
          SelectedItem="@SelectedItem"
          SelectedItemChanged="@((T item) => OnSelectedItemChanged(item))"
          SelectedItems="@SelectedItems"
          SelectedItemsChanged="@((HashSet<T> items) => OnSelectedItemsChanged(items))"
          OnRowClick="@((TableRowClickEventArgs<T> para) => OnRowClick_Handle(para))"
          OnCommitEditClick="@((MouseEventArgs para) => OnCommitEditClick_Handle(para))"
          Loading="@Loading"
          HorizontalScrollbar="@HorizontalScrollbar"
          Virtualize="@Virtualize"
          ReadOnly="@ReadOnly"
          LoadingProgressColor="Color.Info"
          RowsPerPage="@RowsPerPage"
          NoRecordsContent="@NoRecordsContent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="@SearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MyButton Icon="@Icons.Material.Filled.PlusOne" Color="Color.Primary"></MyButton></MudTh>
        @HeaderContent
    </HeaderContent>
    <RowTemplate>
        <MudTd><MyButton Icon="@Icons.Material.Filled.Update" Color="Color.Secondary"></MyButton></MudTd>
        @RowTemplate(context)
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    [Parameter] public IEnumerable<T> Items{ get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public bool Dense { get; set; } = false;
    [Parameter] public bool Bordered { get; set; } = true;
    [Parameter] public bool Striped { get; set; } = true;
    [Parameter] public bool Loading { get; set; } = false;
    [Parameter] public bool HorizontalScrollbar { get; set; } = false;
    [Parameter] public bool Virtualize { get; set; } = false;
    [Parameter] public bool ReadOnly { get; set; } = true;
    [Parameter] public int RowsPerPage { get; set; } = 20;
    [Parameter] public RenderFragment HeaderContent { get; set; }
    [Parameter] public RenderFragment<T> RowTemplate { get; set; }
    [Parameter] public RenderFragment NoRecordsContent { get; set; }

    //SelectedItem
    [Parameter] public T SelectedItem { get; set; }
    [Parameter] public EventCallback<T> SelectedItemChanged { get; set; }
    private async void OnSelectedItemChanged(T newValue)
    {
        await SelectedItemChanged.InvokeAsync(newValue);
    }
    //SelectedItems
    [Parameter] public HashSet<T> SelectedItems { get; set; }
    [Parameter] public EventCallback<HashSet<T>> SelectedItemsChanged { get; set; }
    private async void OnSelectedItemsChanged(HashSet<T> newValue)
    {
        await SelectedItemsChanged.InvokeAsync(newValue);
    }
    //OnRowClick
    [Parameter] public EventCallback<TableRowClickEventArgs<T>> OnRowClick { get; set; }
    private async void OnRowClick_Handle(TableRowClickEventArgs<T> para)
    {
        await OnRowClick.InvokeAsync(para);
    }

    //OnCommitEditClick
    [Parameter] public EventCallback<MouseEventArgs> OnCommitEditClick { get; set; }
    private async void OnCommitEditClick_Handle(MouseEventArgs para)
    {
        await OnCommitEditClick.InvokeAsync(para);
    }

    //Attributes
    Dictionary<string, object> Attributes { get; set; }

    //Data
    string SearchString = "";

    //
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //Width
    }

    //Filter
    private bool FilterFunc1(T element) => FilterFunc(element, SearchString);

    private bool FilterFunc(T element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        //
        foreach (PropertyInfo property in element.GetType().GetProperties())
        {
            if (property.PropertyType.ToString() == "System.String")
            {
                var itemValue = (string)property.GetValue(element);
                //
                if (itemValue.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
            }
        }
        //
        return false;
    }


    //Ref
    public MudTable<T> Ref { get; set; }
    //Methods
    public void SetSelectedItem(object item) => Ref.SetSelectedItem(item);
    public void SetEditingItem(object item) => Ref.SetEditingItem(item);
    public void SetRowsPerPage(int size) => Ref.SetRowsPerPage(size);
    public void NavigateTo(int pageIndex) => Ref.NavigateTo(pageIndex);
    public void BeginLoadData()
    {
        Loading = true;
    }
    public void EndLoadData()
    {
        Loading = false;
    }
    public void Refresh()
    {
        this.StateHasChanged();
    }
    public int CurrentPage()
    {
        return Ref.CurrentPage;
    }

}
