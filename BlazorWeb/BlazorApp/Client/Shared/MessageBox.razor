<style>
    .dxbs-modal > .dxbs-popup > .dxbs-modal-content > .dxbs-modal-footer {
        margin: unset;
        padding: 0.5rem 1rem;
        justify-content: center;
    }
</style>

<DxPopup Visible="@Visible"
         VisibleChanged="@((value) => OnVisibleChanged(value))"
         ShowCloseButton="true"
         ShowFooter="true">
    <HeaderContentTemplate>
        <h6 class="@MessageStyle">@Title</h6>
    </HeaderContentTemplate>
    <BodyContentTemplate>
        <div class="d-flex align-items-center">
            <!--Icon-->
            <span style="padding-right: 1rem">
                <i class="@IconStyle @MessageStyle pr-2"></i>
            </span>
            <!--Message-->
            <span class="@MessageStyle"> @Message </span>
        </div>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <div>
            <DxButton RenderStyle="@SubmitButtonStyle" style="width:100px; font-size:15px;margin-right:1rem" @onclick="@ConfirmHandler" Text="OK" />
            <DxButton RenderStyle="@ButtonRenderStyle.Secondary" style="width:100px; font-size:15px;margin-right:1rem" @onclick="@(() => OnVisibleChanged(false))" Text="Cancel" />
        </div>
    </FooterContentTemplate>
</DxPopup>

@code {
    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public string Title { get; set; } = "Hộp thoại";
    [Parameter]
    public string Message { get; set; } = "Chọn lựa của bạn là gì?";
    [Parameter]
    public int MessageBoxIcon { get; set; } = MyConstant.MessageBoxIcon_Information;
    [Parameter]
    public bool IsDanger { get; set; } = false;
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }
    private async Task OnVisibleChanged(bool newValue)
    {
        await VisibleChanged.InvokeAsync(newValue);
    }
    [Parameter]
    public EventCallback confirm { get; set; }
    //
    private string MessageStyle = "text-dark";
    private string IconStyle = "fas fa-info";
    private ButtonRenderStyle SubmitButtonStyle = ButtonRenderStyle.Success;
    //
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //Information
        if (MessageBoxIcon == MyConstant.MessageBoxIcon_Information)
        {
            MessageStyle = "text-info";
            IconStyle = "fas fa-info-circle fa-2x";
        }
        //Question
        if (MessageBoxIcon == MyConstant.MessageBoxIcon_Question)
        {
            MessageStyle = "text-primary";
            IconStyle = "fas fa-question-circle fa-2x";

        }
        //Exclamation
        if (MessageBoxIcon == MyConstant.MessageBoxIcon_Exclamation)
        {
            MessageStyle = "text-warning font-weight-bold";
            IconStyle = "fas fa-exclamation-triangle fa-2x";
        }
        //Stop
        if (MessageBoxIcon == MyConstant.MessageBoxIcon_Stop)
        {
            MessageStyle = "text-muted font-weight-bold";
            IconStyle = "fas fa-stop-circle fa-2x";
        }
        //Error
        if (MessageBoxIcon == MyConstant.MessageBoxIcon_Error)
        {
            MessageStyle = "text-danger font-weight-bold";
            IconStyle = "fas fa-times-circle fa-2x";
        }
        //
        if (IsDanger)
        {
            MessageStyle = "text-danger";
            SubmitButtonStyle = ButtonRenderStyle.Danger;
        }
    }

    private async void ConfirmHandler()
    {
        await confirm.InvokeAsync();
    }
}
