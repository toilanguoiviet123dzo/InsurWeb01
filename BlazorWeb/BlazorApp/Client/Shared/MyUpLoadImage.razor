@using Resource.Services
@using System.Collections.ObjectModel;
@using System.IO;
@inject grpcResourceService.grpcResourceServiceClient resourceServiceClient;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService

<div class="container-fluid">
    <div class="row">
        <InputFile class="btn btn-primary" id="inputFileID" OnChange="@(async(e) => await LoadFile(e))"
                   @attributes="Attributes" />
    </div>
    <div class="row image-container">
        <img id="imageToCrop" src="@ImageSource" alt="Image" />
    </div>
    <div class="row justify-content-center mt-2">
        <MyButtonSave OnClick="UploadFile" />
        <MyButtonCancel OnClick="CloseMain" />
    </div>
</div>

@code {
    [Parameter]
    public MyPopup MyForm { get; set; }
    [Parameter]
    public UpLoadFileModel UpLoadFile { get; set; } = new UpLoadFileModel();
    [Parameter]
    public EventCallback<UpLoadFileModel> OnSubmit { get; set; }

    //Attributes
    private Dictionary<string, object> Attributes { get; set; }
    //
    private string ImageSource = "";
    //
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //Attributes
        Attributes = new Dictionary<string, object>()
                                            {
                                                { "accept", "image/*" },
                                                { "capture", "camera" }
                                            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<string>("clickElementByID", "inputFileID");
        }
    }

    private IBrowserFile selectedFile;
    async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;

            //Update edit context
            Stream stream = selectedFile.OpenReadStream(10000000);
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            //
            UpLoadFile.FileName = selectedFile.Name;
            UpLoadFile.FileContent = ms.ToArray();
            UpLoadFile.IsFileChanged = true;
            //
            ImageSource = "data:image/png;base64," + Convert.ToBase64String(UpLoadFile.FileContent);
            //
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Load ảnh bị lỗi");
        }
    }

    async void UploadFile()
    {
        try
        {

            await JsRuntime.InvokeAsync<string>("clickElementByID", "inputFileID");
            return;

            var request = new Resource.Services.SaveResourceFile_Request();
            var Credential = new Resource.Services.UserCredential()
                {
                    Username = WebUserCredential.Username,
                    RoleID = WebUserCredential.RoleID,
                    AccessToken = WebUserCredential.AccessToken,
                    ApiKey = WebUserCredential.ApiKey
                };
            request.Credential = Credential;
            request.Record = new grpcResourceFileModel();
            //
            ClassHelper.CopyPropertiesData(UpLoadFile, request.Record);
            //
            var response = await resourceServiceClient.SaveResourceFileAsync(request);
            // Success
            if (response == null || response.ReturnCode != GrpcReturnCode.OK)
            {
                toastService.ShowError("", MyMessage.Error_UploadFile);
            }
            else
            {
                //OnSubmit
                UpLoadFile.ResourceID = response.StringValue;
                await OnSubmit.InvokeAsync(UpLoadFile);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, MyMessage.Error_UploadFile);
        }
    }

    void CloseMain()
    {
        MyForm.Close();
    }

}
