@typeparam TValue
<div style="width:@Width">
    <label class="text-muted" style="padding:0;margin:0;font-size:small">@Literal</label>
    <DxComboBox @ref="Ref"
                Data="@Data"
                Value="@Value"
                ValueChanged="@((TValue selectedValue) => OnValueChanged(selectedValue))"
                SelectedItemChanged="@((TValue selectedValue) => OnSelectedItemChanged(selectedValue))"
                TextFieldName="@TextFieldName"
                ClearButtonDisplayMode="@ClearButtonDisplayMode"
                AllowUserInput="@AllowUserInput"
                ReadOnly="@ReadOnly"
                InputCssClass="@InputCssClass"
                CssClass="@CssClass"
                FilteringMode="DataGridFilteringMode.Contains"
                @attributes="Attributes">
    </DxComboBox>
</div>

@code {
    [Parameter]
    public bool TabStop { get; set; } = true;
    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string Literal { get; set; } = "";
    [Parameter]
    public string InputCssClass { get; set; } = "";
    [Parameter]
    public string CssClass { get; set; } = "";
    [Parameter]
    public string TextFieldName { get; set; } = "";
    [Parameter]
    public DataEditorClearButtonDisplayMode ClearButtonDisplayMode { get; set; } = DataEditorClearButtonDisplayMode.Never;
    [Parameter]
    public List<TValue> Data { get; set; } = new List<TValue>();
    [Parameter]
    public bool ReadOnly { get; set; } = false;
    [Parameter]
    public bool AllowUserInput { get; set; } = true;

    //Value
    [Parameter]
    public TValue Value { get; set; }
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }
    private async Task OnValueChanged(TValue newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
    }

    //SelectedItemChanged
    [Parameter]
    public EventCallback<TValue> SelectedItemChanged { get; set; }
    private async void OnSelectedItemChanged(TValue newValue)
    {
        Value = newValue;
        await SelectedItemChanged.InvokeAsync(newValue);
    }

    //Ref
    private DxComboBox<TValue, TValue> Ref;

    //Attributes
    private Dictionary<string, object> Attributes { get; set; }
    //
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //ReadOnly
        if (ReadOnly || !TabStop)
        {
            Attributes = new Dictionary<string, object>()
                                            {
                                                { "tabIndex", "-1" }
                                            };
        }
    }
    //Focus
    public async void Focus()
    {
        await Ref.FocusAsync();
    }
}
